<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新日暮里的幻想乡</title>
  
  <subtitle>boy next door</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-04T00:01:10.109Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wxy555123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>错误整理</title>
    <link href="http://yoursite.com/2018/05/25/install%20and%20config/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/25/install and config/错误整理/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-09-04T00:01:10.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-解决python安装第三方包时候，报错-error-Unable-to-find-vcvarsall-bat"><a href="#1-解决python安装第三方包时候，报错-error-Unable-to-find-vcvarsall-bat" class="headerlink" title="1 解决python安装第三方包时候，报错 error: Unable to find vcvarsall.bat"></a>1 解决python安装第三方包时候，报错 error: Unable to find vcvarsall.bat</h3><p>对应python版本安装下面程序：<br><a href="https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/#comments" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/#comments</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-解决python安装第三方包时候，报错-error-Unable-to-find-vcvarsall-bat&quot;&gt;&lt;a href=&quot;#1-解决python安装第三方包时候，报错-error-Unable-to-find-vcvarsall-bat&quot; class=
      
    
    </summary>
    
      <category term="install and config" scheme="http://yoursite.com/categories/install-and-config/"/>
    
    
      <category term="error" scheme="http://yoursite.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>实现多版本Python共存</title>
    <link href="http://yoursite.com/2018/05/25/install%20and%20config/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%89%88%E6%9C%ACPython%E5%85%B1%E5%AD%98/"/>
    <id>http://yoursite.com/2018/05/25/install and config/实现多版本Python共存/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-09-04T00:06:59.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-显示所有环境名字和路径"><a href="#1-显示所有环境名字和路径" class="headerlink" title="1 显示所有环境名字和路径"></a>1 显示所有环境名字和路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs1</span><br></pre></td></tr></table></figure><h3 id="2-创建一个名为python3-5（名字随意，记住就好）的新环境："><a href="#2-创建一个名为python3-5（名字随意，记住就好）的新环境：" class="headerlink" title="2 创建一个名为python3.5（名字随意，记住就好）的新环境："></a>2 创建一个名为python3.5（名字随意，记住就好）的新环境：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n python3.5 python=3.5.2</span><br></pre></td></tr></table></figure><h3 id="3-运行Anaconda-Navigator，选择新环境python3-5，安装jupyter-notebook"><a href="#3-运行Anaconda-Navigator，选择新环境python3-5，安装jupyter-notebook" class="headerlink" title="3 运行Anaconda Navigator，选择新环境python3.5，安装jupyter notebook"></a>3 运行Anaconda Navigator，选择新环境python3.5，安装jupyter notebook</h3><p><img src="/2018/05/25/install and config/实现多版本Python共存/2018-07-18-18-03-19.png" alt=""></p><h3 id="4-使用环境和退出环境分别如下："><a href="#4-使用环境和退出环境分别如下：" class="headerlink" title="4 使用环境和退出环境分别如下："></a>4 使用环境和退出环境分别如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">activate python3.5</span><br><span class="line"></span><br><span class="line">deactivate python3.5</span><br></pre></td></tr></table></figure><p>用 activate python3.5 使用环境后就可以在新的环境里安装各种包，比如安装tensorflow-gpu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu</span><br></pre></td></tr></table></figure><p>【注】如果只想在某个环境的Python下安装包，进入该环境对应的pip的Scripts目录使用<code>pip install xxx</code>即可</p><h3 id="5-另附其他操作："><a href="#5-另附其他操作：" class="headerlink" title="5 另附其他操作："></a>5 另附其他操作：</h3><h4 id="克隆，把tensorflow克隆，新建一个my-th环境："><a href="#克隆，把tensorflow克隆，新建一个my-th环境：" class="headerlink" title="克隆，把tensorflow克隆，新建一个my_th环境："></a>克隆，把tensorflow克隆，新建一个my_th环境：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n my_th --clone tensorflow1</span><br></pre></td></tr></table></figure><h4 id="删除环境my-th"><a href="#删除环境my-th" class="headerlink" title="删除环境my_th"></a>删除环境my_th</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n my_th --all</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-显示所有环境名字和路径&quot;&gt;&lt;a href=&quot;#1-显示所有环境名字和路径&quot; class=&quot;headerlink&quot; title=&quot;1 显示所有环境名字和路径&quot;&gt;&lt;/a&gt;1 显示所有环境名字和路径&lt;/h3&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
      <category term="install and config" scheme="http://yoursite.com/categories/install-and-config/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="anaconda navigator" scheme="http://yoursite.com/tags/anaconda-navigator/"/>
    
  </entry>
  
  <entry>
    <title>Python屏蔽警告方法</title>
    <link href="http://yoursite.com/2018/05/01/python/Python%E5%B1%8F%E8%94%BD%E8%AD%A6%E5%91%8A%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/01/python/Python屏蔽警告方法/</id>
    <published>2018-05-01T11:51:27.000Z</published>
    <updated>2018-05-06T04:52:09.375Z</updated>
    
    <content type="html"><![CDATA[<p>只需要在相应的.py文件头这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.environ[&apos;TF_CPP_MIN_LOG_LEVEL&apos;]=&apos;2&apos;</span><br><span class="line">import tensorflow as tf</span><br></pre></td></tr></table></figure></p><p>然后就没有问题啦～</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'1'</span> <span class="comment"># 这是默认的显示等级，显示所有信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2级</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'2'</span> <span class="comment"># 只显示 warning 和 Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3级</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'3'</span> <span class="comment"># 只显示 Error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只需要在相应的.py文件头这样写：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Python技巧" scheme="http://yoursite.com/tags/Python%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python专题：pickle序列化</title>
    <link href="http://yoursite.com/2018/05/01/python/Python%E4%B8%93%E9%A2%98%EF%BC%9Apickle%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2018/05/01/python/Python专题：pickle序列化/</id>
    <published>2018-05-01T11:51:27.000Z</published>
    <updated>2018-06-05T04:47:34.704Z</updated>
    
    <content type="html"><![CDATA[<p>pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</p><hr><p>pickle.dump(obj, file[, protocol])<br>　　序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。</p><hr><p>pickle.load(file)<br>　　反序列化对象。将文件中的数据解析为一个Python对象。</p><p>其中要注意的是，在load(file)的时候，要让python能够找到类的定义，否则会报错：</p><p>比如下面的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.age=a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name+<span class="string">"_"</span>+str(self.age)</span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)</span><br><span class="line">aa.show()</span><br><span class="line">f=open(<span class="string">'d:\\p.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">pickle.dump(aa,f,<span class="number">0</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#del Person</span></span><br><span class="line">f=open(<span class="string">'d:\\p.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">bb=pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">bb.show()</span><br></pre></td></tr></table></figure></p><p>如果不注释掉del Person的话，那么会报错如下：</p><p><img src="/2018/05/01/python/Python专题：pickle序列化/2018-06-05-12-46-29.png" alt=""><br>意思就是当前模块找不到类的定义了。</p><hr><p>clear_memo()<br>　　清空pickler的“备忘”。使用Pickler实例在序列化对象的时候，它会“记住”已经被序列化的对象引用，所以对同一对象多次调用dump(obj)，pickler不会“傻傻”的去多次序列化。<br>看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StringIO  </span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a)</span>:</span>  </span><br><span class="line">        self.name=n  </span><br><span class="line">        self.age=a  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">print</span> self.name+<span class="string">"_"</span>+str(self.age)  </span><br><span class="line">aa = Person(<span class="string">"JGood"</span>, <span class="number">2</span>)  </span><br><span class="line">aa.show()  </span><br><span class="line">fle = StringIO.StringIO()   </span><br><span class="line">pick = pickle.Pickler(fle)  </span><br><span class="line">pick.dump(aa)  </span><br><span class="line">val1=fle.getvalue()  </span><br><span class="line"><span class="keyword">print</span> len(val1)  </span><br><span class="line">pick.clear_memo()  </span><br><span class="line">pick.dump(aa)  </span><br><span class="line">val2=fle.getvalue()  </span><br><span class="line"><span class="keyword">print</span> len(val2)  </span><br><span class="line">fle.close()</span><br></pre></td></tr></table></figure><p>上面的代码运行如下：</p><p><img src="/2018/05/01/python/Python专题：pickle序列化/2018-06-05-12-47-10.png" alt=""></p><p>如果不注释掉，则运行结果是第一个。如果注释掉，那么运行结果是第二个。</p><p>主要是因为，python的pickle如果不clear_memo，则不会多次去序列化对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;pickle.dump(obj, file[, protocol])&lt;br&gt;　　序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Python技巧" scheme="http://yoursite.com/tags/Python%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>欢迎光临，BLOG刚弄不久正在施工 文章陆续上传中...</title>
    <link href="http://yoursite.com/2018/04/29/OTHERS/%E7%BD%AE%E9%A1%B6%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2018/04/29/OTHERS/置顶信息/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-04T04:39:25.923Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>4线性方程求解</title>
    <link href="http://yoursite.com/2018/04/29/math/linear_algebra/4%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/29/math/linear_algebra/4线性方程求解/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-03T13:31:39.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性方程求解方法"><a href="#线性方程求解方法" class="headerlink" title="线性方程求解方法"></a>线性方程求解方法</h1><h2 id="Gauss消去法"><a href="#Gauss消去法" class="headerlink" title="Gauss消去法"></a>Gauss消去法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-18-09.png" alt=""><br>1转化为（同解）的三角形方程组<br>2化阶梯形矩阵 且 要保证解不变，所以需要组成增广阵再进行 初等行变换（同解变换）<br>实际过程就是一行一行消元，用上面行消去下面行第一个项，有利于解出最后一个回代</p><p>举例：<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-06.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-18.png" alt=""><br>适用性：<br>系数矩阵A规模比较小的，否则很慢<br>系数矩阵A是非奇异的，否则没有唯一解</p><h2 id="Jacobi迭代法"><a href="#Jacobi迭代法" class="headerlink" title="Jacobi迭代法"></a>Jacobi迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-23-45.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-05.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-14.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-21.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-35.png" alt=""></p><h3 id="雅克比迭代法矩阵描述"><a href="#雅克比迭代法矩阵描述" class="headerlink" title="雅克比迭代法矩阵描述"></a>雅克比迭代法矩阵描述</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-30.png" alt=""></p><h3 id="矩阵迭代公式"><a href="#矩阵迭代公式" class="headerlink" title="矩阵迭代公式"></a>矩阵迭代公式</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-46.png" alt=""><br>DX = (L+U)X + b<br>L和U都没更新，写在右边<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-14.png" alt=""></p><h2 id="Gauss-Seildel迭代法"><a href="#Gauss-Seildel迭代法" class="headerlink" title="Gauss-Seildel迭代法"></a>Gauss-Seildel迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-47.png" alt=""><br>及时更新下半三角系数的迭代</p><h3 id="矩阵迭代公式一"><a href="#矩阵迭代公式一" class="headerlink" title="矩阵迭代公式一"></a>矩阵迭代公式一</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-19.png" alt=""><br>(D-L)X = UX + b<br>只有上半部的U没更新，写在右边</p><h3 id="矩阵迭代公式二"><a href="#矩阵迭代公式二" class="headerlink" title="矩阵迭代公式二"></a>矩阵迭代公式二</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-39.png" alt=""><br>这样D的逆更方便求出来</p><h2 id="迭代法的收敛"><a href="#迭代法的收敛" class="headerlink" title="迭代法的收敛"></a>迭代法的收敛</h2><p>严格对角占优矩阵<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-28-47.png" alt=""></p><p>定义：对角线元素的绝对值和 &gt; 其所在 行/列 元素的绝对值和 的矩阵</p><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-29-02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性方程求解方法&quot;&gt;&lt;a href=&quot;#线性方程求解方法&quot; class=&quot;headerlink&quot; title=&quot;线性方程求解方法&quot;&gt;&lt;/a&gt;线性方程求解方法&lt;/h1&gt;&lt;h2 id=&quot;Gauss消去法&quot;&gt;&lt;a href=&quot;#Gauss消去法&quot; class=&quot;head
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow学习10-2：验证码识别——训练和测试</title>
    <link href="http://yoursite.com/2018/04/26/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A010-2%EF%BC%9A%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E2%80%94%E2%80%94%E8%AE%AD%E7%BB%83%E5%92%8C%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/</id>
    <published>2018-04-25T16:10:27.000Z</published>
    <updated>2018-07-21T04:00:46.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如题，本篇介绍的是tensorflow实现验证码的识别，之前我们已经生成了数据集，并且转换成了tfrecord格式的文件，现在我们开始利用这个文件来进行训练及识别。</p><p>补充一点，我们可以有两种方法进行验证码识别，其一，把标签转为向量，向量长度为40，比如一个验证码为0782，它的标签可以转为长度为40的向量 1000000000 0000000100 0000000010 0010000000，接下来，训练方法和手写数字识别类似。其二，使用的是多任务的学习方法，拆分为4个标签</p><h2 id="1-多任务学习"><a href="#1-多任务学习" class="headerlink" title="1 多任务学习"></a>1 多任务学习</h2><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/2018-07-16-14-01-04.png" alt=""></p><p>采用multi-task learning 多任务学习。<br><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/2018-07-16-14-01-26.png" alt=""><br>以验证码识别为例：</p><p>多任务学习是一种联合学习，多个任务并行学习，结果相互影响。所谓多任务学习，就是同时求解多个问题。个性化问题就是一种典型的多任务学习问题，它同时学习多个用户的兴趣偏好。</p><p>多任务学习有交替训练和联合训练。由于数据集相同，我们采用的是多任务学习中的联合训练。</p><h3 id="1）准备工作"><a href="#1）准备工作" class="headerlink" title="1）准备工作"></a>1）准备工作</h3><p>言归正传，我们下面用代码实现这个多任务学习。上篇已经按照之前的步骤生成好了tfrecord文件，我们使用alexnet_v2模型来完成。注意需要修改alexnet代码，该代码位于slim/nets文件夹下：<br><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/2018-07-16-14-05-15.png" alt=""></p><p>我们将nets拷贝到当前工程目录下，重命名为<code>nets_multi</code>，并修改<code>alexnet.py</code>代码，将最后一层分为4个输出（4个学习任务）。修改后其完整代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">slim = tf.contrib.slim</span><br><span class="line">trunc_normal = <span class="keyword">lambda</span> stddev: tf.truncated_normal_initializer(<span class="number">0.0</span>, stddev)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alexnet_v2_arg_scope</span><span class="params">(weight_decay=<span class="number">0.0005</span>)</span>:</span></span><br><span class="line">  <span class="keyword">with</span> slim.arg_scope([slim.conv2d, slim.fully_connected],</span><br><span class="line">                      activation_fn=tf.nn.relu,</span><br><span class="line">                      biases_initializer=tf.constant_initializer(<span class="number">0.1</span>),</span><br><span class="line">                      weights_regularizer=slim.l2_regularizer(weight_decay)):</span><br><span class="line">    <span class="keyword">with</span> slim.arg_scope([slim.conv2d], padding=<span class="string">'SAME'</span>):</span><br><span class="line">      <span class="keyword">with</span> slim.arg_scope([slim.max_pool2d], padding=<span class="string">'VALID'</span>) <span class="keyword">as</span> arg_sc:</span><br><span class="line">        <span class="keyword">return</span> arg_sc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alexnet_v2</span><span class="params">(inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">               num_classes=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               is_training=True,</span></span></span><br><span class="line"><span class="function"><span class="params">               dropout_keep_prob=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               spatial_squeeze=True,</span></span></span><br><span class="line"><span class="function"><span class="params">               scope=<span class="string">'alexnet_v2'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               global_pool=False)</span>:</span></span><br><span class="line">  <span class="string">"""AlexNet version 2.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Described in: http://arxiv.org/pdf/1404.5997v2.pdf</span></span><br><span class="line"><span class="string">  Parameters from:</span></span><br><span class="line"><span class="string">  github.com/akrizhevsky/cuda-convnet2/blob/master/layers/</span></span><br><span class="line"><span class="string">  layers-imagenet-1gpu.cfg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Note: All the fully_connected layers have been transformed to conv2d layers.</span></span><br><span class="line"><span class="string">        To use in classification mode, resize input to 224x224 or set</span></span><br><span class="line"><span class="string">        global_pool=True. To use in fully convolutional mode, set</span></span><br><span class="line"><span class="string">        spatial_squeeze to false.</span></span><br><span class="line"><span class="string">        The LRN layers have been removed and change the initializers from</span></span><br><span class="line"><span class="string">        random_normal_initializer to xavier_initializer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    inputs: a tensor of size [batch_size, height, width, channels].</span></span><br><span class="line"><span class="string">    num_classes: the number of predicted classes. If 0 or None, the logits layer</span></span><br><span class="line"><span class="string">    is omitted and the input features to the logits layer are returned instead.</span></span><br><span class="line"><span class="string">    is_training: whether or not the model is being trained.</span></span><br><span class="line"><span class="string">    dropout_keep_prob: the probability that activations are kept in the dropout</span></span><br><span class="line"><span class="string">      layers during training.</span></span><br><span class="line"><span class="string">    spatial_squeeze: whether or not should squeeze the spatial dimensions of the</span></span><br><span class="line"><span class="string">      logits. Useful to remove unnecessary dimensions for classification.</span></span><br><span class="line"><span class="string">    scope: Optional scope for the variables.</span></span><br><span class="line"><span class="string">    global_pool: Optional boolean flag. If True, the input to the classification</span></span><br><span class="line"><span class="string">      layer is avgpooled to size 1x1, for any input size. (This is not part</span></span><br><span class="line"><span class="string">      of the original AlexNet.)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    net: the output of the logits layer (if num_classes is a non-zero integer),</span></span><br><span class="line"><span class="string">      or the non-dropped-out input to the logits layer (if num_classes is 0</span></span><br><span class="line"><span class="string">      or None).</span></span><br><span class="line"><span class="string">    end_points: a dict of tensors with intermediate activations.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">with</span> tf.variable_scope(scope, <span class="string">'alexnet_v2'</span>, [inputs]) <span class="keyword">as</span> sc:</span><br><span class="line">    end_points_collection = sc.name + <span class="string">'_end_points'</span></span><br><span class="line">    <span class="comment"># Collect outputs for conv2d, fully_connected and max_pool2d.</span></span><br><span class="line">    <span class="keyword">with</span> slim.arg_scope([slim.conv2d, slim.fully_connected, slim.max_pool2d],</span><br><span class="line">                        outputs_collections=[end_points_collection]):</span><br><span class="line">      net = slim.conv2d(inputs, <span class="number">64</span>, [<span class="number">11</span>, <span class="number">11</span>], <span class="number">4</span>, padding=<span class="string">'VALID'</span>,</span><br><span class="line">                        scope=<span class="string">'conv1'</span>)</span><br><span class="line">      net = slim.max_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], <span class="number">2</span>, scope=<span class="string">'pool1'</span>)</span><br><span class="line">      net = slim.conv2d(net, <span class="number">192</span>, [<span class="number">5</span>, <span class="number">5</span>], scope=<span class="string">'conv2'</span>)</span><br><span class="line">      net = slim.max_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], <span class="number">2</span>, scope=<span class="string">'pool2'</span>)</span><br><span class="line">      net = slim.conv2d(net, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'conv3'</span>)</span><br><span class="line">      net = slim.conv2d(net, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'conv4'</span>)</span><br><span class="line">      net = slim.conv2d(net, <span class="number">256</span>, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'conv5'</span>)</span><br><span class="line">      net = slim.max_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], <span class="number">2</span>, scope=<span class="string">'pool5'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Use conv2d instead of fully_connected layers.</span></span><br><span class="line">      <span class="keyword">with</span> slim.arg_scope([slim.conv2d],</span><br><span class="line">                          weights_initializer=trunc_normal(<span class="number">0.005</span>),</span><br><span class="line">                          biases_initializer=tf.constant_initializer(<span class="number">0.1</span>)):</span><br><span class="line">        net = slim.conv2d(net, <span class="number">4096</span>, [<span class="number">5</span>, <span class="number">5</span>], padding=<span class="string">'VALID'</span>,</span><br><span class="line">                          scope=<span class="string">'fc6'</span>)</span><br><span class="line">        net = slim.dropout(net, dropout_keep_prob, is_training=is_training,</span><br><span class="line">                           scope=<span class="string">'dropout6'</span>)</span><br><span class="line">        net = slim.conv2d(net, <span class="number">4096</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'fc7'</span>)</span><br><span class="line">        net = slim.dropout(net, dropout_keep_prob, is_training=is_training,</span><br><span class="line">                           scope=<span class="string">'dropout7'</span>)</span><br><span class="line">        <span class="comment">#分成4个输出</span></span><br><span class="line">        net0 = slim.conv2d(net, num_classes, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                            activation_fn=<span class="keyword">None</span>,</span><br><span class="line">                            normalizer_fn=<span class="keyword">None</span>,</span><br><span class="line">                            biases_initializer=tf.zeros_initializer(),</span><br><span class="line">                            scope=<span class="string">'fc8_0'</span>)</span><br><span class="line">        net1 = slim.conv2d(net, num_classes, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                            activation_fn=<span class="keyword">None</span>,</span><br><span class="line">                            normalizer_fn=<span class="keyword">None</span>,</span><br><span class="line">                            biases_initializer=tf.zeros_initializer(),</span><br><span class="line">                            scope=<span class="string">'fc8_1'</span>)</span><br><span class="line">        net2 = slim.conv2d(net, num_classes, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                            activation_fn=<span class="keyword">None</span>,</span><br><span class="line">                            normalizer_fn=<span class="keyword">None</span>,</span><br><span class="line">                            biases_initializer=tf.zeros_initializer(),</span><br><span class="line">                            scope=<span class="string">'fc8_2'</span>)</span><br><span class="line">        net3 = slim.conv2d(net, num_classes, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                            activation_fn=<span class="keyword">None</span>,</span><br><span class="line">                            normalizer_fn=<span class="keyword">None</span>,</span><br><span class="line">                            biases_initializer=tf.zeros_initializer(),</span><br><span class="line">                            scope=<span class="string">'fc8_3'</span>)</span><br><span class="line">        <span class="comment"># Convert end_points_collection into a end_point dict.</span></span><br><span class="line">        end_points = slim.utils.convert_collection_to_dict(end_points_collection)</span><br><span class="line">        <span class="comment"># if global_pool:</span></span><br><span class="line">          <span class="comment"># net = tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')</span></span><br><span class="line">          <span class="comment"># end_points['global_pool'] = net</span></span><br><span class="line">        <span class="comment">#if num_classes:</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#net = slim.conv2d(net, num_classes, [1, 1],</span></span><br><span class="line">                            <span class="comment">#activation_fn=None,</span></span><br><span class="line">                            <span class="comment">#normalizer_fn=None,</span></span><br><span class="line">                            <span class="comment">#biases_initializer=tf.zeros_initializer(),</span></span><br><span class="line">                            <span class="comment">#scope='fc8')</span></span><br><span class="line">        <span class="keyword">if</span> spatial_squeeze:</span><br><span class="line">            net0 = tf.squeeze(net0, [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">'fc8_0/squeezed'</span>)</span><br><span class="line">            end_points[sc.name + <span class="string">'/fc8_0'</span>] = net0</span><br><span class="line">            net1 = tf.squeeze(net1, [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">'fc8_1/squeezed'</span>)</span><br><span class="line">            end_points[sc.name + <span class="string">'/fc8_1'</span>] = net1</span><br><span class="line">            net2 = tf.squeeze(net2, [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">'fc8_2/squeezed'</span>)</span><br><span class="line">            end_points[sc.name + <span class="string">'/fc8_2'</span>] = net2</span><br><span class="line">            net3 = tf.squeeze(net3, [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">'fc8_3/squeezed'</span>)</span><br><span class="line">            end_points[sc.name + <span class="string">'/fc8_3'</span>] = net3</span><br><span class="line">        <span class="keyword">return</span> net0, net1, net2, net3, end_points</span><br><span class="line">alexnet_v2.default_image_size = <span class="number">224</span></span><br></pre></td></tr></table></figure></p><p>修改<code>nets_factory.py</code>文件，增加一条代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nets <span class="keyword">import</span> alexnet_multi</span><br></pre></td></tr></table></figure></p><h3 id="2）训练"><a href="#2）训练" class="headerlink" title="2）训练"></a>2）训练</h3><p>训练代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> nets <span class="keyword">import</span> nets_factory</span><br><span class="line"><span class="comment">#不同字符数量</span></span><br><span class="line">CHAR_SET_LEN = <span class="number">10</span></span><br><span class="line"><span class="comment">#图片高度</span></span><br><span class="line">IMAGE_HEIGHT = <span class="number">60</span></span><br><span class="line"><span class="comment">#图片宽度</span></span><br><span class="line">IMAGE_WIDTH = <span class="number">160</span></span><br><span class="line"><span class="comment">#批次</span></span><br><span class="line">BATCH_SIZE = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">MOD_DIR = <span class="string">"D:/Tensorflow/captcha/model/"</span></span><br><span class="line"><span class="comment">#tfrecord存放路径</span></span><br><span class="line">TFRECORD_FILE = <span class="string">"D:/Tensorflow/captcha/train.tfrecord"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#placeholder</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">224</span>, <span class="number">224</span>])</span><br><span class="line">y0 = tf.placeholder(tf.float32, [<span class="keyword">None</span>])</span><br><span class="line">y1 = tf.placeholder(tf.float32, [<span class="keyword">None</span>])</span><br><span class="line">y2 = tf.placeholder(tf.float32, [<span class="keyword">None</span>])</span><br><span class="line">y3 = tf.placeholder(tf.float32, [<span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#学习率</span></span><br><span class="line">lr = tf.Variable(<span class="number">0.003</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取tfrecord</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_and_decode</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment">#根据文件名生成一个队列</span></span><br><span class="line">    filename_queue = tf.train.string_input_producer([filename])</span><br><span class="line">    reader = tf.TFRecordReader()</span><br><span class="line">    <span class="comment">#返回文件名和文件</span></span><br><span class="line">    _, serialized_example = reader.read(filename_queue)</span><br><span class="line">    features = tf.parse_single_example(serialized_example,</span><br><span class="line">                                      features= &#123;</span><br><span class="line">                                          <span class="string">"image"</span> : tf.FixedLenFeature([], tf.string),</span><br><span class="line">                                          <span class="string">"label0"</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">                                          <span class="string">"label1"</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">                                          <span class="string">"label2"</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">                                          <span class="string">"label3"</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">                                      &#125;)</span><br><span class="line">    <span class="comment">#获取图片数据</span></span><br><span class="line">    image = tf.decode_raw(features[<span class="string">"image"</span>], tf.uint8)</span><br><span class="line">    <span class="comment">#tf.train.shuffle_batch必须确定shape</span></span><br><span class="line">    image = tf.reshape(image, [<span class="number">224</span>,<span class="number">224</span>])</span><br><span class="line">    <span class="comment">#图片预处理</span></span><br><span class="line">    image = tf.cast(image, tf.float32) / <span class="number">255.0</span></span><br><span class="line">    image = tf.subtract(image, <span class="number">0.5</span>)</span><br><span class="line">    image = tf.multiply(image, <span class="number">2.0</span>)</span><br><span class="line">    <span class="comment">#获取Label</span></span><br><span class="line">    label0 = tf.cast(features[<span class="string">"label0"</span>], tf.int32)</span><br><span class="line">    label1 = tf.cast(features[<span class="string">"label1"</span>], tf.int32)</span><br><span class="line">    label2 = tf.cast(features[<span class="string">"label2"</span>], tf.int32)</span><br><span class="line">    label3 = tf.cast(features[<span class="string">"label3"</span>], tf.int32)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image, label0, label1, label2, label3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取图片数据和标签</span></span><br><span class="line">image, label0, label1, label2, label3 = read_and_decode(TFRECORD_FILE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用shuffle_batch可以随机打乱 next_batch挨着往下取</span></span><br><span class="line"><span class="comment"># shuffle_batch才能实现[img,label]的同步,也即特征和label的同步,不然可能输入的特征和label不匹配</span></span><br><span class="line"><span class="comment"># 比如只有这样使用,才能使img和label一一对应,每次提取一个image和对应的label</span></span><br><span class="line"><span class="comment"># shuffle_batch返回的值就是RandomShuffleQueue.dequeue_many()的结果</span></span><br><span class="line"><span class="comment"># Shuffle_batch构建了一个RandomShuffleQueue，并不断地把单个的[img,label],送入队列中</span></span><br><span class="line">image_batch, label_batch0, label_batch1,label_batch2,label_batch3 = tf.train.shuffle_batch(</span><br><span class="line">        [image, label0, label1, label2, label3], batch_size = BATCH_SIZE,</span><br><span class="line">        capacity = <span class="number">5000</span>, min_after_dequeue=<span class="number">1000</span>, num_threads=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义网络结构</span></span><br><span class="line">train_network_fn = nets_factory.get_network_fn(</span><br><span class="line">    <span class="string">"alexnet_v2"</span>,</span><br><span class="line">    num_classes=CHAR_SET_LEN,</span><br><span class="line">    weight_decay=<span class="number">0.0005</span>,</span><br><span class="line">    is_training=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#inputs: a tensor of size [batch_size, height, width, channels]</span></span><br><span class="line">    X = tf.reshape(x, [BATCH_SIZE, <span class="number">224</span>, <span class="number">224</span>, <span class="number">1</span>])</span><br><span class="line">    <span class="comment">#数据输入网络得到输出值</span></span><br><span class="line">    logits0,logits1,logits2,logits3,end_points = train_network_fn(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#把标签转成one_hot形式</span></span><br><span class="line">    one_hot_labels0 = tf.one_hot(indices=tf.cast(y0, tf.int32), depth=CHAR_SET_LEN)</span><br><span class="line">    one_hot_labels1 = tf.one_hot(indices=tf.cast(y1, tf.int32), depth=CHAR_SET_LEN)</span><br><span class="line">    one_hot_labels2 = tf.one_hot(indices=tf.cast(y2, tf.int32), depth=CHAR_SET_LEN)</span><br><span class="line">    one_hot_labels3 = tf.one_hot(indices=tf.cast(y3, tf.int32), depth=CHAR_SET_LEN)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算loss</span></span><br><span class="line">    loss0 = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits0, labels=one_hot_labels0))</span><br><span class="line">    loss1 = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits1, labels=one_hot_labels1))</span><br><span class="line">    loss2 = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits2, labels=one_hot_labels2))</span><br><span class="line">    loss3 = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits3, labels=one_hot_labels3))</span><br><span class="line">    <span class="comment">#计算总loss</span></span><br><span class="line">    total_loss = (loss0+loss1+loss2+loss3) / <span class="number">4.0</span></span><br><span class="line">    <span class="comment">#优化器</span></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate=lr).minimize(total_loss)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算准确率</span></span><br><span class="line">    correct_prediction0 = tf.equal(tf.argmax(one_hot_labels0,<span class="number">1</span>), tf.argmax(logits0,<span class="number">1</span>))</span><br><span class="line">    accuracy0 = tf.reduce_mean(tf.cast(correct_prediction0, tf.float32))</span><br><span class="line">    </span><br><span class="line">    correct_prediction1 = tf.equal(tf.argmax(one_hot_labels1,<span class="number">1</span>), tf.argmax(logits1,<span class="number">1</span>))</span><br><span class="line">    accuracy1 = tf.reduce_mean(tf.cast(correct_prediction1, tf.float32))</span><br><span class="line">    </span><br><span class="line">    correct_prediction2 = tf.equal(tf.argmax(one_hot_labels2,<span class="number">1</span>), tf.argmax(logits2,<span class="number">1</span>))</span><br><span class="line">    accuracy2 = tf.reduce_mean(tf.cast(correct_prediction2, tf.float32))</span><br><span class="line">    </span><br><span class="line">    correct_prediction3 = tf.equal(tf.argmax(one_hot_labels3,<span class="number">1</span>), tf.argmax(logits3,<span class="number">1</span>))</span><br><span class="line">    accuracy3 = tf.reduce_mean(tf.cast(correct_prediction3, tf.float32))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#用于保存模型</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    </span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#创建一个协调器，管理线程</span></span><br><span class="line">    coord = tf.train.Coordinator()</span><br><span class="line">    <span class="comment">#启动Queue Runners，此时文件名队列已经进队</span></span><br><span class="line">    threads = tf.train.start_queue_runners(sess=sess, coord=coord)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3001</span>):</span><br><span class="line">        <span class="comment">#获取一个批次是数据和标签</span></span><br><span class="line">        b_image,b_label0,b_label1,b_label2,b_label3 = sess.run([image_batch, label_batch0, label_batch1,label_batch2,label_batch3])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#优化模型</span></span><br><span class="line">        sess.run(optimizer, feed_dict=&#123;x:b_image, y0:b_label0, y1:b_label1, y2:b_label2, y3:b_label3&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#每迭代20次计算一下loss 和 accuracy</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#每迭代1000次降低一下学习率</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                sess.run(tf.assign(lr, lr/<span class="number">3</span>))</span><br><span class="line">                </span><br><span class="line"><span class="comment">#             print("y0:",b_label0, "y1:",b_label1, "y2:",b_label2, "y3:",b_label3)</span></span><br><span class="line"><span class="comment">#             _logits0,_logits1,_logits2,_logits3 = sess.run([logits0,logits1,logits2,logits3], feed_dict=&#123;x:b_image&#125;)</span></span><br><span class="line"><span class="comment">#             print("logits0:",_logits0, "logits1:",_logits1,"logits2:",_logits2,"logits3:",_logits3)</span></span><br><span class="line">                  </span><br><span class="line">            acc0,acc1,acc2,acc3,loss_ = sess.run([accuracy0,accuracy1,accuracy2,accuracy3,total_loss], feed_dict=&#123;</span><br><span class="line">                                                                        x:b_image, y0:b_label0, y1:b_label1, y2:b_label2, y3:b_label3</span><br><span class="line">                                                                    &#125;)</span><br><span class="line">            learning_rate = sess.run(lr)</span><br><span class="line">            print(<span class="string">"Iter:%d Loss:%.3f Accuracy:%.2f,%.2f,%.2f,%.2f Learning Rate:%.4f"</span> % (i,loss_,acc0,acc1,acc2,acc3, learning_rate))</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#满足设置条件，就停止训练保存模型</span></span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">3000</span>:</span><br><span class="line">                saver.save(sess, MOD_DIR + <span class="string">"captcha.model"</span>, global_step=i) <span class="comment">#global_step——保存后缀为3000</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#通知其他线程关闭</span></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    <span class="comment">#其他所有线程关闭后，这个函数才能返回</span></span><br><span class="line">    coord.join(threads)</span><br></pre></td></tr></table></figure><p>WARNING:tensorflow:From <ipython-input-3-e19f7531f5fb>:34: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.<br>Instructions for updating:</ipython-input-3-e19f7531f5fb></p><p>Future major versions of TensorFlow will allow gradients to flow<br>into the labels input on backprop by default.</p><p>See @{tf.nn.softmax_cross_entropy_with_logits_v2}.</p><p>Iter:0 Loss:1566.136 Accuracy:0.32,0.12,0.16,0.20 Learning Rate:0.0010<br>Iter:20 Loss:2.314 Accuracy:0.12,0.08,0.12,0.08 Learning Rate:0.0010<br>Iter:40 Loss:2.297 Accuracy:0.24,0.04,0.12,0.04 Learning Rate:0.0010<br>Iter:60 Loss:2.296 Accuracy:0.20,0.04,0.04,0.08 Learning Rate:0.0010<br>Iter:80 Loss:2.310 Accuracy:0.04,0.04,0.04,0.20 Learning Rate:0.0010<br>Iter:100 Loss:2.322 Accuracy:0.00,0.04,0.08,0.04 Learning Rate:0.0010<br>Iter:120 Loss:2.277 Accuracy:0.08,0.32,0.08,0.16 Learning Rate:0.0010<br>Iter:140 Loss:2.328 Accuracy:0.12,0.08,0.04,0.08 Learning Rate:0.0010<br>Iter:160 Loss:2.294 Accuracy:0.08,0.16,0.12,0.08 Learning Rate:0.0010<br>Iter:180 Loss:2.295 Accuracy:0.04,0.08,0.24,0.20 Learning Rate:0.0010<br>Iter:200 Loss:2.314 Accuracy:0.16,0.04,0.04,0.04 Learning Rate:0.0010<br>Iter:220 Loss:2.299 Accuracy:0.08,0.16,0.12,0.04 Learning Rate:0.0010<br>Iter:240 Loss:2.310 Accuracy:0.04,0.00,0.12,0.12 Learning Rate:0.0010<br>Iter:260 Loss:2.315 Accuracy:0.00,0.16,0.12,0.16 Learning Rate:0.0010<br>Iter:280 Loss:2.305 Accuracy:0.12,0.28,0.08,0.04 Learning Rate:0.0010<br>Iter:300 Loss:2.299 Accuracy:0.04,0.08,0.08,0.16 Learning Rate:0.0010<br>Iter:320 Loss:2.293 Accuracy:0.12,0.08,0.16,0.20 Learning Rate:0.0010<br>Iter:340 Loss:2.265 Accuracy:0.12,0.28,0.12,0.24 Learning Rate:0.0010<br>Iter:360 Loss:2.307 Accuracy:0.16,0.16,0.08,0.12 Learning Rate:0.0010<br>Iter:380 Loss:2.305 Accuracy:0.16,0.12,0.04,0.08 Learning Rate:0.0010<br>Iter:400 Loss:2.312 Accuracy:0.16,0.20,0.00,0.04 Learning Rate:0.0010<br>Iter:420 Loss:2.302 Accuracy:0.16,0.00,0.12,0.08 Learning Rate:0.0010<br>Iter:440 Loss:2.278 Accuracy:0.08,0.24,0.36,0.08 Learning Rate:0.0010<br>Iter:460 Loss:2.290 Accuracy:0.04,0.12,0.08,0.12 Learning Rate:0.0010<br>Iter:480 Loss:2.294 Accuracy:0.20,0.16,0.08,0.12 Learning Rate:0.0010<br>Iter:500 Loss:2.319 Accuracy:0.08,0.12,0.00,0.12 Learning Rate:0.0010<br>Iter:520 Loss:2.294 Accuracy:0.12,0.04,0.20,0.20 Learning Rate:0.0010<br>Iter:540 Loss:2.297 Accuracy:0.16,0.12,0.08,0.00 Learning Rate:0.0010<br>Iter:560 Loss:2.309 Accuracy:0.08,0.08,0.04,0.04 Learning Rate:0.0010<br>Iter:580 Loss:2.294 Accuracy:0.12,0.08,0.24,0.08 Learning Rate:0.0010<br>Iter:600 Loss:2.284 Accuracy:0.16,0.08,0.08,0.24 Learning Rate:0.0010<br>Iter:620 Loss:2.281 Accuracy:0.08,0.00,0.28,0.32 Learning Rate:0.0010<br>Iter:640 Loss:2.318 Accuracy:0.04,0.16,0.08,0.00 Learning Rate:0.0010<br>Iter:660 Loss:2.291 Accuracy:0.08,0.20,0.20,0.12 Learning Rate:0.0010<br>Iter:680 Loss:2.311 Accuracy:0.04,0.04,0.00,0.12 Learning Rate:0.0010<br>Iter:700 Loss:2.220 Accuracy:0.20,0.04,0.08,0.20 Learning Rate:0.0010<br>Iter:720 Loss:2.196 Accuracy:0.48,0.16,0.00,0.24 Learning Rate:0.0010<br>Iter:740 Loss:2.215 Accuracy:0.20,0.08,0.04,0.20 Learning Rate:0.0010<br>Iter:760 Loss:2.084 Accuracy:0.36,0.12,0.08,0.12 Learning Rate:0.0010<br>Iter:780 Loss:2.087 Accuracy:0.36,0.12,0.00,0.04 Learning Rate:0.0010<br>Iter:800 Loss:2.121 Accuracy:0.36,0.08,0.08,0.08 Learning Rate:0.0010<br>Iter:820 Loss:1.991 Accuracy:0.48,0.20,0.16,0.12 Learning Rate:0.0010<br>Iter:840 Loss:1.926 Accuracy:0.60,0.12,0.32,0.16 Learning Rate:0.0010<br>Iter:860 Loss:1.868 Accuracy:0.52,0.24,0.12,0.24 Learning Rate:0.0010<br>Iter:880 Loss:1.876 Accuracy:0.48,0.12,0.16,0.20 Learning Rate:0.0010<br>Iter:900 Loss:1.693 Accuracy:0.64,0.24,0.28,0.40 Learning Rate:0.0010<br>Iter:920 Loss:1.768 Accuracy:0.72,0.28,0.20,0.24 Learning Rate:0.0010<br>Iter:940 Loss:1.582 Accuracy:0.64,0.32,0.36,0.48 Learning Rate:0.0010<br>Iter:960 Loss:1.673 Accuracy:0.60,0.24,0.24,0.32 Learning Rate:0.0010<br>Iter:980 Loss:1.530 Accuracy:0.84,0.28,0.28,0.36 Learning Rate:0.0010<br>Iter:1000 Loss:1.550 Accuracy:0.68,0.28,0.40,0.40 Learning Rate:0.0003<br>Iter:1020 Loss:1.446 Accuracy:0.56,0.20,0.48,0.36 Learning Rate:0.0003<br>Iter:1040 Loss:1.445 Accuracy:0.68,0.44,0.20,0.52 Learning Rate:0.0003<br>Iter:1060 Loss:1.425 Accuracy:0.80,0.48,0.24,0.60 Learning Rate:0.0003<br>Iter:1080 Loss:1.273 Accuracy:0.80,0.56,0.40,0.56 Learning Rate:0.0003<br>Iter:1100 Loss:1.171 Accuracy:0.76,0.44,0.36,0.68 Learning Rate:0.0003<br>Iter:1120 Loss:1.080 Accuracy:0.84,0.44,0.52,0.56 Learning Rate:0.0003<br>Iter:1140 Loss:1.242 Accuracy:0.88,0.40,0.56,0.32 Learning Rate:0.0003<br>Iter:1160 Loss:1.071 Accuracy:0.88,0.60,0.52,0.52 Learning Rate:0.0003<br>Iter:1180 Loss:1.176 Accuracy:0.80,0.44,0.56,0.48 Learning Rate:0.0003<br>Iter:1200 Loss:1.131 Accuracy:0.84,0.48,0.52,0.44 Learning Rate:0.0003<br>Iter:1220 Loss:1.138 Accuracy:0.76,0.52,0.64,0.56 Learning Rate:0.0003<br>Iter:1240 Loss:1.035 Accuracy:0.84,0.56,0.56,0.52 Learning Rate:0.0003<br>Iter:1260 Loss:0.820 Accuracy:0.92,0.68,0.64,0.68 Learning Rate:0.0003<br>Iter:1280 Loss:1.083 Accuracy:0.92,0.36,0.52,0.64 Learning Rate:0.0003<br>Iter:1300 Loss:0.966 Accuracy:1.00,0.52,0.44,0.60 Learning Rate:0.0003<br>Iter:1320 Loss:0.804 Accuracy:0.84,0.68,0.60,0.64 Learning Rate:0.0003<br>Iter:1340 Loss:0.845 Accuracy:0.92,0.72,0.48,0.56 Learning Rate:0.0003<br>Iter:1360 Loss:0.923 Accuracy:0.80,0.48,0.64,0.56 Learning Rate:0.0003<br>Iter:1380 Loss:0.664 Accuracy:0.96,0.60,0.60,0.88 Learning Rate:0.0003<br>Iter:1400 Loss:0.915 Accuracy:0.88,0.72,0.40,0.72 Learning Rate:0.0003<br>Iter:1420 Loss:0.724 Accuracy:0.92,0.72,0.64,0.72 Learning Rate:0.0003<br>Iter:1440 Loss:0.574 Accuracy:0.96,0.76,0.76,0.76 Learning Rate:0.0003<br>Iter:1460 Loss:0.550 Accuracy:0.88,0.80,0.72,0.88 Learning Rate:0.0003<br>Iter:1480 Loss:0.588 Accuracy:0.88,0.72,0.84,0.84 Learning Rate:0.0003<br>Iter:1500 Loss:0.611 Accuracy:0.80,0.76,0.68,0.84 Learning Rate:0.0003<br>Iter:1520 Loss:0.487 Accuracy:0.88,0.84,0.80,0.96 Learning Rate:0.0003<br>Iter:1540 Loss:0.648 Accuracy:0.88,0.68,0.72,0.80 Learning Rate:0.0003<br>Iter:1560 Loss:0.600 Accuracy:0.84,0.76,0.68,0.84 Learning Rate:0.0003<br>Iter:1580 Loss:0.714 Accuracy:0.88,0.68,0.68,0.76 Learning Rate:0.0003<br>Iter:1600 Loss:0.497 Accuracy:0.96,0.72,0.76,0.84 Learning Rate:0.0003<br>Iter:1620 Loss:0.519 Accuracy:0.88,0.80,0.72,0.84 Learning Rate:0.0003<br>Iter:1640 Loss:0.551 Accuracy:0.92,0.72,0.68,0.92 Learning Rate:0.0003<br>Iter:1660 Loss:0.539 Accuracy:0.92,0.80,0.64,0.88 Learning Rate:0.0003<br>Iter:1680 Loss:0.484 Accuracy:0.92,0.80,0.80,0.76 Learning Rate:0.0003<br>Iter:1700 Loss:0.428 Accuracy:0.96,0.80,0.84,0.88 Learning Rate:0.0003<br>Iter:1720 Loss:0.510 Accuracy:0.92,0.68,0.84,0.80 Learning Rate:0.0003<br>Iter:1740 Loss:0.548 Accuracy:0.88,0.80,0.72,0.80 Learning Rate:0.0003<br>Iter:1760 Loss:0.358 Accuracy:0.92,0.80,0.84,1.00 Learning Rate:0.0003<br>Iter:1780 Loss:0.374 Accuracy:0.92,0.76,0.92,0.84 Learning Rate:0.0003<br>Iter:1800 Loss:0.442 Accuracy:0.88,0.80,0.68,0.88 Learning Rate:0.0003<br>Iter:1820 Loss:0.432 Accuracy:0.96,0.80,0.72,0.88 Learning Rate:0.0003<br>Iter:1840 Loss:0.399 Accuracy:1.00,0.84,0.80,0.76 Learning Rate:0.0003<br>Iter:1860 Loss:0.541 Accuracy:1.00,0.68,0.64,0.88 Learning Rate:0.0003<br>Iter:1880 Loss:0.495 Accuracy:0.92,0.64,0.76,0.80 Learning Rate:0.0003<br>Iter:1900 Loss:0.275 Accuracy:0.88,0.88,0.88,0.88 Learning Rate:0.0003<br>Iter:1920 Loss:0.319 Accuracy:0.96,0.92,0.88,0.80 Learning Rate:0.0003<br>Iter:1940 Loss:0.259 Accuracy:1.00,0.96,0.84,0.92 Learning Rate:0.0003<br>Iter:1960 Loss:0.379 Accuracy:0.96,0.76,0.76,0.84 Learning Rate:0.0003<br>Iter:1980 Loss:0.388 Accuracy:0.92,0.92,0.80,0.84 Learning Rate:0.0003<br>Iter:2000 Loss:0.350 Accuracy:0.96,0.88,0.72,0.96 Learning Rate:0.0001<br>Iter:2020 Loss:0.448 Accuracy:0.96,0.72,0.92,0.84 Learning Rate:0.0001<br>Iter:2040 Loss:0.232 Accuracy:0.96,0.84,0.92,0.92 Learning Rate:0.0001<br>Iter:2060 Loss:0.196 Accuracy:0.92,0.92,0.92,0.84 Learning Rate:0.0001<br>Iter:2080 Loss:0.346 Accuracy:0.96,0.92,0.72,0.84 Learning Rate:0.0001<br>Iter:2100 Loss:0.181 Accuracy:0.96,0.92,0.96,0.96 Learning Rate:0.0001<br>Iter:2120 Loss:0.231 Accuracy:0.96,0.80,0.88,1.00 Learning Rate:0.0001<br>Iter:2140 Loss:0.201 Accuracy:1.00,1.00,0.76,0.92 Learning Rate:0.0001<br>Iter:2160 Loss:0.271 Accuracy:0.96,0.92,0.88,0.92 Learning Rate:0.0001<br>Iter:2180 Loss:0.214 Accuracy:0.96,0.92,0.96,0.92 Learning Rate:0.0001<br>Iter:2200 Loss:0.241 Accuracy:0.96,0.92,1.00,0.88 Learning Rate:0.0001<br>Iter:2220 Loss:0.268 Accuracy:0.92,0.92,0.88,0.92 Learning Rate:0.0001<br>Iter:2240 Loss:0.249 Accuracy:0.92,0.92,0.84,0.96 Learning Rate:0.0001<br>Iter:2260 Loss:0.188 Accuracy:0.96,0.92,0.92,0.92 Learning Rate:0.0001<br>Iter:2280 Loss:0.196 Accuracy:0.96,0.88,0.92,1.00 Learning Rate:0.0001<br>Iter:2300 Loss:0.186 Accuracy:1.00,0.80,0.92,1.00 Learning Rate:0.0001<br>Iter:2320 Loss:0.167 Accuracy:1.00,0.88,0.88,0.96 Learning Rate:0.0001<br>Iter:2340 Loss:0.282 Accuracy:0.96,0.84,0.92,0.92 Learning Rate:0.0001<br>Iter:2360 Loss:0.224 Accuracy:1.00,0.88,0.88,0.96 Learning Rate:0.0001<br>Iter:2380 Loss:0.209 Accuracy:0.92,0.84,0.96,1.00 Learning Rate:0.0001<br>Iter:2400 Loss:0.100 Accuracy:1.00,1.00,0.96,1.00 Learning Rate:0.0001<br>Iter:2420 Loss:0.227 Accuracy:0.96,0.96,0.88,0.84 Learning Rate:0.0001<br>Iter:2440 Loss:0.228 Accuracy:0.96,0.96,0.92,0.88 Learning Rate:0.0001<br>Iter:2460 Loss:0.169 Accuracy:1.00,0.92,0.84,0.96 Learning Rate:0.0001<br>Iter:2480 Loss:0.162 Accuracy:0.96,0.84,1.00,0.96 Learning Rate:0.0001<br>Iter:2500 Loss:0.149 Accuracy:0.96,0.92,0.96,0.88 Learning Rate:0.0001<br>Iter:2520 Loss:0.198 Accuracy:0.96,0.96,0.88,0.92 Learning Rate:0.0001<br>Iter:2540 Loss:0.134 Accuracy:0.96,1.00,0.92,0.96 Learning Rate:0.0001<br>Iter:2560 Loss:0.181 Accuracy:0.96,0.96,0.92,0.92 Learning Rate:0.0001<br>Iter:2580 Loss:0.230 Accuracy:0.96,0.92,0.84,0.88 Learning Rate:0.0001<br>Iter:2600 Loss:0.137 Accuracy:1.00,1.00,0.92,0.92 Learning Rate:0.0001<br>Iter:2620 Loss:0.111 Accuracy:1.00,0.96,1.00,1.00 Learning Rate:0.0001<br>Iter:2640 Loss:0.142 Accuracy:1.00,0.92,0.96,0.92 Learning Rate:0.0001<br>Iter:2660 Loss:0.158 Accuracy:0.96,0.96,0.84,0.96 Learning Rate:0.0001<br>Iter:2680 Loss:0.070 Accuracy:0.96,0.96,0.96,1.00 Learning Rate:0.0001<br>Iter:2700 Loss:0.119 Accuracy:1.00,1.00,0.92,0.96 Learning Rate:0.0001<br>Iter:2720 Loss:0.074 Accuracy:0.96,0.96,0.96,1.00 Learning Rate:0.0001<br>Iter:2740 Loss:0.125 Accuracy:1.00,1.00,1.00,0.92 Learning Rate:0.0001<br>Iter:2760 Loss:0.072 Accuracy:1.00,1.00,0.96,1.00 Learning Rate:0.0001<br>Iter:2780 Loss:0.109 Accuracy:0.96,0.88,0.92,1.00 Learning Rate:0.0001<br>Iter:2800 Loss:0.181 Accuracy:1.00,0.96,0.96,0.92 Learning Rate:0.0001<br>Iter:2820 Loss:0.121 Accuracy:1.00,0.88,1.00,1.00 Learning Rate:0.0001<br>Iter:2840 Loss:0.102 Accuracy:1.00,0.96,0.96,0.96 Learning Rate:0.0001<br>Iter:2860 Loss:0.241 Accuracy:0.92,0.88,0.92,0.84 Learning Rate:0.0001<br>Iter:2880 Loss:0.129 Accuracy:1.00,0.92,0.96,0.92 Learning Rate:0.0001<br>Iter:2900 Loss:0.214 Accuracy:0.96,0.88,0.92,0.88 Learning Rate:0.0001<br>Iter:2920 Loss:0.138 Accuracy:1.00,0.96,0.92,0.96 Learning Rate:0.0001<br>Iter:2940 Loss:0.110 Accuracy:0.92,0.88,1.00,1.00 Learning Rate:0.0001<br>Iter:2960 Loss:0.103 Accuracy:0.96,0.96,0.96,1.00 Learning Rate:0.0001<br>Iter:2980 Loss:0.083 Accuracy:0.96,1.00,0.96,0.96 Learning Rate:0.0001<br>Iter:3000 Loss:0.111 Accuracy:0.96,0.92,0.96,0.92 Learning Rate:0.0000</p><p>经过大约3000次迭代 accuracy 可以达到要求。</p><h3 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h3><p>测试代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证码测试</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> nets <span class="keyword">import</span> nets_factory</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同字符数量</span></span><br><span class="line">CHAR_SET_LEN = <span class="number">10</span></span><br><span class="line"><span class="comment"># 图片高度</span></span><br><span class="line">IMAGE_HEIGHT = <span class="number">60</span></span><br><span class="line"><span class="comment"># 图片宽度</span></span><br><span class="line">IMAGE_WIDTH = <span class="number">160</span></span><br><span class="line"><span class="comment"># 批次</span></span><br><span class="line">BATCH_SIZE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MOD_DIR = <span class="string">"D:/Tensorflow/captcha/model/"</span></span><br><span class="line"><span class="comment"># tfrecord文件存放路径</span></span><br><span class="line">TFRECORD_FILE = <span class="string">"D:/Tensorflow/captcha/validation.tfrecord"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># placeholder</span></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">224</span>,<span class="number">224</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从tfrecord读出数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_and_decode</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># 根据文件名生成一个队列</span></span><br><span class="line">    filename_queue = tf.train.string_input_producer([filename])</span><br><span class="line">    <span class="comment"># create a reader from file queue</span></span><br><span class="line">    reader = tf.TFRecordReader()</span><br><span class="line">    <span class="comment"># reader从文件队列中读入一个序列化的样本,返回文件名和文件</span></span><br><span class="line">    _, serialized_example = reader.read(filename_queue)</span><br><span class="line">    <span class="comment"># get feature from serialized example</span></span><br><span class="line">    <span class="comment"># 解析符号化的样本</span></span><br><span class="line">    features = tf.parse_single_example(</span><br><span class="line">        serialized_example,</span><br><span class="line">        features=&#123;</span><br><span class="line">            <span class="string">'image'</span>: tf.FixedLenFeature([], tf.string),</span><br><span class="line">            <span class="string">'label0'</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">            <span class="string">'label1'</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">            <span class="string">'label2'</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">            <span class="string">'label3'</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">#获取图片数据</span></span><br><span class="line">    image = tf.decode_raw(features[<span class="string">"image"</span>], tf.uint8)</span><br><span class="line">    <span class="comment"># 没有经过预处理的灰度图</span></span><br><span class="line">    image_raw = tf.reshape(image, [<span class="number">224</span>,<span class="number">224</span>])</span><br><span class="line">    <span class="comment">#tf.train.shuffle_batch必须确定shape</span></span><br><span class="line">    image = tf.reshape(image, [<span class="number">224</span>,<span class="number">224</span>])</span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    image = tf.cast(image, tf.float32) /<span class="number">255.0</span></span><br><span class="line">    image = tf.subtract(image,<span class="number">0.5</span>)</span><br><span class="line">    image = tf.multiply(image,<span class="number">2.0</span>)</span><br><span class="line">    <span class="comment"># 获取label</span></span><br><span class="line">    label0 = tf.cast(features[<span class="string">'label0'</span>], tf.int32)</span><br><span class="line">    label1 = tf.cast(features[<span class="string">'label1'</span>], tf.int32)</span><br><span class="line">    label2 = tf.cast(features[<span class="string">'label2'</span>], tf.int32)</span><br><span class="line">    label3 = tf.cast(features[<span class="string">'label3'</span>], tf.int32)</span><br><span class="line">    <span class="keyword">return</span> image, image_raw, label0, label1, label2, label3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片数据和标签</span></span><br><span class="line">image, image_raw, label0, label1, label2, label3 = read_and_decode(TFRECORD_FILE)</span><br><span class="line"><span class="comment"># 使用shuffle_batch可以随机打乱输入 next_batch挨着往下取</span></span><br><span class="line"><span class="comment"># shuffle_batch才能实现[img,label]的同步,也即特征和label的同步,不然可能输入的特征和label不匹配</span></span><br><span class="line"><span class="comment"># 比如只有这样使用,才能使img和label一一对应,每次提取一个image和对应的label</span></span><br><span class="line"><span class="comment"># shuffle_batch返回的值就是RandomShuffleQueue.dequeue_many()的结果</span></span><br><span class="line"><span class="comment"># Shuffle_batch构建了一个RandomShuffleQueue，并不断地把单个的[img,label],送入队列中</span></span><br><span class="line">image_batch, image_raw_batch, label_batch0, label_batch1, label_batch2, label_batch3 = tf.train.shuffle_batch(</span><br><span class="line">                                         [image,image_raw, label0,label1,label2,label3],</span><br><span class="line">                                        batch_size=BATCH_SIZE, capacity=<span class="number">5000</span>,</span><br><span class="line">                                        min_after_dequeue=<span class="number">1000</span>,num_threads=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 定义网络结构</span></span><br><span class="line">train_network_fn = nets_factory.get_network_fn(</span><br><span class="line">    <span class="string">'alexnet_v2'</span>,</span><br><span class="line">    num_classes=CHAR_SET_LEN,</span><br><span class="line">    weight_decay=<span class="number">0.0005</span>,</span><br><span class="line">    is_training=<span class="keyword">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    X = tf.reshape(x,[BATCH_SIZE,<span class="number">224</span>,<span class="number">224</span>,<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 数据输入网络得到输出值</span></span><br><span class="line">    logits0,logits1,logits2,logits3,end_points = train_network_fn(X)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测值</span></span><br><span class="line">    predict0 = tf.reshape(logits0,[<span class="number">-1</span>,CHAR_SET_LEN])</span><br><span class="line">    predict0 = tf.argmax(predict0,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    predict1 = tf.reshape(logits1, [<span class="number">-1</span>, CHAR_SET_LEN])</span><br><span class="line">    predict1 = tf.argmax(predict1, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    predict2 = tf.reshape(logits2, [<span class="number">-1</span>, CHAR_SET_LEN])</span><br><span class="line">    predict2 = tf.argmax(predict2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    predict3 = tf.reshape(logits3, [<span class="number">-1</span>, CHAR_SET_LEN])</span><br><span class="line">    predict3 = tf.argmax(predict3, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="comment">#载入训练好的模型</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    saver.restore(sess, MOD_DIR + <span class="string">"captcha.model-3000"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个协调器，管理线程</span></span><br><span class="line">    coord = tf.train.Coordinator()</span><br><span class="line">    <span class="comment"># 启动队列</span></span><br><span class="line">    threads = tf.train.start_queue_runners(sess=sess,coord=coord)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 获取一个批次的数据和标签</span></span><br><span class="line">        b_image,b_image_raw, b_label0,b_label1,b_label2,b_label3 = sess.run([image_batch,image_raw_batch,</span><br><span class="line">                                                                 label_batch0, label_batch1, label_batch2, label_batch3])</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        img = Image.fromarray(b_image_raw[<span class="number">0</span>], <span class="string">"L"</span>)</span><br><span class="line">        plt.imshow(np.array(img))</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># 打印标签</span></span><br><span class="line">        print(<span class="string">'label:'</span>,b_label0,b_label1,b_label2,b_label3)</span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        label0,label1,label2,label3 = sess.run([predict0,predict1,predict2,predict3],</span><br><span class="line">                                               feed_dict=&#123;x:b_image&#125;)</span><br><span class="line">        <span class="comment"># print</span></span><br><span class="line">        print(<span class="string">'predict:'</span>,label0,label1,label2,label3)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通知其他线程关闭</span></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    <span class="comment"># 其他所有线程关闭之后，这一函数才能返回</span></span><br><span class="line">    coord.join(threads)</span><br></pre></td></tr></table></figure></p><pre><code>INFO:tensorflow:Restoring parameters from D:/Tensorflow/captcha/model/captcha.model-3000</code></pre><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/output_4_1.png" alt="png"></p><p>label: [3] [1] [8] [3]<br>predict: [3] [1] [8] [3]</p><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/output_4_3.png" alt="png"></p><p>label: [8] [1] [1] [7]<br>predict: [8] [1] [1] [7]</p><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/output_4_5.png" alt="png"></p><p>label: [4] [7] [3] [4]<br>predict: [4] [7] [3] [4]</p><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/output_4_7.png" alt="png"></p><p>label: [5] [2] [9] [4]<br>predict: [5] [6] [9] [8]</p><p><img src="/2018/04/26/tensorflow/Tensorflow学习10-2：验证码识别——训练和测试/output_4_9.png" alt="png"></p><p>label: [1] [6] [6] [8]<br>predict: [1] [4] [8] [8]</p><hr><p>总结：<br>如何训练带字母字符的验证码呢？其实很简单，A-Z，一共26个字母，我们可以映射为11~35这26个数字，A：10，B：11，，，Z :35,那么，这种数字+字母的组合一共有10+26=36个字符，同样采用one-hot编码，label是一个36维的向量，只有1个值为1，其余为0，A：000000000010000…..000；</p><h2 id="2-普通的单任务模式"><a href="#2-普通的单任务模式" class="headerlink" title="2 普通的单任务模式"></a>2 普通的单任务模式</h2><h3 id="1）准备工作-1"><a href="#1）准备工作-1" class="headerlink" title="1）准备工作"></a>1）准备工作</h3><p>将net文件夹拷贝到当前目录下，不做改动。</p><h3 id="2）训练-1"><a href="#2）训练-1" class="headerlink" title="2）训练"></a>2）训练</h3><h3 id="3）测试-1"><a href="#3）测试-1" class="headerlink" title="3）测试"></a>3）测试</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;如题，本篇介绍的是tensorflow实现验证码的识别，之前我们已经生成了数据集，并且转换成了tfrecord格式的文件，现在我们开始利用这
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="alexnet" scheme="http://yoursite.com/tags/alexnet/"/>
    
      <category term="slim" scheme="http://yoursite.com/tags/slim/"/>
    
      <category term="Multi-task Learning" scheme="http://yoursite.com/tags/Multi-task-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow学习10-1：验证码识别——生成验证码和tfrecord文件</title>
    <link href="http://yoursite.com/2018/04/25/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A010-1%EF%BC%9A%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%E5%92%8Ctfrecord%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/04/25/tensorflow/Tensorflow学习10-1：验证码识别——生成验证码和tfrecord文件/</id>
    <published>2018-04-24T16:10:27.000Z</published>
    <updated>2018-07-16T06:26:20.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-生成验证码图片"><a href="#1-生成验证码图片" class="headerlink" title="1 生成验证码图片"></a>1 生成验证码图片</h2><p>这些生成的图片位于同一个文件夹下，而且图片名就是 label 值。<br><img src="/2018/04/25/tensorflow/Tensorflow学习10-1：验证码识别——生成验证码和tfrecord文件/2018-07-16-13-46-22.png" alt=""></p><p>生成代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证码生成库</span></span><br><span class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha <span class="comment"># pip install captcha</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">number = [<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line"><span class="comment"># letter = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']</span></span><br><span class="line"><span class="comment"># LETTER = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']</span></span><br><span class="line">CAPTCHA_SAVE_DIR = <span class="string">"D:/Tensorflow/captcha/images/"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''随机生成4个数字的字符串成。</span></span><br><span class="line"><span class="string">char_set：用于生成的字符list</span></span><br><span class="line"><span class="string">captcha_size：生成的验证码位数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_captcha_text</span><span class="params">(char_set=number, captcha_size=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 验证码列表</span></span><br><span class="line">    captcha_text = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(captcha_size):</span><br><span class="line">        <span class="comment">#随机选择</span></span><br><span class="line">        c = random.choice(char_set)</span><br><span class="line">        <span class="comment">#加入验证码列表</span></span><br><span class="line">        captcha_text.append(c)</span><br><span class="line">    <span class="keyword">return</span> captcha_text</span><br><span class="line"></span><br><span class="line"><span class="string">'''生成字符对应的验证码'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_captcha_text_and_iamge</span><span class="params">()</span>:</span></span><br><span class="line">    image = ImageCaptcha()</span><br><span class="line">    <span class="comment">#获得随机生成的验证码</span></span><br><span class="line">    captcha_text = random_captcha_text()</span><br><span class="line">    <span class="comment">#把验证码列表转为字符串</span></span><br><span class="line">    captcha_text = <span class="string">""</span>.join(captcha_text)</span><br><span class="line">    <span class="comment">#生成验证码</span></span><br><span class="line">    captcha = image.generate(captcha_text)</span><br><span class="line">    image.write(captcha_text, CAPTCHA_SAVE_DIR + captcha_text + <span class="string">".jpg"</span>) <span class="comment">#写到文件</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#循环生成10000次，但是重复的会被覆盖，所以&lt;10000</span></span><br><span class="line">num = <span class="number">10000</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        gen_captcha_text_and_iamge()</span><br><span class="line">        sys.stdout.write(<span class="string">"\r&gt;&gt; Creating image %d/%d"</span> % (i+<span class="number">1</span>, num))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Generate finished."</span>)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Creating image 10000/10000<br>Generate finished.</p></blockquote></blockquote><h2 id="2-将这些图片转为tfrecord文件"><a href="#2-将这些图片转为tfrecord文件" class="headerlink" title="2 将这些图片转为tfrecord文件"></a>2 将这些图片转为tfrecord文件</h2><p>我们生成tfrecord文件用于验证码识别程序的训练和测试，生成好后会产生2个.tfrecord文件<br><img src="/2018/04/25/tensorflow/Tensorflow学习10-1：验证码识别——生成验证码和tfrecord文件/2018-07-16-13-47-48.png" alt=""></p><p>生成tfrecord代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">-<span class="comment"># image_to_tfrecord_by_filename.py——把验证码转换成tfrecord文件</span></span><br><span class="line"><span class="comment">#tfrecord文件，底层就是protobuf格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证集数量</span></span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">"num_validation"</span>, <span class="number">500</span>, </span><br><span class="line">    <span class="string">"the divisiory number of validation data"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机种子</span></span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">"random_seed"</span>, <span class="number">7</span>, </span><br><span class="line">    <span class="string">"random seed"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片目录</span></span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">"dataset_dir"</span>, <span class="string">"D:/Tensorflow/captcha/images/"</span>, </span><br><span class="line">    <span class="string">"dir of images and save position"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#保存tfrecord目录</span></span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">"tfrecord_dir"</span>, <span class="string">"D:/Tensorflow/captcha/"</span>, </span><br><span class="line">    <span class="string">"dir of tfrecord"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断tfrecord文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_dataset_exists</span><span class="params">(dataset_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> split_name <span class="keyword">in</span> [<span class="string">"train"</span>, <span class="string">"validation"</span>]:</span><br><span class="line">        output_filename = os.path.join(dataset_dir, split_name + <span class="string">".tfrecord"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tf.gfile.Exists(output_filename):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取总图片文件夹下的 所有图片文件名以及分类（子文件夹名）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_filenames_and_classes</span><span class="params">(dataset_dir)</span>:</span></span><br><span class="line">    photo_filenames = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(dataset_dir):</span><br><span class="line">        <span class="comment">#合并文件路径</span></span><br><span class="line">        path = os.path.join(dataset_dir, filename)</span><br><span class="line">        photo_filenames.append(path) </span><br><span class="line">    <span class="keyword">return</span> photo_filenames</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int64_feature</span><span class="params">(values)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(values, (tuple, list)):</span><br><span class="line">        values = [values]</span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(int64_list=tf.train.Int64List(value=values))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_feature</span><span class="params">(values)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(bytes_list=tf.train.BytesList(value=[values]))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_to_tfexample</span><span class="params">(image_data, label0, label1, label2, label3)</span>:</span></span><br><span class="line">    <span class="comment">#Abstract base class for protocol message</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">        <span class="string">"image"</span>: bytes_feature(image_data),</span><br><span class="line">        <span class="string">"label0"</span>: int64_feature(label0),</span><br><span class="line">        <span class="string">"label1"</span>: int64_feature(label1),</span><br><span class="line">        <span class="string">"label2"</span>: int64_feature(label2),</span><br><span class="line">        <span class="string">"label3"</span>: int64_feature(label3),</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#把数据转为tfrecord格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_dataset</span><span class="params">(split_name, filenames, dataset_dir)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> split_name <span class="keyword">in</span> [<span class="string">"train"</span>, <span class="string">"validation"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment">#定义tfrecord文件路径</span></span><br><span class="line">        output_filename = os.path.join(FLAGS.tfrecord_dir, split_name + <span class="string">".tfrecord"</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.python_io.TFRecordWriter(output_filename) <span class="keyword">as</span> tfrecord_writer:</span><br><span class="line">            <span class="keyword">for</span> i, filename <span class="keyword">in</span> enumerate(filenames):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sys.stdout.write(<span class="string">"\r&gt;&gt; Converting image(%s) %d/%d"</span> % (split_name, i+<span class="number">1</span>, len(filenames)))</span><br><span class="line">                    sys.stdout.flush()</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">#读取图片</span></span><br><span class="line">                    image_data = Image.open(filename)</span><br><span class="line">                    <span class="comment">#根据模型的结构resize</span></span><br><span class="line">                    image_data = image_data.resize((<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">                    <span class="comment">#灰度化</span></span><br><span class="line">                    image_data = np.array(image_data.convert(<span class="string">"L"</span>))</span><br><span class="line">                    <span class="comment">#将图片转化为bytes</span></span><br><span class="line">                    image_data = image_data.tobytes()</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">#获取label</span></span><br><span class="line">                    labels = filename.split(<span class="string">"/"</span>)[<span class="number">-1</span>][<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">                    num_labels = []</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        num_labels.append(int(labels[j]))</span><br><span class="line"></span><br><span class="line">                    <span class="comment">#生成tfrecord文件</span></span><br><span class="line">                    example = image_to_tfexample(image_data, num_labels[<span class="number">0</span>], num_labels[<span class="number">1</span>], num_labels[<span class="number">2</span>], num_labels[<span class="number">3</span>])</span><br><span class="line">                    tfrecord_writer.write(example.SerializeToString())</span><br><span class="line">                <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">"Could not read:"</span>, filenames[i])</span><br><span class="line">                    print(<span class="string">"Error:"</span>,e)</span><br><span class="line">                    print(<span class="string">"Skip the pic.\n"</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    <span class="comment">#判断tfrecord文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> _dataset_exists(FLAGS.tfrecord_dir):</span><br><span class="line">        print(<span class="string">"tfrecord文件已存在"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#获得所有图片以及分类</span></span><br><span class="line">        photo_filenames = _get_filenames_and_classes(FLAGS.dataset_dir)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#数据切分为训练集和测试集</span></span><br><span class="line">        random.seed(FLAGS.random_seed)</span><br><span class="line">        random.shuffle(photo_filenames)</span><br><span class="line">        training_filenames = photo_filenames[FLAGS.num_validation:] <span class="comment">#500之后的图片作为训练</span></span><br><span class="line">        validation_filenames = photo_filenames[:FLAGS.num_validation] <span class="comment">#0-500的图片作为训练</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#数据转换</span></span><br><span class="line">        _convert_dataset(<span class="string">"train"</span>, training_filenames, FLAGS.dataset_dir)</span><br><span class="line">        _convert_dataset(<span class="string">"validation"</span>, validation_filenames, FLAGS.dataset_dir)</span><br><span class="line">        print(<span class="string">"finished."</span>)</span><br><span class="line">                            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>Converting image(train) 5858/5858<br>Converting image(validation) 500/500<br>finished.</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-生成验证码图片&quot;&gt;&lt;a href=&quot;#1-生成验证码图片&quot; class=&quot;headerlink&quot; title=&quot;1 生成验证码图片&quot;&gt;&lt;/a&gt;1 生成验证码图片&lt;/h2&gt;&lt;p&gt;这些生成的图片位于同一个文件夹下，而且图片名就是 label 值。&lt;br&gt;&lt;img 
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="alexnet" scheme="http://yoursite.com/tags/alexnet/"/>
    
      <category term="slim" scheme="http://yoursite.com/tags/slim/"/>
    
      <category term="tfrecord" scheme="http://yoursite.com/tags/tfrecord/"/>
    
  </entry>
  
  <entry>
    <title>anaconda安装命令整理</title>
    <link href="http://yoursite.com/2018/04/25/install%20and%20config/anaconda%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/25/install and config/anaconda安装命令整理/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-07-18T10:11:43.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看库版本"><a href="#查看库版本" class="headerlink" title="查看库版本"></a>查看库版本</h2><p>anaconda 查看版本号，以tensorflow为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list tensorflow</span><br></pre></td></tr></table></figure><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><p>设置用清华镜像安装（如果需要）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure></p><h3 id="1-Tensorflow-安装（以windows版本为例）"><a href="#1-Tensorflow-安装（以windows版本为例）" class="headerlink" title="1 Tensorflow 安装（以windows版本为例）"></a>1 Tensorflow 安装（以windows版本为例）</h3><p>S1. 查找所有Tensorflow版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda search -t conda tensorflow</span><br></pre></td></tr></table></figure></p><p>找到windows版本<br><img src="/2018/04/25/install and config/anaconda安装命令整理/2018-04-25-14-17-21.png" alt=""><br>S2. 显示该版本的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda show dhirschfeld/tensorflow</span><br></pre></td></tr></table></figure></p><p>S3. 使用所提示的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --channel https://conda.anaconda.org/dhirschfeld tensorflow</span><br></pre></td></tr></table></figure></p><h3 id="2-tflearn-安装（以windows版本为例）"><a href="#2-tflearn-安装（以windows版本为例）" class="headerlink" title="2 tflearn 安装（以windows版本为例）"></a>2 tflearn 安装（以windows版本为例）</h3><p>用<code>pip install tflearn</code>命令安装tflearn后，运行下面代码，如果出现警告<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division, print_function, absolute_import  </span><br><span class="line"><span class="keyword">import</span> tflearn</span><br></pre></td></tr></table></figure></p><p>“curses is not supported on this machine (please install/reinstall curses for an optimal experience”</p><p>使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search curses</span><br></pre></td></tr></table></figure></p><p>再执行下面命令以安装windows版本的curses<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install windows-curses</span><br></pre></td></tr></table></figure></p><h2 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall xxx</span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda uninstall xxx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看库版本&quot;&gt;&lt;a href=&quot;#查看库版本&quot; class=&quot;headerlink&quot; title=&quot;查看库版本&quot;&gt;&lt;/a&gt;查看库版本&lt;/h2&gt;&lt;p&gt;anaconda 查看版本号，以tensorflow为例&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="install and config" scheme="http://yoursite.com/categories/install-and-config/"/>
    
    
      <category term="anaconda" scheme="http://yoursite.com/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>jupyter设置</title>
    <link href="http://yoursite.com/2018/04/25/install%20and%20config/jupyter%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/25/install and config/jupyter设置/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-07-18T05:40:05.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更改默认启动目录"><a href="#更改默认启动目录" class="headerlink" title="更改默认启动目录"></a>更改默认启动目录</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>右键jupyter notebook快捷方式属性，把“目标”属性最后的变量改为自己的路径，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\\Users\\lenovo\\Desktop\\Python WORK SPACE\\&quot;</span><br></pre></td></tr></table></figure></p><p>注意前面一个空格要保留</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><img src="/2018/04/25/install and config/jupyter设置/2018-07-18-13-39-12.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;更改默认启动目录&quot;&gt;&lt;a href=&quot;#更改默认启动目录&quot; class=&quot;headerlink&quot; title=&quot;更改默认启动目录&quot;&gt;&lt;/a&gt;更改默认启动目录&lt;/h2&gt;&lt;h3 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="install and config" scheme="http://yoursite.com/categories/install-and-config/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet</title>
    <link href="http://yoursite.com/2018/04/24/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A09-5%EF%BC%9A%E8%B0%B7%E6%AD%8Cinception-v3%E6%A8%A1%E5%9E%8B%E4%B9%8Bfine-tune%20slim%20alexnet/"/>
    <id>http://yoursite.com/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/</id>
    <published>2018-04-23T16:10:27.000Z</published>
    <updated>2018-09-14T13:57:00.682Z</updated>
    
    <content type="html"><![CDATA[<p>进行 fine-tune 操作需要微调训练所有层，所以迭代训练次数比较多。</p><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1 数据准备"></a>1 数据准备</h2><p>准备好tfrecord格式的图片数据文件，和labels.txt。可以参考上篇。</p><h2 id="2-定义新的dataset文件"><a href="#2-定义新的dataset文件" class="headerlink" title="2 定义新的dataset文件"></a>2 定义新的dataset文件</h2><p>首先，在dataset/目录下新建一个文件夹 satellite.py，并将flowers.py文件夹中的内容复制到 satellite.py 中，接下来需要修改以下几处内容。</p><p>第一处修改，<br><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-09-18-44-03.png" alt=""></p><p>第二处修改修改为image/format部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'image/format'</span>: tf.FixedLenFeature((), tf.string, default_value=<span class="string">'jpg'</span>),</span><br></pre></td></tr></table></figure></p><p>修改完 satellite.py后，还需要在同目录的dataset_factory.py文件夹中注册satellite数据库。红色框内为新增加的satellite数据<br><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-09-18-47-23.png" alt=""></p><h2 id="3-下载训练好的inception-v3模型"><a href="#3-下载训练好的inception-v3模型" class="headerlink" title="3 下载训练好的inception-v3模型"></a>3 下载训练好的inception-v3模型</h2><p>在<a href="http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz" target="_blank" rel="noopener">http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz</a> 下载并解压后，会得到一个inception_v3.ckpt 文件</p><h2 id="4-开始训练"><a href="#4-开始训练" class="headerlink" title="4 开始训练"></a>4 开始训练</h2><p>在slim文件夹下运行下面脚本开始训练：<br>（★注意：如果softmax报错，修改文件<code>D:\Anaconda3\Lib\site-packages\tensorflow\python\framework\ops.py</code>第3385行，在函数 create_op() 内新增一行<code>with tf.device(&#39;/cpu:0&#39;):</code></p><p><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-16-13-50-37.png" alt=""><br>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">python train_image_classifier.py ^</span><br><span class="line">--train_dir=model2:训练好的模型存放目录 ^</span><br><span class="line">--dataset_name=satellite :用于读取tfrecord数据集的python文件 ^</span><br><span class="line">--dataset_split_name=train :这里使用切分的训练集 ^</span><br><span class="line">--dataset_dir=images2 :tfrecord文件目录 ^</span><br><span class="line">--batch_size=5 :GPU内存小的建议不要改大，否则报错 ^</span><br><span class="line">--max_number_of_steps=1000 :训练次数 ^</span><br><span class="line">--model_name=inception_v3 :训练模型 ^</span><br><span class="line">--checkpoint_path=D:/Tensorflow/models/inception2016/inception_v3.ckpt :fine-tune专用^</span><br><span class="line">--checkpoint_exclude_scopes=InceptionV3/Logits,InceptionV3/AuxLogits :fine-tune专用^</span><br><span class="line">--trainable_scopes=InceptionV3/Logits,InceptionV3/AuxLogits :fine-tune专用^</span><br><span class="line">--learning_rate=0.001  ^</span><br><span class="line">--learning_rate_decay_type=fixed  ^</span><br><span class="line">--save_interval_secs=300  ^</span><br><span class="line">--save_summaries_secs=2  ^</span><br><span class="line">--log_every_n_steps=10  ^</span><br><span class="line">--optimizer=rmsprop  ^</span><br><span class="line">--weight_decay=0.00004  ^</span><br><span class="line">--clone_on_cpu=false   :可以设置为true指定CPU执行</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>如图，一般训练10000步左右可以达到准确率要求，ctrl+c 停止脚本程序<br><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-09-20-10-03.png" alt=""></p><h2 id="5-验证模型准确率"><a href="#5-验证模型准确率" class="headerlink" title="5 验证模型准确率"></a>5 验证模型准确率</h2><p>可以用eval_image_classifier.py程序进行验证，在slim文件夹下运行以下脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python test_image_classifier.py ^</span><br><span class="line">--checkpoint_path=model2 ^</span><br><span class="line">--eval_dir=validation_result ^</span><br><span class="line">--dataset_name=satellite ^</span><br><span class="line">--dataset_split_name=validation ^</span><br><span class="line">--dataset_dir=images2 ^</span><br><span class="line">--model_name=inception_v3</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>得到训练后模型的accuracy结果：</p><p><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-09-20-14-09.png" alt=""></p><h2 id="6-导出模型，并对单张图片进行识别"><a href="#6-导出模型，并对单张图片进行识别" class="headerlink" title="6 导出模型，并对单张图片进行识别"></a>6 导出模型，并对单张图片进行识别</h2><h3 id="STEP-1-导出网络结构"><a href="#STEP-1-导出网络结构" class="headerlink" title="STEP 1:导出网络结构"></a>STEP 1:导出网络结构</h3><p>在slim文件夹下运行以下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python export_inference_graph.py ^</span><br><span class="line">--alsologtostderr ^</span><br><span class="line">--model_name=inception_v3 ^</span><br><span class="line">--output_file=model2/inception_v3_inf_graph.pb ^</span><br><span class="line">--dataset_name=satellite</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>这个命令会在 model2 文件夹下生成一个inception_v3_inf_graph.pb文件。（注：inception_v3_inf_graph.pb文件夹只保存了inception_v3的网络结构并不包含训练得到的模型。</p><h3 id="STEP-2-生成完整的-pd-模型文件"><a href="#STEP-2-生成完整的-pd-模型文件" class="headerlink" title="STEP 2:生成完整的 .pd 模型文件"></a>STEP 2:生成完整的 .pd 模型文件</h3><p>运行下面脚本，将checkpoint中的模型参数保存进来，转换成完整的模型文件。（需将8100改成model文件夹中保存的实际的模型训练步数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python freeze_graph.py ^</span><br><span class="line">--input_graph=model2/inception_v3_inf_graph.pb ^</span><br><span class="line">--input_checkpoint=model2/model.ckpt-8100 ^</span><br><span class="line">--input_binary=true ^</span><br><span class="line">--output_node_names=InceptionV3/Predictions/Reshape_1 ^</span><br><span class="line">--output_graph=model2/frozen_graph.pb</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><h3 id="STEP-3-运行导出模型分类单张图片"><a href="#STEP-3-运行导出模型分类单张图片" class="headerlink" title="STEP 3:运行导出模型分类单张图片"></a>STEP 3:运行导出模型分类单张图片</h3><p>运行下面脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python test_image_classifier.py ^</span><br><span class="line">--model_path model2/frozen_graph.pb ^</span><br><span class="line">--label_path images2/labels.txt ^</span><br><span class="line">--image_file test_images/water.jpg</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>分类结果如下：</p><p><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-09-20-24-10.png" alt=""></p><hr><p>总结：<br>脚本的运行顺序如图编号所示<br><img src="/2018/04/24/tensorflow/Tensorflow学习9-5：谷歌inception-v3模型之fine-tune slim alexnet/2018-07-15-19-31-55.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行 fine-tune 操作需要微调训练所有层，所以迭代训练次数比较多。&lt;/p&gt;
&lt;h2 id=&quot;1-数据准备&quot;&gt;&lt;a href=&quot;#1-数据准备&quot; class=&quot;headerlink&quot; title=&quot;1 数据准备&quot;&gt;&lt;/a&gt;1 数据准备&lt;/h2&gt;&lt;p&gt;准备好tfreco
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="fine-tune" scheme="http://yoursite.com/tags/fine-tune/"/>
    
      <category term="slim" scheme="http://yoursite.com/tags/slim/"/>
    
      <category term="inception-v3" scheme="http://yoursite.com/tags/inception-v3/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2018/04/24/hexo/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/24/hexo/markdown语法/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-04-24T15:35:19.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><p>空格：输入法全角状态下space</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;markdown语法&quot;&gt;&lt;a href=&quot;#markdown语法&quot; class=&quot;headerlink&quot; title=&quot;markdown语法&quot;&gt;&lt;/a&gt;markdown语法&lt;/h2&gt;&lt;p&gt;空格：输入法全角状态下space&lt;/p&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow学习9-4：谷歌inception-v3模型 之 生成tfrecord文件</title>
    <link href="http://yoursite.com/2018/04/23/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A09-4%EF%BC%9A%E8%B0%B7%E6%AD%8Cinception-v3%E6%A8%A1%E5%9E%8B%E4%B9%8B%E7%94%9F%E6%88%90tfrecord%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/04/23/tensorflow/Tensorflow学习9-4：谷歌inception-v3模型之生成tfrecord文件/</id>
    <published>2018-04-22T16:10:27.000Z</published>
    <updated>2018-09-14T10:45:14.052Z</updated>
    
    <content type="html"><![CDATA[<p>生成tfrecord文件，用于从零训练自己的模型或者fine-tune微调训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tfrecord文件，底层就是protobuf格式</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证集数量</span></span><br><span class="line">_NUM_VALID = <span class="number">1000</span></span><br><span class="line"><span class="comment">#随机种子</span></span><br><span class="line">_RANDOM_SEED = <span class="number">7</span></span><br><span class="line"><span class="comment">#数据块</span></span><br><span class="line">_NUM_SHARDS = <span class="number">2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">DATASET_DIR = <span class="string">"D:/Tensorflow/slim/images2/"</span></span><br><span class="line"><span class="comment">#标签文件名</span></span><br><span class="line">LABELS_FILENAME = <span class="string">"D:/Tensorflow/slim/images2/labels.txt"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义tfrecord文件的路径+名字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_dataset_filename</span><span class="params">(dataset_dir, split_name, shard_id)</span>:</span></span><br><span class="line">    output_filename = <span class="string">"image_%s_%05d-of-%05d.tfrecord"</span> % (split_name, shard_id, _NUM_SHARDS)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(dataset_dir, output_filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断tfrecord文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_dataset_exists</span><span class="params">(dataset_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> split_name <span class="keyword">in</span> [<span class="string">"train"</span>, <span class="string">"validation"</span>]:</span><br><span class="line">        <span class="keyword">for</span> shard_id <span class="keyword">in</span> range(_NUM_SHARDS):</span><br><span class="line">            output_filename = _get_dataset_filename(dataset_dir, split_name, shard_id)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tf.gfile.Exists(output_filename):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取总图片文件夹下的 所有图片文件名以及分类（子文件夹名）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_filenames_and_classes</span><span class="params">(dataset_dir)</span>:</span></span><br><span class="line">    <span class="comment">#数据目录</span></span><br><span class="line">    directories = []</span><br><span class="line">    <span class="comment">#分类名称</span></span><br><span class="line">    class_names = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(dataset_dir):</span><br><span class="line">        <span class="comment">#合并文件路径</span></span><br><span class="line">        path = os.path.join(dataset_dir, filename)</span><br><span class="line">        <span class="comment">#判断该路径是否为目录</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">            <span class="comment">#加入数据目录</span></span><br><span class="line">            directories.append(path)</span><br><span class="line">            <span class="comment">#加入类别名称</span></span><br><span class="line">            class_names.append(filename)</span><br><span class="line">            </span><br><span class="line">    photo_filenames = []</span><br><span class="line">    <span class="comment">#循环每个分类的文件夹</span></span><br><span class="line">    <span class="keyword">for</span> directory <span class="keyword">in</span> directories:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(directory):</span><br><span class="line">            path = os.path.join(directory, filename)</span><br><span class="line">            <span class="comment">#把图片加入图片列表</span></span><br><span class="line">            photo_filenames.append(path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> photo_filenames, class_names</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int64_feature</span><span class="params">(values)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(values, (tuple, list)):</span><br><span class="line">        values = [values]</span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(int64_list=tf.train.Int64List(value=values))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_feature</span><span class="params">(values)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Feature(bytes_list=tf.train.BytesList(value=[values]))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_to_tfexample</span><span class="params">(image_data, image_format, class_id)</span>:</span></span><br><span class="line">    <span class="comment">#Abstract base class for protocol message</span></span><br><span class="line">    <span class="keyword">return</span> tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">        <span class="string">"image/encoded"</span>: bytes_feature(image_data),</span><br><span class="line">        <span class="string">"image/format"</span>: bytes_feature(image_format),</span><br><span class="line">        <span class="string">"image/class/label"</span>: int64_feature(class_id),</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_label_file</span><span class="params">(labels_to_class_names, dataset_dir, filename=LABELS_FILENAME)</span>:</span></span><br><span class="line">    labels_filename = os.path.join(dataset_dir, filename)</span><br><span class="line">    <span class="keyword">with</span> tf.gfile.Open(labels_filename, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labels_to_class_names:</span><br><span class="line">            class_name = labels_to_class_names[label]</span><br><span class="line">            f.write(<span class="string">"%d:%s\n"</span> % (label, class_name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#把数据转为tfrecord格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_dataset</span><span class="params">(split_name, filenames, class_names_to_ids, dataset_dir)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> split_name <span class="keyword">in</span> [<span class="string">"train"</span>, <span class="string">"validation"</span>]</span><br><span class="line">    <span class="comment">#切分数据块维多个tfrecord文件，计算每个数据块有多少</span></span><br><span class="line">    num_per_shard = int(len(filenames) / _NUM_SHARDS)</span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            <span class="keyword">for</span> shard_id <span class="keyword">in</span> range(_NUM_SHARDS):</span><br><span class="line">                <span class="comment">#定义tfrecord文件路径</span></span><br><span class="line">                output_filename = _get_dataset_filename(dataset_dir, split_name, shard_id)</span><br><span class="line">                <span class="keyword">with</span> tf.python_io.TFRecordWriter(output_filename) <span class="keyword">as</span> tfrecord_writer:</span><br><span class="line">                    <span class="comment">#每一个数据块开始的位置</span></span><br><span class="line">                    start_ndx = shard_id * num_per_shard</span><br><span class="line">                    <span class="comment">#每一个数据块最后的位置</span></span><br><span class="line">                    end_ndx = min((shard_id+<span class="number">1</span>) * num_per_shard, len(filenames))</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(start_ndx, end_ndx):</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            sys.stdout.write(<span class="string">"\r&gt;&gt; Converting image(%s) %d/%d shard %d"</span> % (split_name, i+<span class="number">1</span>, len(filenames), shard_id))</span><br><span class="line">                            sys.stdout.flush()</span><br><span class="line">                            <span class="comment">#读取图片</span></span><br><span class="line">                            image_data = tf.gfile.FastGFile(filenames[i], <span class="string">"rb"</span>).read()</span><br><span class="line">                            <span class="comment">#获得图片的类别名称</span></span><br><span class="line">                            class_name = os.path.basename(os.path.dirname(filenames[i]))</span><br><span class="line">                            <span class="comment">#找到类别名称对应的ID</span></span><br><span class="line">                            class_id = class_names_to_ids[class_name]</span><br><span class="line">                            <span class="comment">#生成tfrecord文件</span></span><br><span class="line">                            example = image_to_tfexample(image_data, <span class="string">b"jpg"</span>, class_id)</span><br><span class="line">                            tfrecord_writer.write(example.SerializeToString())</span><br><span class="line">                        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">                            print(<span class="string">"Could not read:"</span>, filenames[i])</span><br><span class="line">                            print(<span class="string">"Error:"</span>,e)</span><br><span class="line">                            print(<span class="string">"Skip the pic.\n"</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">                            </span><br><span class="line">                            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#判断tfrecord文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> _dataset_exists(DATASET_DIR):</span><br><span class="line">        print(<span class="string">"tfrecord文件已存在"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#获得所有图片以及分类</span></span><br><span class="line">        photo_filenames, class_names = _get_filenames_and_classes(DATASET_DIR)</span><br><span class="line">        <span class="comment">#吧分类转为字典格式，类似于&#123;"house": 3, "flower": 1&#125;</span></span><br><span class="line">        class_names_to_ids = dict(zip(class_names, range(len(class_names))))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#数据切分为训练集和测试集</span></span><br><span class="line">        random.seed(_RANDOM_SEED)</span><br><span class="line">        random.shuffle(photo_filenames)</span><br><span class="line">        training_filenames = photo_filenames[_NUM_VALID:] <span class="comment">#500之后的图片作为训练</span></span><br><span class="line">        validation_filenames = photo_filenames[:_NUM_VALID] <span class="comment">#0-500的图片作为训练</span></span><br><span class="line"><span class="comment">#         for var in training_filenames:</span></span><br><span class="line"><span class="comment">#             print("training_filenames: ", os.path.basename(var))</span></span><br><span class="line"><span class="comment">#         for var in validation_filenames:</span></span><br><span class="line"><span class="comment">#             print("validation_filenames: ", os.path.basename(var))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#数据转换</span></span><br><span class="line">        _convert_dataset(<span class="string">"train"</span>, training_filenames, class_names_to_ids, DATASET_DIR)</span><br><span class="line">        _convert_dataset(<span class="string">"validation"</span>, validation_filenames, class_names_to_ids, DATASET_DIR)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#输出labels文件</span></span><br><span class="line">        labels_to_class_names = dict(zip(range(len(class_names)), class_names))</span><br><span class="line">        write_label_file(labels_to_class_names, DATASET_DIR)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Converting image(train) 3800/3800 shard 1<br>Converting image(validation) 1000/1000 shard 1</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生成tfrecord文件，用于从零训练自己的模型或者fine-tune微调训练。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="slim" scheme="http://yoursite.com/tags/slim/"/>
    
      <category term="tfrecord" scheme="http://yoursite.com/tags/tfrecord/"/>
    
      <category term="inception-v3" scheme="http://yoursite.com/tags/inception-v3/"/>
    
  </entry>
  
  <entry>
    <title>2模型评估与选择</title>
    <link href="http://yoursite.com/2018/04/21/machine_learning_theory/2%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2018/04/21/machine_learning_theory/2模型评估与选择/</id>
    <published>2018-04-21T04:49:42.000Z</published>
    <updated>2018-05-04T07:56:59.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><h3 id="二分类任务的-混淆矩阵-和-其衍生的度量指标"><a href="#二分类任务的-混淆矩阵-和-其衍生的度量指标" class="headerlink" title="二分类任务的 混淆矩阵 和 其衍生的度量指标"></a>二分类任务的 混淆矩阵 和 其衍生的度量指标</h3><p><img src="/2018/04/21/machine_learning_theory/2模型评估与选择/2018-05-04-14-38-40.png" alt=""></p><p>True Positive  （真正, TP） 被模型预测为正样本，是真的判断正确。所以就是正样本，也称作正的数。</p><p>True Negative（真负 , TN）被模型判断为负样本，是真的判断正确。所以就是负样本，也称作负的数。</p><p>False Positive  （假正, FP）被模型判断为正样本，是假的判断错误。所以应该是负样本，也称作误报数。</p><p>False Negative（假负 , FN）被模型判断为负样本，是假的判断错误。所以应该是正样本，也称作漏报数。</p><h4 id="1）常用的3个指标（多用于交叉验证）"><a href="#1）常用的3个指标（多用于交叉验证）" class="headerlink" title="1）常用的3个指标（多用于交叉验证）"></a>1）常用的3个指标（多用于交叉验证）</h4><ul><li>accuracy（准确率）——检验模型预测的正确率<script type="math/tex; mode=display">A=\frac {TP+TN}{ALL}</script></li></ul><p>预测正确个数/全部样本数</p><ul><li>precision（精确率）——检验模型预测正例的正确率<script type="math/tex; mode=display">P=\frac {TP}{TP+FP}</script></li></ul><p>预测正确的正样本数 / 预测为的正样本数</p><ul><li>recall/TPR（召回率/真正率）——检验模型正例预测的全面性<script type="math/tex; mode=display">R\ /\ TPR=\frac {TP}{TP+FN}</script></li></ul><p>预测正确的正样本数 / 真实的正样本数</p><h4 id="2）不常用的3个指标（多用于绘图）"><a href="#2）不常用的3个指标（多用于绘图）" class="headerlink" title="2）不常用的3个指标（多用于绘图）"></a>2）不常用的3个指标（多用于绘图）</h4><ul><li>specificity（特异性/真负率）——检验模型负例预测的正确率<script type="math/tex; mode=display">S=\frac {TN}{TN+FP}</script></li></ul><p>预测正确的负样本数 / 真实的负样本数</p><ul><li>FPR（假正率）——用于和TPR一起绘制ROC曲线<script type="math/tex; mode=display">FPR=\frac {FP}{TN+FP}</script></li></ul><p>预测错误的正样本数 / 真实的负样本数</p><ul><li>FNR（假负率）——用的少 <script type="math/tex; mode=display">FNR=\frac {FN}{TP+FN}</script></li></ul><p>预测错误的负样本数 / 真实的正样本数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性能度量&quot;&gt;&lt;a href=&quot;#性能度量&quot; class=&quot;headerlink&quot; title=&quot;性能度量&quot;&gt;&lt;/a&gt;性能度量&lt;/h2&gt;&lt;h3 id=&quot;二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;&gt;&lt;a href=&quot;#二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain</title>
    <link href="http://yoursite.com/2018/04/21/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A09-3%EF%BC%9A%E8%B0%B7%E6%AD%8Cinception-v3%E6%A8%A1%E5%9E%8B%E4%B9%8Btransfer%20learning%20retrain/"/>
    <id>http://yoursite.com/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/</id>
    <published>2018-04-20T16:10:27.000Z</published>
    <updated>2018-09-14T14:19:19.512Z</updated>
    
    <content type="html"><![CDATA[<p>因为是 transfer learning 操作，所以直到网络的bottleneck部分之前都不需要改变参数和训练。只需要传入图片数据到网络中计算得到结果。再拿到这个结果到后面的全连接层进行训练。</p><p>所以训练的内容不多，迭代200次左右就可以达到要求。</p><h2 id="1-准备模型文件"><a href="#1-准备模型文件" class="headerlink" title="1 准备模型文件"></a>1 准备模型文件</h2><p>.pb模型文件下载地址：<br><a href="http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz" target="_blank" rel="noopener">http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz</a></p><p>解压后得到如下内容：<br><img src="/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/2018-07-16-00-39-05.png" alt=""></p><h2 id="2-准备retrain训练工程目录"><a href="#2-准备retrain训练工程目录" class="headerlink" title="2 准备retrain训练工程目录"></a>2 准备retrain训练工程目录</h2><p>1、在D:/Tensorflow目录下新建retrain文件夹。<br>在里面新建以下文件夹：<br>bottleneck：存放瓶颈部分输出的数据，用于全连接层的训练<br>data<br> └ train：存放用于训练的用文件夹分类好的图片<br>images：存放用于测试的单个图片</p><p>2、把image_retraining中的retrain.py文件拖过来（注意：这个文件不能用最新版的）</p><p>3、新建retrain.bat文件，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python retrain.py ^</span><br><span class="line">--bottleneck_dir bottleneck ^</span><br><span class="line">--how_many_training_steps 100 ^</span><br><span class="line">--model_dir D:/Tensorflow/models/inception/ ^</span><br><span class="line">--output_graph output_graph.pb ^</span><br><span class="line">--output_labels output_labels.txt ^</span><br><span class="line">--image_dir data/train/ </span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>文件架构如下图：<br><img src="/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/2018-07-16-00-42-58.png" alt=""></p><h2 id="3-执行retrain-bat脚本，进行transfer-learning"><a href="#3-执行retrain-bat脚本，进行transfer-learning" class="headerlink" title="3 执行retrain.bat脚本，进行transfer learning"></a>3 执行retrain.bat脚本，进行transfer learning</h2><p><img src="/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/2018-07-16-07-41-18.png" alt=""></p><p>跌倒200次训练完成后，会在当前目录生成<code>output_graph.pb</code>和<code>output_labels.txt</code>两个文件，至此训练完成。可以用这个pb模型文件来测试分类了。</p><h2 id="4-测试分类效果"><a href="#4-测试分类效果" class="headerlink" title="4 测试分类效果"></a>4 测试分类效果</h2><p>自己写一个测试代码，用自己的图片测试下分类效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">TEST_IMG_DIR = <span class="string">"D:/Tensorflow/Test Images/"</span></span><br><span class="line">RETRAIN_DIR = <span class="string">"D:/Tensorflow/retrain/"</span> <span class="comment">#模型存放目录</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">lines = tf.gfile.GFile(RETRAIN_DIR + <span class="string">"output_labels.txt"</span>).readlines()</span><br><span class="line">uid_to_human = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> uid,line <span class="keyword">in</span> enumerate(lines):</span><br><span class="line">    line=line.strip(<span class="string">"\n"</span>)</span><br><span class="line">    uid_to_human[uid] = line</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(uid_to_human)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_to_string</span><span class="params">(node_id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node_id <span class="keyword">not</span> <span class="keyword">in</span> uid_to_human:</span><br><span class="line">        print(<span class="string">"node_id not in uid_to_human"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> uid_to_human[node_id]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个图来存放google训练好的模型</span></span><br><span class="line"><span class="keyword">with</span> tf.gfile.FastGFile(RETRAIN_DIR + <span class="string">"output_graph.pb"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    graph_def = tf.GraphDef()</span><br><span class="line">    graph_def.ParseFromString(f.read())</span><br><span class="line">    tf.import_graph_def(graph_def, name=<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    softmax_tensor = sess.graph.get_tensor_by_name(<span class="string">"final_result:0"</span>)</span><br><span class="line">    <span class="comment">#遍历用于测试的图片目录</span></span><br><span class="line">    <span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(RETRAIN_DIR + <span class="string">"images/"</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment">#载入图片</span></span><br><span class="line">            image_data = tf.gfile.FastGFile(os.path.join(root,file), <span class="string">"rb"</span>).read()</span><br><span class="line">            predictions = sess.run(softmax_tensor, &#123;<span class="string">"DecodeJpeg/contents:0"</span> : image_data&#125;) <span class="comment">#jpg格式图片</span></span><br><span class="line">            <span class="comment">#predictions = sess.run(softmax_tensor, &#123;"DecodeJPGInput:0" : image_data&#125;) #jpg格式图片</span></span><br><span class="line">            predictions = np.squeeze(predictions) <span class="comment">#吧结果转为1维数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#打印图片路径及名称</span></span><br><span class="line">            image_path = os.path.join(root,file)</span><br><span class="line">            print(image_path)</span><br><span class="line">            <span class="comment">#显示图片</span></span><br><span class="line">            img = Image.open(image_path)</span><br><span class="line">            plt.imshow(img)</span><br><span class="line">            plt.axis(<span class="string">"off"</span>)</span><br><span class="line">            plt.show()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#排序</span></span><br><span class="line">            top_k = predictions.argsort()[::<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">for</span> node_id <span class="keyword">in</span> top_k:</span><br><span class="line">                <span class="comment">#获取分类名称</span></span><br><span class="line">                human_string = id_to_string(node_id)</span><br><span class="line">                <span class="comment">#获取该分类的概率</span></span><br><span class="line">                score = predictions[node_id]</span><br><span class="line">                print(<span class="string">"%s (score = %.5f)"</span> % (human_string, score))</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><p>D:/Tensorflow/retrain/images/111.jpg</p><p><img src="/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/output_1_1.png" alt="png"></p><p>pet (score = 0.80940)<br>flower (score = 0.19060)</p><p>D:/Tensorflow/retrain/images/222.jpg</p><p><img src="/2018/04/21/tensorflow/Tensorflow学习9-3：谷歌inception-v3模型之transfer learning retrain/output_1_3.png" alt="png"></p><p>flower (score = 0.99097)<br>pet (score = 0.00903)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为是 transfer learning 操作，所以直到网络的bottleneck部分之前都不需要改变参数和训练。只需要传入图片数据到网络中计算得到结果。再拿到这个结果到后面的全连接层进行训练。&lt;/p&gt;
&lt;p&gt;所以训练的内容不多，迭代200次左右就可以达到要求。&lt;/p&gt;

      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="transfer learning" scheme="http://yoursite.com/tags/transfer-learning/"/>
    
      <category term="inception-v3" scheme="http://yoursite.com/tags/inception-v3/"/>
    
      <category term="retrain" scheme="http://yoursite.com/tags/retrain/"/>
    
  </entry>
  
  <entry>
    <title>直线和平面方程</title>
    <link href="http://yoursite.com/2018/04/20/math/calculus/%E7%9B%B4%E7%BA%BF%E5%92%8C%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/20/math/calculus/直线和平面方程/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-04T12:56:17.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、直线"><a href="#一、直线" class="headerlink" title="一、直线"></a>一、直线</h2><p>直线方程</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>ax+by+c=0</td><td>优点：可以表示平面上的任意一条直线缺点：要确定的常数较多</td></tr><tr><td>斜截式</td><td>y=kx+b</td><td>优点：只需要斜率和截距缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>点斜式</td><td>y-y0=k(x-x0)</td><td>优点：只需要一个点和斜率缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>两点式</td><td>(y-y1)/(y2-y1)=(x-x1)/(x2-x1)</td><td>优点：只需要2个点缺点：不能表示两点x1=x2或y1=y2时的直线（即垂直或水平直线）</td></tr><tr><td>截距式</td><td>x/a+y/b=1</td><td>优点：只需要x轴截距a和y轴截距b缺点：不能表示截距为0时的直线,比如正比例直线</td></tr></tbody></table></div><h2 id="二、平面"><a href="#二、平面" class="headerlink" title="二、平面"></a>二、平面</h2><p>平面方程常用4种</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>Ax+By+Cz+D=0</td><td></td></tr><tr><td>截距式</td><td>x/a+y/b+z/c=1</td><td></td></tr><tr><td>点法式</td><td>A(x-x0)+B(y-y0)+C(z-z0)=0</td><td>向量(A,B,C)为平面的法向量</td></tr><tr><td>法线式</td><td>xcosα+ycosβ+zcosγ=p</td><td>其中cosα、cosβ、cosγ是平面法矢量的方向余弦，p为原点到平面的距离。</td></tr></tbody></table></div><p>​                                                                                 平面方程全部7种</p><p><img src="/2018/04/20/math/calculus/直线和平面方程/20180310005032167.png" alt=""><br><img src="/2018/04/20/math/calculus/直线和平面方程/2018031000522558.png" alt=""></p><h2 id="三、超平面"><a href="#三、超平面" class="headerlink" title="三、超平面"></a>三、超平面</h2><p>二维空间的超平面是一条直线，三维空间的超平面是一个平面，而N维空间的超平面则是N-1维的仿射空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、直线&quot;&gt;&lt;a href=&quot;#一、直线&quot; class=&quot;headerlink&quot; title=&quot;一、直线&quot;&gt;&lt;/a&gt;一、直线&lt;/h2&gt;&lt;p&gt;直线方程&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="calculus" scheme="http://yoursite.com/categories/math/calculus/"/>
    
    
      <category term="平面方程" scheme="http://yoursite.com/tags/%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2矩阵的运算、行列式</title>
    <link href="http://yoursite.com/2018/04/20/math/linear_algebra/2%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%90%E7%AE%97%E3%80%81%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-03T13:17:23.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><p>1 矩阵乘法的具体应用<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-18-51-07.png" alt=""><br>总结：<br>A中每个元素和B中每个元素相乘是有意义的；<br>B矩阵和最终C矩阵指标数相等，相当于对应指标类元素的求和</p><h2 id="几种特殊的矩阵"><a href="#几种特殊的矩阵" class="headerlink" title="几种特殊的矩阵"></a>几种特殊的矩阵</h2><p>1.对角矩阵<br>2.数量矩阵★<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-08-14.png" alt=""><br>3.单矩阵<br>4.三角矩阵<br>5.对称矩阵</p><h2 id="分块矩阵和其运算"><a href="#分块矩阵和其运算" class="headerlink" title="分块矩阵和其运算"></a>分块矩阵和其运算</h2><p>1 简介：<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-09-25.png" alt=""><br>2 分块矩阵相加和相乘<br>A+B 和 AB<br>相加：要求每个子块矩阵有相同的行数和列数<br>相乘：要求A的列 = B的行</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>1 矩阵的行列式和他的转置的行列式相等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;矩阵的运算&quot;&gt;&lt;a href=&quot;#矩阵的运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵的运算&quot;&gt;&lt;/a&gt;矩阵的运算&lt;/h2&gt;&lt;p&gt;1 矩阵乘法的具体应用&lt;br&gt;&lt;img src=&quot;/2018/04/20/math/linear_algebra/2
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow学习9-2：谷歌inception-v3模型之图像分类测试</title>
    <link href="http://yoursite.com/2018/04/20/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A09-2%EF%BC%9A%E8%B0%B7%E6%AD%8Cinception-v3%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/04/20/tensorflow/Tensorflow学习9-2：谷歌inception-v3模型之图像分类测试/</id>
    <published>2018-04-19T16:10:27.000Z</published>
    <updated>2018-09-14T13:58:43.067Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#模型存放目录</span></span><br><span class="line">MOD_DIR = <span class="string">"D:/Tensorflow/models/inception/"</span></span><br><span class="line">TEST_IMG_DIR = <span class="string">"D:/Tensorflow/Test Images/"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点映射解析类【目标获得1-1000分类数字 =》分类名称 的映射字典】</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeLookup</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        label_lookup_path = MOD_DIR + <span class="string">"imagenet_2012_challenge_label_map_proto.pbtxt"</span></span><br><span class="line">        uid_lookup_path = MOD_DIR + <span class="string">"imagenet_synset_to_human_label_map.txt"</span></span><br><span class="line">        self.node_lookup = self.load(label_lookup_path, uid_lookup_path)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, label_lookup_path, uid_lookup_path)</span>:</span></span><br><span class="line">        <span class="comment"># 加载分类字符串n*******对应分类名称的文件</span></span><br><span class="line">        proto_as_ascii_lines = tf.gfile.GFile(uid_lookup_path).readlines()</span><br><span class="line">        uid_to_human = &#123;&#125;</span><br><span class="line">        <span class="comment">#一行一行读取数据</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> proto_as_ascii_lines:</span><br><span class="line">            <span class="comment">#去掉换行符 \n</span></span><br><span class="line">            line=line.strip(<span class="string">"\n"</span>)</span><br><span class="line">            <span class="comment">#按照 \t 分割</span></span><br><span class="line">            parsed_items = line.split(<span class="string">"\t"</span>)</span><br><span class="line">            <span class="comment">#获取分类编号</span></span><br><span class="line">            uid = parsed_items[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#获取分类名称</span></span><br><span class="line">            human_string = parsed_items[<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#保存分类编号n*******和分类名称的映射关系</span></span><br><span class="line">            uid_to_human[uid] = human_string</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 加载分类字符串n*******对应分类编号1-1000的文件</span></span><br><span class="line">        proto_as_ascii = tf.gfile.GFile(label_lookup_path).readlines()</span><br><span class="line">        node_id_to_uid = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> proto_as_ascii:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">"  target_class:"</span>):</span><br><span class="line">                <span class="comment">#获取分类编号1-1000</span></span><br><span class="line">                target_class = int(line.split(<span class="string">": "</span>)[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">"  target_class_string:"</span>):</span><br><span class="line">                <span class="comment">#获取编号字符串n*******</span></span><br><span class="line">                target_class_string = line.split(<span class="string">": "</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="comment">#保存分类编号1-1000和编号字符串n*******的映射关系</span></span><br><span class="line">                node_id_to_uid[target_class] = target_class_string[<span class="number">1</span>:<span class="number">-2</span>]</span><br><span class="line">                </span><br><span class="line">        <span class="comment">#现在联立2个映射，合成新的 分类编号1-1000到分类名称的映射</span></span><br><span class="line">        node_id_to_name = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> node_id_to_uid.items():</span><br><span class="line">            <span class="comment">#获得分类名称</span></span><br><span class="line">            name = uid_to_human[val]</span><br><span class="line">            <span class="comment">#建立映射</span></span><br><span class="line">            node_id_to_name[key] = name</span><br><span class="line">        <span class="keyword">return</span> node_id_to_name</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#查询函数【传入分类编号1-1000返回分类名称】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">id_to_string</span><span class="params">(self, node_id)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node_id <span class="keyword">not</span> <span class="keyword">in</span> self.node_lookup:</span><br><span class="line">            print(<span class="string">"node_id not in self.node_lookup"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> self.node_lookup[node_id]</span><br><span class="line">        </span><br><span class="line"><span class="comment">#创建一个图来存放google训练好的模型</span></span><br><span class="line"><span class="keyword">with</span> tf.gfile.FastGFile(MOD_DIR + <span class="string">"classify_image_graph_def.pb"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    graph_def = tf.GraphDef()</span><br><span class="line">    graph_def.ParseFromString(f.read())</span><br><span class="line">    tf.import_graph_def(graph_def, name=<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    softmax_tensor = sess.graph.get_tensor_by_name(<span class="string">"softmax:0"</span>)</span><br><span class="line">    <span class="comment">#遍历用于测试的图片目录</span></span><br><span class="line">    <span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(TEST_IMG_DIR):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment">#载入图片</span></span><br><span class="line">            image_data = tf.gfile.FastGFile(os.path.join(root,file), <span class="string">"rb"</span>).read()</span><br><span class="line">            predictions = sess.run(softmax_tensor, &#123;<span class="string">"DecodeJpeg/contents:0"</span> : image_data&#125;) <span class="comment">#jpg格式图片</span></span><br><span class="line">            predictions = np.squeeze(predictions) <span class="comment">#吧结果转为1维数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#打印图片路径及名称</span></span><br><span class="line">            image_path = os.path.join(root,file)</span><br><span class="line">            print(image_path)</span><br><span class="line">            <span class="comment">#显示图片</span></span><br><span class="line">            img = Image.open(image_path)</span><br><span class="line">            plt.imshow(img)</span><br><span class="line">            plt.axis(<span class="string">"off"</span>)</span><br><span class="line">            plt.show()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#排序</span></span><br><span class="line">            top_k = predictions.argsort()[<span class="number">-5</span>:][::<span class="number">-1</span>] <span class="comment">#取得从大到小的5个值</span></span><br><span class="line">            node_lookup = NodeLookup()</span><br><span class="line">            <span class="keyword">for</span> node_id <span class="keyword">in</span> top_k:</span><br><span class="line">                <span class="comment">#获取分类名称</span></span><br><span class="line">                human_string = node_lookup.id_to_string(node_id)</span><br><span class="line">                <span class="comment">#获取该分类的概率</span></span><br><span class="line">                score = predictions[node_id]</span><br><span class="line">                print(<span class="string">"%s (score = %.5f)"</span> % (human_string, score))</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><p>D:/Tensorflow/Test Images/555.jpg</p><p><img src="/2018/04/20/tensorflow/Tensorflow学习9-2：谷歌inception-v3模型之图像分类测试/output_1_1.png" alt=""></p><p>gown (score = 0.27292)<br>hoopskirt, crinoline (score = 0.14043)<br>maillot (score = 0.10369)<br>brassiere, bra, bandeau (score = 0.06863)<br>bikini, two-piece (score = 0.05091)</p><p>D:/Tensorflow/Test Images/cl.jpg</p><p><img src="/2018/04/20/tensorflow/Tensorflow学习9-2：谷歌inception-v3模型之图像分类测试/output_1_3.png" alt=""></p><p>torch (score = 0.40945)<br>volleyball (score = 0.11208)<br>racket, racquet (score = 0.09447)<br>tennis ball (score = 0.06729)<br>soccer ball (score = 0.04869)</p><p>D:/Tensorflow/Test Images/nissan jk.jpg</p><p><img src="/2018/04/20/tensorflow/Tensorflow学习9-2：谷歌inception-v3模型之图像分类测试/output_1_5.png" alt=""></p><p>sports car, sport car (score = 0.49891)<br>beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon (score = 0.12817)<br>car wheel (score = 0.07217)<br>grille, radiator grille (score = 0.03533)<br>cab, hack, taxi, taxicab (score = 0.01612)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="inception-v3" scheme="http://yoursite.com/tags/inception-v3/"/>
    
  </entry>
  
  <entry>
    <title>1机器学习流程</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_theory/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_theory/1机器学习流程/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-05-08T00:31:13.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据收集并给定标签"><a href="#一、数据收集并给定标签" class="headerlink" title="一、数据收集并给定标签"></a>一、数据收集并给定标签</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="1）归一化"><a href="#1）归一化" class="headerlink" title="1）归一化"></a>1）归一化</h3><h3 id="2）数据清洗"><a href="#2）数据清洗" class="headerlink" title="2）数据清洗"></a>2）数据清洗</h3><p>先直观上 去掉不需要的列特征。 包括：<br>1.预测后才出现的特征（比如：实际发放的贷款）、<br>2.高度相关的特征（比如：123和ABC）、<br>3.关系不大的特征（比如：ID等）<br>4.列属性只有一个值的<br>　需要先排除列中 nan 值，再用 unique() 判定</p><h3 id="3）缺失值处理"><a href="#3）缺失值处理" class="headerlink" title="3）缺失值处理"></a>3）缺失值处理</h3><p>先查找列缺失值多的，去掉这些列，只剩下缺失值少的列。之后直接去掉那些样本行即可</p><h3 id="4）字符串值处理"><a href="#4）字符串值处理" class="headerlink" title="4）字符串值处理"></a>4）字符串值处理</h3><p>把 object 类型转为 int 和 float 类型。包括：<br>1.one-hot 编码<br>2.列属性数字替换</p><h3 id="5）数据样本均衡分析"><a href="#5）数据样本均衡分析" class="headerlink" title="5）数据样本均衡分析"></a>5）数据样本均衡分析</h3><p>样本分布不均衡：指的是 label 不同的样本数量差距很大。<br>如果数据样本不均衡，容易导致分类器效果很差。<br>为了解决，有以下2种方案：</p><p>P1：oversample 或 undersample<br>P2：用模型参数 调节分类惩罚权重比参数： class_weight，适用于所有分类算法</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><h2 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h2><h1 id="二、训练一个分类器"><a href="#二、训练一个分类器" class="headerlink" title="二、训练一个分类器"></a>二、训练一个分类器</h1><h2 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h2><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><ul><li>让学习率随迭代次数收敛</li></ul><h1 id="三、模型测试、评估"><a href="#三、模型测试、评估" class="headerlink" title="三、模型测试、评估"></a>三、模型测试、评估</h1><h2 id="选择模型评估方法"><a href="#选择模型评估方法" class="headerlink" title="选择模型评估方法"></a>选择模型评估方法</h2><p>1.交叉验证 + 指标（比如：精度、TPR）<br>2.均方误差<br>3.交叉熵</p><h2 id="模型评估结果分析"><a href="#模型评估结果分析" class="headerlink" title="模型评估结果分析"></a>模型评估结果分析</h2><p>如果分类效果不佳，可采取以下措施：</p><ul><li>调节分类惩罚系数比（可在模型参数中调节）</li><li>调节模型其他参数</li><li>考虑 过拟合 可能，去掉一些列</li><li>集成多个模型</li><li>尝试其他模型</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、数据收集并给定标签&quot;&gt;&lt;a href=&quot;#一、数据收集并给定标签&quot; class=&quot;headerlink&quot; title=&quot;一、数据收集并给定标签&quot;&gt;&lt;/a&gt;一、数据收集并给定标签&lt;/h1&gt;&lt;h2 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于NLP的股价预测</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/%E5%9F%BA%E4%BA%8ENLP%E7%9A%84%E8%82%A1%E4%BB%B7%E9%A2%84%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/基于NLP的股价预测/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-24T06:57:45.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于NLP的股价预测"><a href="#基于NLP的股价预测" class="headerlink" title="基于NLP的股价预测"></a>基于NLP的股价预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'Combined_News_DJIA.csv'</span>)</span><br></pre></td></tr></table></figure><ul><li>每行是某公司 这一天股市数据；label表示当天涨/跌，Top表示依重要程度排列的当天新闻事件</li><li>通过NLP处理可以把这些字符串转换为 机器认识的语言</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Label</th>      <th>Top1</th>      <th>Top2</th>      <th>Top3</th>      <th>Top4</th>      <th>Top5</th>      <th>Top6</th>      <th>Top7</th>      <th>Top8</th>      <th>...</th>      <th>Top16</th>      <th>Top17</th>      <th>Top18</th>      <th>Top19</th>      <th>Top20</th>      <th>Top21</th>      <th>Top22</th>      <th>Top23</th>      <th>Top24</th>      <th>Top25</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2008-08-08</td>      <td>0</td>      <td>b"Georgia 'downs two Russian warplanes' as cou...</td>      <td>b'BREAKING: Musharraf to be impeached.'</td>      <td>b'Russia Today: Columns of troops roll into So...</td>      <td>b'Russian tanks are moving towards the capital...</td>      <td>b"Afghan children raped with 'impunity,' U.N. ...</td>      <td>b'150 Russian tanks have entered South Ossetia...</td>      <td>b"Breaking: Georgia invades South Ossetia, Rus...</td>      <td>b"The 'enemy combatent' trials are nothing but...</td>      <td>...</td>      <td>b'Georgia Invades South Ossetia - if Russia ge...</td>      <td>b'Al-Qaeda Faces Islamist Backlash'</td>      <td>b'Condoleezza Rice: "The US would not act to p...</td>      <td>b'This is a busy day:  The European Union has ...</td>      <td>b"Georgia will withdraw 1,000 soldiers from Ir...</td>      <td>b'Why the Pentagon Thinks Attacking Iran is a ...</td>      <td>b'Caucasus in crisis: Georgia invades South Os...</td>      <td>b'Indian shoe manufactory  - And again in a se...</td>      <td>b'Visitors Suffering from Mental Illnesses Ban...</td>      <td>b"No Help for Mexico's Kidnapping Surge"</td>    </tr>    <tr>      <th>1</th>      <td>2008-08-11</td>      <td>1</td>      <td>b'Why wont America and Nato help us? If they w...</td>      <td>b'Bush puts foot down on Georgian conflict'</td>      <td>b"Jewish Georgian minister: Thanks to Israeli ...</td>      <td>b'Georgian army flees in disarray as Russians ...</td>      <td>b"Olympic opening ceremony fireworks 'faked'"</td>      <td>b'What were the Mossad with fraudulent New Zea...</td>      <td>b'Russia angered by Israeli military sale to G...</td>      <td>b'An American citizen living in S.Ossetia blam...</td>      <td>...</td>      <td>b'Israel and the US behind the Georgian aggres...</td>      <td>b'"Do not believe TV, neither Russian nor Geor...</td>      <td>b'Riots are still going on in Montreal (Canada...</td>      <td>b'China to overtake US as largest manufacturer'</td>      <td>b'War in South Ossetia [PICS]'</td>      <td>b'Israeli Physicians Group Condemns State Tort...</td>      <td>b' Russia has just beaten the United States ov...</td>      <td>b'Perhaps *the* question about the Georgia - R...</td>      <td>b'Russia is so much better at war'</td>      <td>b"So this is what it's come to: trading sex fo...</td>    </tr>    <tr>      <th>2</th>      <td>2008-08-12</td>      <td>0</td>      <td>b'Remember that adorable 9-year-old who sang a...</td>      <td>b"Russia 'ends Georgia operation'"</td>      <td>b'"If we had no sexual harassment we would hav...</td>      <td>b"Al-Qa'eda is losing support in Iraq because ...</td>      <td>b'Ceasefire in Georgia: Putin Outmaneuvers the...</td>      <td>b'Why Microsoft and Intel tried to kill the XO...</td>      <td>b'Stratfor: The Russo-Georgian War and the Bal...</td>      <td>b"I'm Trying to Get a Sense of This Whole Geor...</td>      <td>...</td>      <td>b'U.S. troops still in Georgia (did you know t...</td>      <td>b'Why Russias response to Georgia was right'</td>      <td>b'Gorbachev accuses U.S. of making a "serious ...</td>      <td>b'Russia, Georgia, and NATO: Cold War Two'</td>      <td>b'Remember that adorable 62-year-old who led y...</td>      <td>b'War in Georgia: The Israeli connection'</td>      <td>b'All signs point to the US encouraging Georgi...</td>      <td>b'Christopher King argues that the US and NATO...</td>      <td>b'America: The New Mexico?'</td>      <td>b"BBC NEWS | Asia-Pacific | Extinction 'by man...</td>    </tr>    <tr>      <th>3</th>      <td>2008-08-13</td>      <td>0</td>      <td>b' U.S. refuses Israel weapons to attack Iran:...</td>      <td>b"When the president ordered to attack Tskhinv...</td>      <td>b' Israel clears troops who killed Reuters cam...</td>      <td>b'Britain\'s policy of being tough on drugs is...</td>      <td>b'Body of 14 year old found in trunk; Latest (...</td>      <td>b'China has moved 10 *million* quake survivors...</td>      <td>b"Bush announces Operation Get All Up In Russi...</td>      <td>b'Russian forces sink Georgian ships '</td>      <td>...</td>      <td>b'Elephants extinct by 2020?'</td>      <td>b'US humanitarian missions soon in Georgia - i...</td>      <td>b"Georgia's DDOS came from US sources"</td>      <td>b'Russian convoy heads into Georgia, violating...</td>      <td>b'Israeli defence minister: US against strike ...</td>      <td>b'Gorbachev: We Had No Choice'</td>      <td>b'Witness: Russian forces head towards Tbilisi...</td>      <td>b' Quarter of Russians blame U.S. for conflict...</td>      <td>b'Georgian president  says US military will ta...</td>      <td>b'2006: Nobel laureate Aleksander Solzhenitsyn...</td>    </tr>    <tr>      <th>4</th>      <td>2008-08-14</td>      <td>1</td>      <td>b'All the experts admit that we should legalis...</td>      <td>b'War in South Osetia - 89 pictures made by a ...</td>      <td>b'Swedish wrestler Ara Abrahamian throws away ...</td>      <td>b'Russia exaggerated the death toll in South O...</td>      <td>b'Missile That Killed 9 Inside Pakistan May Ha...</td>      <td>b"Rushdie Condemns Random House's Refusal to P...</td>      <td>b'Poland and US agree to missle defense deal. ...</td>      <td>b'Will the Russians conquer Tblisi? Bet on it,...</td>      <td>...</td>      <td>b'Bank analyst forecast Georgian crisis 2 days...</td>      <td>b"Georgia confict could set back Russia's US r...</td>      <td>b'War in the Caucasus is as much the product o...</td>      <td>b'"Non-media" photos of South Ossetia/Georgia ...</td>      <td>b'Georgian TV reporter shot by Russian sniper ...</td>      <td>b'Saudi Arabia: Mother moves to block child ma...</td>      <td>b'Taliban wages war on humanitarian aid workers'</td>      <td>b'Russia: World  "can forget about" Georgia\'s...</td>      <td>b'Darfur rebels accuse Sudan of mounting major...</td>      <td>b'Philippines : Peace Advocate say Muslims nee...</td>    </tr>  </tbody></table><p>5 rows × 27 columns</p></div><h2 id="1-数据简单预处理、划分"><a href="#1-数据简单预处理、划分" class="headerlink" title="1 数据简单预处理、划分"></a>1 数据简单预处理、划分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期划分 训练集 测试集</span></span><br><span class="line">train = data[data[<span class="string">'Date'</span>] &lt; <span class="string">'2015-01-01'</span>]</span><br><span class="line">test = data[data[<span class="string">'Date'</span>] &gt; <span class="string">'2014-12-31'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = train.iloc[<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">print(example)</span><br></pre></td></tr></table></figure><pre><code>b&quot;The commander of a Navy air reconnaissance squadron that provides the President and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example2 = example.lower()</span><br><span class="line">print(example2)</span><br></pre></td></tr></table></figure><pre><code>b&quot;the commander of a navy air reconnaissance squadron that provides the president and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example3 = CountVectorizer().build_tokenizer()(example2)</span><br><span class="line">print(example3)</span><br></pre></td></tr></table></figure><pre><code>[&#39;the&#39;, &#39;commander&#39;, &#39;of&#39;, &#39;navy&#39;, &#39;air&#39;, &#39;reconnaissance&#39;, &#39;squadron&#39;, &#39;that&#39;, &#39;provides&#39;, &#39;the&#39;, &#39;president&#39;, &#39;and&#39;, &#39;the&#39;, &#39;defense&#39;, &#39;secretary&#39;, &#39;the&#39;, &#39;airborne&#39;, &#39;ability&#39;, &#39;to&#39;, &#39;command&#39;, &#39;the&#39;, &#39;nation&#39;, &#39;nuclear&#39;, &#39;weapons&#39;, &#39;has&#39;, &#39;been&#39;, &#39;relieved&#39;, &#39;of&#39;, &#39;duty&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame([[x,example3.count(x)] <span class="keyword">for</span> x <span class="keyword">in</span> set(example3)], columns = [<span class="string">'Word'</span>, <span class="string">'Count'</span>])</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Word</th>      <th>Count</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>the</td>      <td>5</td>    </tr>    <tr>      <th>1</th>      <td>command</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>secretary</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>weapons</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>has</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>defense</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>commander</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>squadron</td>      <td>1</td>    </tr>    <tr>      <th>8</th>      <td>relieved</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>navy</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>of</td>      <td>2</td>    </tr>    <tr>      <th>11</th>      <td>air</td>      <td>1</td>    </tr>    <tr>      <th>12</th>      <td>reconnaissance</td>      <td>1</td>    </tr>    <tr>      <th>13</th>      <td>provides</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>president</td>      <td>1</td>    </tr>    <tr>      <th>15</th>      <td>been</td>      <td>1</td>    </tr>    <tr>      <th>16</th>      <td>to</td>      <td>1</td>    </tr>    <tr>      <th>17</th>      <td>and</td>      <td>1</td>    </tr>    <tr>      <th>18</th>      <td>ability</td>      <td>1</td>    </tr>    <tr>      <th>19</th>      <td>nation</td>      <td>1</td>    </tr>    <tr>      <th>20</th>      <td>that</td>      <td>1</td>    </tr>    <tr>      <th>21</th>      <td>duty</td>      <td>1</td>    </tr>    <tr>      <th>22</th>      <td>nuclear</td>      <td>1</td>    </tr>    <tr>      <th>23</th>      <td>airborne</td>      <td>1</td>    </tr>  </tbody></table></div><h2 id="2-基于词频的特征提取——构造词频矩阵"><a href="#2-基于词频的特征提取——构造词频矩阵" class="headerlink" title="2 基于词频的特征提取——构造词频矩阵"></a>2 基于词频的特征提取——构造词频矩阵</h2><p>1）构造一个字符串数组StringList，每个元素是对应行所有top特征字符串拼成的长字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trainheadlines = [] </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(train.index)):</span><br><span class="line">    trainheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> train.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">print(trainheadlines[<span class="number">0</span>:<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;b&quot;Georgia \&#39;downs two Russian warplanes\&#39; as countries move to brink of war&quot; b\&#39;BREAKING: Musharraf to be impeached.\&#39; b\&#39;Russia Today: Columns of troops roll into South Ossetia; footage from fighting (YouTube)\&#39; b\&#39;Russian tanks are moving towards the capital of South Ossetia, which has reportedly been completely destroyed by Georgian artillery fire\&#39; b&quot;Afghan children raped with \&#39;impunity,\&#39; U.N. official says - this is sick, a three year old was raped and they do nothing&quot; b\&#39;150 Russian tanks have entered South Ossetia whilst Georgia shoots down two Russian jets.\&#39; b&quot;Breaking: Georgia invades South Ossetia, Russia warned it would intervene on SO\&#39;s side&quot; b&quot;The \&#39;enemy combatent\&#39; trials are nothing but a sham: Salim Haman has been sentenced to 5 1/2 years, but will be kept longer anyway just because they feel like it.&quot; b\&#39;Georgian troops retreat from S. Osettain capital, presumably leaving several hundred people killed. [VIDEO]\&#39; b\&#39;Did the U.S. Prep Georgia for War with Russia?\&#39; b\&#39;Rice Gives Green Light for Israel to Attack Iran: Says U.S. has no veto over Israeli military ops\&#39; b\&#39;Announcing:Class Action Lawsuit on Behalf of American Public Against the FBI\&#39; b&quot;So---Russia and Georgia are at war and the NYT\&#39;s top story is opening ceremonies of the Olympics?  What a fucking disgrace and yet further proof of the decline of journalism.&quot; b&quot;China tells Bush to stay out of other countries\&#39; affairs&quot; b\&#39;Did World War III start today?\&#39; b\&#39;Georgia Invades South Ossetia - if Russia gets involved, will NATO absorb Georgia and unleash a full scale war?\&#39; b\&#39;Al-Qaeda Faces Islamist Backlash\&#39; b\&#39;Condoleezza Rice: &quot;The US would not act to prevent an Israeli strike on Iran.&quot; Israeli Defense Minister Ehud Barak: &quot;Israel is prepared for uncompromising victory in the case of military hostilities.&quot;\&#39; b\&#39;This is a busy day:  The European Union has approved new sanctions against Iran in protest at its nuclear programme.\&#39; b&quot;Georgia will withdraw 1,000 soldiers from Iraq to help fight off Russian forces in Georgia\&#39;s breakaway region of South Ossetia&quot; b\&#39;Why the Pentagon Thinks Attacking Iran is a Bad Idea - US News &amp;amp; World Report\&#39; b\&#39;Caucasus in crisis: Georgia invades South Ossetia\&#39; b\&#39;Indian shoe manufactory  - And again in a series of &quot;you do not like your work?&quot;\&#39; b\&#39;Visitors Suffering from Mental Illnesses Banned from Olympics\&#39; b&quot;No Help for Mexico\&#39;s Kidnapping Surge&quot;&#39;]</code></pre><p>2）将这个字符串数组 转换成 词频矩阵，以便可以作为训练集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basicvectorizer = CountVectorizer()</span><br><span class="line">basictrain = basicvectorizer.fit_transform(trainheadlines)</span><br><span class="line">print(basictrain.shape) <span class="comment"># 生成了一个词频矩阵，总共1611个样本，31675个不重复的单词</span></span><br></pre></td></tr></table></figure><pre><code>(1611, 31675)</code></pre><h2 id="3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof"><a href="#3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof" class="headerlink" title="3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_"></a>3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归 fit 训练集词频矩阵</span></span><br><span class="line">basicmodel = LogisticRegression()</span><br><span class="line">basicmodel = basicmodel.fit(basictrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">basictest = basicvectorizer.transform(testheadlines)</span><br><span class="line"><span class="comment"># 逻辑回归 predict 测试集词频矩阵</span></span><br><span class="line">predictions = basicmodel.predict(basictest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造简易 混淆矩阵</span></span><br><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], predictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#0.42</span></span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>61</td>      <td>125</td>    </tr>    <tr>      <th>1</th>      <td>92</td>      <td>100</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">观察：用精度做的混淆矩阵，精度只有<span class="number">42</span>% 不理想</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">basicwords = basicvectorizer.get_feature_names() <span class="comment"># 得到分词模型中所有单词（特征）</span></span><br><span class="line">basiccoeffs = basicmodel.coef_.tolist()[<span class="number">0</span>] <span class="comment"># 得到logistic模型中所有单词对应的 权重参数</span></span><br><span class="line">coeffdf = pd.DataFrame(&#123;<span class="string">'Word'</span> : basicwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : basiccoeffs&#125;)</span><br><span class="line">coeffdf = coeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Word'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>]) <span class="comment"># 从大到小排序</span></span><br><span class="line">coeffdf.head(<span class="number">10</span>) <span class="comment"># 前面的正相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>19419</th>      <td>0.497924</td>      <td>nigeria</td>    </tr>    <tr>      <th>25261</th>      <td>0.452526</td>      <td>self</td>    </tr>    <tr>      <th>29286</th>      <td>0.428011</td>      <td>tv</td>    </tr>    <tr>      <th>15998</th>      <td>0.425863</td>      <td>korea</td>    </tr>    <tr>      <th>20135</th>      <td>0.425716</td>      <td>olympics</td>    </tr>    <tr>      <th>15843</th>      <td>0.411636</td>      <td>kills</td>    </tr>    <tr>      <th>26323</th>      <td>0.411267</td>      <td>so</td>    </tr>    <tr>      <th>29256</th>      <td>0.394855</td>      <td>turn</td>    </tr>    <tr>      <th>10874</th>      <td>0.388555</td>      <td>fears</td>    </tr>    <tr>      <th>28274</th>      <td>0.384031</td>      <td>territory</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coeffdf.tail(<span class="number">10</span>) <span class="comment"># 前面的负相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>27299</th>      <td>-0.424441</td>      <td>students</td>    </tr>    <tr>      <th>8478</th>      <td>-0.427079</td>      <td>did</td>    </tr>    <tr>      <th>6683</th>      <td>-0.431925</td>      <td>congo</td>    </tr>    <tr>      <th>12818</th>      <td>-0.444069</td>      <td>hacking</td>    </tr>    <tr>      <th>7139</th>      <td>-0.448570</td>      <td>country</td>    </tr>    <tr>      <th>16949</th>      <td>-0.463116</td>      <td>low</td>    </tr>    <tr>      <th>3651</th>      <td>-0.470454</td>      <td>begin</td>    </tr>    <tr>      <th>25433</th>      <td>-0.494555</td>      <td>sex</td>    </tr>    <tr>      <th>24754</th>      <td>-0.549725</td>      <td>sanctions</td>    </tr>    <tr>      <th>24542</th>      <td>-0.587794</td>      <td>run</td>    </tr>  </tbody></table></div><h2 id="4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵"><a href="#4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵" class="headerlink" title="4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵"></a>4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedvectorizer = CountVectorizer(ngram_range=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">advancedtrain = advancedvectorizer.fit_transform(trainheadlines)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(advancedtrain.shape)</span><br></pre></td></tr></table></figure><pre><code>(1611, 366721)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedmodel = LogisticRegression()</span><br><span class="line">advancedmodel = advancedmodel.fit(advancedtrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">advancedtest = advancedvectorizer.transform(testheadlines)</span><br><span class="line">advpredictions = advancedmodel.predict(advancedtest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], advpredictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#.57</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>66</td>      <td>120</td>    </tr>    <tr>      <th>1</th>      <td>45</td>      <td>147</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">advwords = advancedvectorizer.get_feature_names()</span><br><span class="line">advcoeffs = advancedmodel.coef_.tolist()[<span class="number">0</span>]</span><br><span class="line">advcoeffdf = pd.DataFrame(&#123;<span class="string">'Words'</span> : advwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : advcoeffs&#125;)</span><br><span class="line">advcoeffdf = advcoeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Words'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">advcoeffdf.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>272047</th>      <td>0.286533</td>      <td>right to</td>    </tr>    <tr>      <th>24710</th>      <td>0.275274</td>      <td>and other</td>    </tr>    <tr>      <th>285392</th>      <td>0.274698</td>      <td>set to</td>    </tr>    <tr>      <th>316194</th>      <td>0.262873</td>      <td>the first</td>    </tr>    <tr>      <th>157511</th>      <td>0.227943</td>      <td>in china</td>    </tr>    <tr>      <th>159522</th>      <td>0.224184</td>      <td>in south</td>    </tr>    <tr>      <th>125870</th>      <td>0.219130</td>      <td>found in</td>    </tr>    <tr>      <th>124411</th>      <td>0.216726</td>      <td>forced to</td>    </tr>    <tr>      <th>173246</th>      <td>0.211137</td>      <td>it has</td>    </tr>    <tr>      <th>322590</th>      <td>0.209239</td>      <td>this is</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advcoeffdf.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>326846</th>      <td>-0.198495</td>      <td>to help</td>    </tr>    <tr>      <th>118707</th>      <td>-0.201654</td>      <td>fire on</td>    </tr>    <tr>      <th>155038</th>      <td>-0.209702</td>      <td>if he</td>    </tr>    <tr>      <th>242528</th>      <td>-0.211303</td>      <td>people are</td>    </tr>    <tr>      <th>31669</th>      <td>-0.213362</td>      <td>around the</td>    </tr>    <tr>      <th>321333</th>      <td>-0.215699</td>      <td>there is</td>    </tr>    <tr>      <th>327113</th>      <td>-0.221812</td>      <td>to kill</td>    </tr>    <tr>      <th>340714</th>      <td>-0.226289</td>      <td>up in</td>    </tr>    <tr>      <th>358917</th>      <td>-0.227516</td>      <td>with iran</td>    </tr>    <tr>      <th>315485</th>      <td>-0.331153</td>      <td>the country</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于NLP的股价预测&quot;&gt;&lt;a href=&quot;#基于NLP的股价预测&quot; class=&quot;headerlink&quot; title=&quot;基于NLP的股价预测&quot;&gt;&lt;/a&gt;基于NLP的股价预测&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="CountVectorizer" scheme="http://yoursite.com/tags/CountVectorizer/"/>
    
      <category term="LogisticRegression" scheme="http://yoursite.com/tags/LogisticRegression/"/>
    
  </entry>
  
</feed>
