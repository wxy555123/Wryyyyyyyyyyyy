<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新日暮里的幻想乡</title>
  
  <subtitle>boy next door</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-11T16:55:13.531Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wxy555123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tensorflow专题3：模型优化策略</title>
    <link href="http://yoursite.com/2018/05/10/tensorflow/Tensorflow%E4%B8%93%E9%A2%983%EF%BC%9A%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/05/10/tensorflow/Tensorflow专题3：模型优化策略/</id>
    <published>2018-05-09T16:11:27.000Z</published>
    <updated>2018-05-11T16:55:13.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化优化"><a href="#初始化优化" class="headerlink" title="初始化优化"></a>初始化优化</h2><ul><li>权值W使用：tf.random_truncated<br>偏置值b使用：0.1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W1 = tf.Variable(tf.truncated_normal([784,128], 0.,0.5))</span><br><span class="line">b1 = tf.Variable(tf.zeros([128]) + 0.1)</span><br></pre></td></tr></table></figure></li></ul><h2 id="过拟合优化"><a href="#过拟合优化" class="headerlink" title="过拟合优化"></a>过拟合优化</h2><ul><li>增加数据集</li><li>正则化</li><li>dropout：每次停用部分神经元<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># keep_prob是设置层L1工作神经元的百分比</span></span><br><span class="line">tf.nn.dopout(L1, keep_prob)</span><br></pre></td></tr></table></figure></li></ul><h2 id="收敛速度优化"><a href="#收敛速度优化" class="headerlink" title="收敛速度优化"></a>收敛速度优化</h2><ul><li>更改损失函数 loss，如交叉熵</li><li>更改优化器算法 optimizer，如自适应优化算法</li><li>更改学习率。如动态学习率</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化优化&quot;&gt;&lt;a href=&quot;#初始化优化&quot; class=&quot;headerlink&quot; title=&quot;初始化优化&quot;&gt;&lt;/a&gt;初始化优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;权值W使用：tf.random_truncated&lt;br&gt;偏置值b使用：0.1&lt;figure class
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="模型优化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow专题2：优化器Optimizer</title>
    <link href="http://yoursite.com/2018/05/10/tensorflow/Tensorflow%E4%B8%93%E9%A2%982%EF%BC%9A%E4%BC%98%E5%8C%96%E5%99%A8Optimizer/"/>
    <id>http://yoursite.com/2018/05/10/tensorflow/Tensorflow专题2：优化器Optimizer/</id>
    <published>2018-05-09T16:11:27.000Z</published>
    <updated>2018-05-11T16:52:16.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、优化器介绍"><a href="#一、优化器介绍" class="headerlink" title="一、优化器介绍"></a>一、优化器介绍</h1><h2 id="tensorflow优化器"><a href="#tensorflow优化器" class="headerlink" title="tensorflow优化器"></a>tensorflow优化器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tf.train.GradientDescentOptimizer</span><br><span class="line">tf.train.AdadeltaOptimizer</span><br><span class="line">tf.train.AdagradOptimizer</span><br><span class="line">tf.train.AdagradDAOptimizer</span><br><span class="line">tf.train.MomentumOptimizer</span><br><span class="line">tf.train.AdamOptimizer</span><br><span class="line">tf.train.FtrlOptimizer</span><br><span class="line">tf.train.ProximalGradientDescentOptimizer</span><br><span class="line">tf.train.ProximalAdagradOptimizer</span><br><span class="line">tf.train.RMSPropOptimizer1234567891011</span><br></pre></td></tr></table></figure><h2 id="1）GradientDescent梯度下降法"><a href="#1）GradientDescent梯度下降法" class="headerlink" title="1）GradientDescent梯度下降法"></a>1）GradientDescent梯度下降法</h2><h3 id="TF函数实现："><a href="#TF函数实现：" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.GradientDescentOptimizer</code></p><p>设：<br>$h_W(x)=W_1x$，其参数是W_1，则其损失函数是：<br>$J(W_1)=\frac{1}{2m}\sum^{m}_{i=1}(h_W(x^{i})-y^{i})^2$<br>则W1W1通过如下求得：<br>$minimize\ J(W_1)$</p><p>标准梯度下降法：标准梯度下降先计算所有样本汇总误差，然后根据总误差来更新权值。<br>随机梯度下降法：随机梯度下降随机抽取一个样本来计算误差，然后更新权值。<br>批量梯度下降法：批量梯度下降算是一种折中的方案，从总样本中选取一个批次（比如一共有10000个样本，随机选取100个样本作为一个batch），然后计算这个batch的总误差，根据总误差来更新权值。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1.合适的学习率，α 比较难获得<br>α 过大导致震荡无法得到最优解，过小导致学习过程漫长。<br>2.对所有参数学习率只有一个，如果数据是稀疏的，并且特征具有不同的频率时，更倾向于对不同频率特征使用不同的学习率，对很少发生的特征采用较大的学习率。<br>3.目标函数门限需要提前定义，一旦计算中小于门限就停止，数据调度训练的选择对其有影响，通常使用shuffle打断以减小这种影响。<br>4.高维非凸误差函数最小求解技术难度大。</p><h2 id="2）Momentum"><a href="#2）Momentum" class="headerlink" title="2）Momentum"></a>2）Momentum</h2><h3 id="TF函数实现：-1"><a href="#TF函数实现：-1" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.MomentumOptimizer</code><br>动量法<br>ρ：动力通常设为 0.9</p><p>$W_t=ρW_{t-1}-η\nabla_W {J(W)}$<br>当前权值的改变会受到上一次全职改变的影响，类似小球向下滚动的时候带上了惯性。这样可以加快小球向下的速度。</p><h2 id="3）NAG（Nesterov-accelerated-gradient）"><a href="#3）NAG（Nesterov-accelerated-gradient）" class="headerlink" title="3）NAG（Nesterov accelerated gradient）"></a>3）NAG（Nesterov accelerated gradient）</h2><h3 id="TF函数实现：-2"><a href="#TF函数实现：-2" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.MomentumOptimizer</code></p><p>$W_t=ρW_{t-1}-η\nabla_W {J(W-ρW_{t-1})}$<br>NAG在TF中跟Momentum合并在同一个函数tf.train.MomentumOptimizer中，可以通过参数配置启用。在Momentum中小球会盲目跟从下坡的梯度，容易发生错误，所以我们需要一个更聪明的小球，这个小球提前知道它要去哪里，它还要知道走到坡底的时候速度慢下来而不是又冲上另一个坡。我们可以提前计算下一个位置的梯度，然后使用到当前位置。</p><h2 id="4）Adagrad"><a href="#4）Adagrad" class="headerlink" title="4）Adagrad"></a>4）Adagrad</h2><h3 id="TF函数实现：-3"><a href="#TF函数实现：-3" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.AdagradOptimizer</code><br><code>tf.train.AdagradDAOptimizer</code></p><p>Adagrad会累加之前所有的梯度平方。<br>$ΔW_t=-\frac η{\sqrt{\sum_{τ}^{t}g_τ^2+ϵ}}⨀g_t$<br>$W_{t+1}=W_t-\frac η{\sqrt{\sum_{τ}^{t}g_τ^2+ϵ}}⨀g_t$<br>通常上述的求和针对一个窗长w求解，以减小运算量。</p><p>它是基于SGD的一种算法，它的核心思想是对比比较常见的数据给予它比较小的学习率去调整参数，对于比较罕见的数据给予它较大的学习率去调整参数。它很适合应用于数据稀疏的数据集（比如一个图片的数据集，有10000张狗的照片，10000张猫的照片，只有100张大象的照片）。<br>Adagrad主要的优势在于不需要人为的调节学习率，它可以自动调节。它的缺点在于，随着迭代次数的增多，学习率也会越来越低，最终会趋向于0。</p><h2 id="5）RMSprop"><a href="#5）RMSprop" class="headerlink" title="5）RMSprop"></a>5）RMSprop</h2><h3 id="TF函数实现：-4"><a href="#TF函数实现：-4" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.RMSPropOptimizer</code></p><p>$E|g^2|_t=0.9E|g^2|_{t-1}+0.1g^2_t$<br>$W_{t+1}=W_t-\frac η{\sqrt {E|g2|_t+ϵ}}⨀g_t$<br>学习速率梯度均方根均值指数衰减。</p><p>RMSprop借鉴了一些Adagrad的思想，不过这里RMSprop只用到了前t-1次梯度平方的平均值加上当前梯度的平方的和的开平方作为学习率的分母。这样RMSprop不会出现学习率越来越低的问题，而且也能自己调节学习率，并且可以有一个比较好的效果。</p><h2 id="6）Adadelta"><a href="#6）Adadelta" class="headerlink" title="6）Adadelta"></a>6）Adadelta</h2><h3 id="TF函数实现：-5"><a href="#TF函数实现：-5" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.AdadeltaOptimizer</code></p><p>该算法不需要手动调优学习速率α，抗噪声能力强，可以选择不同的模型结构。<br>Adadelta是对Adagrad的扩展。Adadelta只累加固定大小的项，并且也不直接存储这些项，仅仅是计算对应的平均值。<br>上一节的参数更新模型是：<br>$W_{t+1}=W_t - α\frac{dJ(W)}{dW_t}$<br>为方便，把$\frac{dJ(W)}{dW_t}$记作$g_t$，把平滑后的梯度记作$E|g|_t$,则其平方表示如下：<br>$E|g^2|_t = ρE|g^2|_{t-1}+(1-ρ)g^2_t$<br>其中ρ是平滑/衰减因子。其均方根得到的该值如下：<br>$RMS|g|_t=\sqrt {E|g^2|_t+ϵ}$<br>其中ϵ是为了防止后续计算分母为零而引入的参数常量。<br>$ΔW=-\frac{RMS|ΔW|_{t-1}}{RMS|g|_t}g_t$<br>$W_t+1=W_t+ΔW_t$</p><h3 id="Adadelta-t时刻跟新过程如下："><a href="#Adadelta-t时刻跟新过程如下：" class="headerlink" title="Adadelta t时刻跟新过程如下："></a>Adadelta t时刻跟新过程如下：</h3><p>前提衰减因子ρ，常数ϵ，初始的W值。</p><p>1 计算变量E|g2|0=0E|g2|0=0，E|ΔW2|0=0E|ΔW2|0=0<br>2: for t=1:T do %%Loop over #of updates</p><blockquote><p>3: 计算梯度：$g_t $<br>4: 滑动平均梯度:$E|g^2|_t = ρE|g^2|_{t-1}+(1-ρ)g^2_t$</p><ol><li>计算参数跟新$ΔW=-\frac{RMS|ΔW|_{t-1}}{RMS|g|_t}g_t$</li><li>计算更新$E|Δx^2|_t=ρE|ΔW^2|_{t-1} + (1-ρ)W^2$</li><li>更新参数$W_{t+1}=W_t+ΔW_t$</li></ol></blockquote><p>8.end for</p><h2 id="7）Adam"><a href="#7）Adam" class="headerlink" title="7）Adam"></a>7）Adam</h2><h3 id="TF函数实现：-6"><a href="#TF函数实现：-6" class="headerlink" title="TF函数实现："></a>TF函数实现：</h3><p><code>tf.train.AdamOptimizer</code></p><p>Adam(Adaptive Moment Estimation)加上了bias校正和momentum，在优化末期，梯度更稀疏时，它比RMSprop稍微好点。<br>$m_t=β_1m_{t-1}+(1-β_1)g_t$<br>$v_t=β_2v_{t-1}+(1-β_2)g^2_t$<br>其中$m_t$是梯度均值，$v_t$是梯度偏方差。这两个值初始化时为0的张量。在训练开始时，$m_t$和$v_t$趋向于零。可以使用如下估计方法抵消：<br>$\hat m_t=\frac{m_t}{1-β^t_1}$<br>$\hat v_t=\frac {v_t}{1-β^t_2}$<br>$W_{t+1}=W_t-\frac η{\sqrt{\hat v_t+ϵ}}\hat m_t$<br>就像Adadelta和RMSprop一样Adam会存储之前衰减的平方梯度，同时它也会保存之前衰减的梯度。经过一些处理之后再使用类似Adadelta和RMSprop的方式更新参数。</p><h2 id="tf-train-FtrlOptimizer"><a href="#tf-train-FtrlOptimizer" class="headerlink" title="tf.train.FtrlOptimizer"></a>tf.train.FtrlOptimizer</h2><h2 id="tf-train-ProximalGradientDescentOptimizer"><a href="#tf-train-ProximalGradientDescentOptimizer" class="headerlink" title="tf.train.ProximalGradientDescentOptimizer"></a>tf.train.ProximalGradientDescentOptimizer</h2><h2 id="tf-train-ProximalAdagradOptimizer"><a href="#tf-train-ProximalAdagradOptimizer" class="headerlink" title="tf.train.ProximalAdagradOptimizer"></a>tf.train.ProximalAdagradOptimizer</h2><h2 id="其它梯度优化方法"><a href="#其它梯度优化方法" class="headerlink" title="其它梯度优化方法"></a>其它梯度优化方法</h2><p>1.数据重拍(shuffle函数)和数据多次重复训练<br>2.批量归一化，防止逐级训练中的梯度消失和溢出<br>3.提前终止，防止过拟合，监控验证数据集在训练中的损失，合适时提前终止。<br>4.增加高斯分布的梯度噪声，<br>$g_{t,i}=g_{t,i}+N(0,δ^2)$<br>$δ^2_t=\frac η{(1+t)^γ}$<br>这使得网络对初始化不敏感。</p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><h2 id="如何选用optimizer"><a href="#如何选用optimizer" class="headerlink" title="如何选用optimizer"></a>如何选用optimizer</h2><ul><li>对于稀疏数据：<br>使用学习率可自适应的优化方法如：RMSprop，不用手动调节，而且最好采用默认值 </li><li>追求精度：<br>SGD。虽然通常训练时间更长，容易陷入鞍点，但是在好的初始化和学习率调度方案的情况下，结果更可靠 </li><li>如果在意更快的收敛，并且需要训练较深较复杂的网络时：<br>推荐使用学习率自适应的优化方法，如：Adadelta，RMSprop，Adam是比较相近的算法，在相似的情况下表现差不多。NAG收敛也比较快。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、优化器介绍&quot;&gt;&lt;a href=&quot;#一、优化器介绍&quot; class=&quot;headerlink&quot; title=&quot;一、优化器介绍&quot;&gt;&lt;/a&gt;一、优化器介绍&lt;/h1&gt;&lt;h2 id=&quot;tensorflow优化器&quot;&gt;&lt;a href=&quot;#tensorflow优化器&quot; class
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="Optimizer" scheme="http://yoursite.com/tags/Optimizer/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow专题1：生成随机数</title>
    <link href="http://yoursite.com/2018/05/01/tensorflow/Tensorflow%E4%B8%93%E9%A2%981%EF%BC%9A%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://yoursite.com/2018/05/01/tensorflow/Tensorflow专题1：生成随机数/</id>
    <published>2018-05-01T12:51:27.000Z</published>
    <updated>2018-05-11T16:52:08.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随机数函数-tf-random-normal-amp-tf-random-uniform-amp-tf-truncated-normal-amp-tf-random-shuffle"><a href="#随机数函数-tf-random-normal-amp-tf-random-uniform-amp-tf-truncated-normal-amp-tf-random-shuffle" class="headerlink" title="随机数函数 tf.random_normal &amp; tf.random_uniform &amp; tf.truncated_normal &amp; tf.random_shuffle"></a>随机数函数 tf.random_normal &amp; tf.random_uniform &amp; tf.truncated_normal &amp; tf.random_shuffle</h1><p><br></p><h2 id="tf-random-normal"><a href="#tf-random-normal" class="headerlink" title="tf.random_normal"></a>tf.random_normal</h2><p>从正态分布输出随机值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random_normal(shape,mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>,dtype=tf.float32,seed=<span class="keyword">None</span>,name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>shape：一个一维整数张量或Python数组。代表张量的形状。<br>mean：数据类型为dtype的张量值或Python值。是正态分布的均值。<br>stddev：数据类型为dtype的张量值或Python值。是正态分布的标准差<br>dtype： 输出的数据类型。<br>seed：一个Python整数。是随机种子。<br>name： 操作的名称(可选)</p><h2 id="tf-random-uniform"><a href="#tf-random-uniform" class="headerlink" title="tf.random_uniform"></a>tf.random_uniform</h2><p>从均匀分布中返回随机值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">random_uniform(  </span><br><span class="line">    shape,<span class="comment"># 生成的张量的形状  </span></span><br><span class="line">    minval=<span class="number">0</span>,  </span><br><span class="line">    maxval=<span class="keyword">None</span>,  </span><br><span class="line">    dtype=tf.float32,  </span><br><span class="line">    seed=<span class="keyword">None</span>,  </span><br><span class="line">    name=<span class="keyword">None</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>返回值的范围默认是0到1的左闭右开区间，即[0，1)。minval为指定最小边界，默认为1。maxval为指定的最大边界，如果是数据浮点型则默认为1，如果数据为整形则必须指定。</p><h2 id="tf-truncated-normal"><a href="#tf-truncated-normal" class="headerlink" title="tf.truncated_normal"></a>tf.truncated_normal</h2><p>截断的正态分布函数。生成的值遵循一个正态分布，但如果生成的值大于平均值2个标准偏差的值则丢弃重新选择。<br>故，只取横轴区间（μ-2σ，μ+2σ）内的值，面积为95.449974%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">truncated_normal(  </span><br><span class="line">    shape,<span class="comment">#一个一维整数张量或Python数组。代表张量的形状。  </span></span><br><span class="line">    mean=<span class="number">0.0</span>,<span class="comment">#数据类型为dtype的张量值或Python值。是正态分布的均值。  </span></span><br><span class="line">    stddev=<span class="number">1.0</span>,<span class="comment">#数据类型为dtype的张量值或Python值。是正态分布的标准差  </span></span><br><span class="line">    dtype=tf.float32,<span class="comment">#输出的数据类型。  </span></span><br><span class="line">    seed=<span class="keyword">None</span>,<span class="comment">#一个Python整数。是随机种子。  </span></span><br><span class="line">    name=<span class="keyword">None</span><span class="comment">#操作的名称(可选)  </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="tf-random-shuffle"><a href="#tf-random-shuffle" class="headerlink" title="tf.random_shuffle"></a>tf.random_shuffle</h2><p>沿着要被洗牌的张量的第一个维度，随机打乱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">random_shuffle(  </span><br><span class="line">    value,<span class="comment"># 要被洗牌的张量  </span></span><br><span class="line">    seed=<span class="keyword">None</span>,  </span><br><span class="line">    name=<span class="keyword">None</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>即下面这种效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>, <span class="number">2</span>],       [[<span class="number">5</span>, <span class="number">6</span>],  </span><br><span class="line"> [3, 4],  ==&gt;   [1, 2],  </span><br><span class="line"> [<span class="number">5</span>, <span class="number">6</span>]]        [<span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure></p><h2 id="附录1：生成随机数的操作的源码random-ops-py"><a href="#附录1：生成随机数的操作的源码random-ops-py" class="headerlink" title="附录1：生成随机数的操作的源码random_ops.py"></a>附录1：生成随机数的操作的源码random_ops.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Copyright 2015 The TensorFlow Authors. All Rights Reserved.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");  </span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.  </span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software  </span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,  </span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  </span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and  </span></span><br><span class="line"><span class="comment"># limitations under the License.  </span></span><br><span class="line"><span class="comment"># ==============================================================================  </span></span><br><span class="line"><span class="string">"""Operations for generating random numbers."""</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import  </span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division  </span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> dtypes  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> random_seed  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.ops <span class="keyword">import</span> array_ops  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.ops <span class="keyword">import</span> control_flow_ops  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.ops <span class="keyword">import</span> gen_random_ops  </span><br><span class="line"><span class="keyword">from</span> tensorflow.python.ops <span class="keyword">import</span> math_ops  </span><br><span class="line"><span class="comment"># go/tf-wildcard-import  </span></span><br><span class="line"><span class="comment"># pylint: disable=wildcard-import  </span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python.ops.gen_random_ops <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># pylint: enable=wildcard-import  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ShapeTensor</span><span class="params">(shape)</span>:</span>  </span><br><span class="line">  <span class="string">"""Convert to an int32 or int64 tensor, defaulting to int32 if empty."""</span>  </span><br><span class="line">  <span class="keyword">if</span> isinstance(shape, (tuple, list)) <span class="keyword">and</span> <span class="keyword">not</span> shape:  </span><br><span class="line">    dtype = dtypes.int32  </span><br><span class="line">  <span class="keyword">else</span>:  </span><br><span class="line">    dtype = <span class="keyword">None</span>  </span><br><span class="line">  <span class="keyword">return</span> ops.convert_to_tensor(shape, dtype=dtype, name=<span class="string">"shape"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># pylint: disable=protected-access  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_normal</span><span class="params">(shape,  </span></span></span><br><span class="line"><span class="function"><span class="params">                  mean=<span class="number">0.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                  stddev=<span class="number">1.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                  dtype=dtypes.float32,  </span></span></span><br><span class="line"><span class="function"><span class="params">                  seed=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                  name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Outputs random values from a normal distribution. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output tensor. </span></span><br><span class="line"><span class="string">    mean: A 0-D Tensor or Python value of type `dtype`. The mean of the normal </span></span><br><span class="line"><span class="string">      distribution. </span></span><br><span class="line"><span class="string">    stddev: A 0-D Tensor or Python value of type `dtype`. The standard deviation </span></span><br><span class="line"><span class="string">      of the normal distribution. </span></span><br><span class="line"><span class="string">    dtype: The type of the output. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for the operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A tensor of the specified shape filled with random normal values. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"random_normal"</span>, [shape, mean, stddev]) <span class="keyword">as</span> name:  </span><br><span class="line">    shape_tensor = _ShapeTensor(shape)  </span><br><span class="line">    mean_tensor = ops.convert_to_tensor(mean, dtype=dtype, name=<span class="string">"mean"</span>)  </span><br><span class="line">    stddev_tensor = ops.convert_to_tensor(stddev, dtype=dtype, name=<span class="string">"stddev"</span>)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    rnd = gen_random_ops._random_standard_normal(  </span><br><span class="line">        shape_tensor, dtype, seed=seed1, seed2=seed2)  </span><br><span class="line">    mul = rnd * stddev_tensor  </span><br><span class="line">    value = math_ops.add(mul, mean_tensor, name=name)  </span><br><span class="line">    <span class="keyword">return</span> value  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"RandomStandardNormal"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameterized_truncated_normal</span><span class="params">(shape,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   means=<span class="number">0.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   stddevs=<span class="number">1.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   minvals=<span class="number">-2.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   maxvals=<span class="number">2.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   dtype=dtypes.float32,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   seed=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                                   name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Outputs random values from a truncated normal distribution. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  The generated values follow a normal distribution with specified mean and </span></span><br><span class="line"><span class="string">  standard deviation, except that values whose magnitude is more than 2 standard </span></span><br><span class="line"><span class="string">  deviations from the mean are dropped and re-picked. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output tensor. </span></span><br><span class="line"><span class="string">    means: A 0-D Tensor or Python value of type `dtype`. The mean of the </span></span><br><span class="line"><span class="string">      truncated normal distribution. </span></span><br><span class="line"><span class="string">    stddevs: A 0-D Tensor or Python value of type `dtype`. The standard </span></span><br><span class="line"><span class="string">      deviation of the truncated normal distribution. </span></span><br><span class="line"><span class="string">    minvals: A 0-D Tensor or Python value of type `dtype`. The minimum value of </span></span><br><span class="line"><span class="string">      the truncated normal distribution. </span></span><br><span class="line"><span class="string">    maxvals: A 0-D Tensor or Python value of type `dtype`. The maximum value of </span></span><br><span class="line"><span class="string">      the truncated normal distribution. </span></span><br><span class="line"><span class="string">    dtype: The type of the output. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for the operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A tensor of the specified shape filled with random truncated normal values. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"parameterized_truncated_normal"</span>,  </span><br><span class="line">                      [shape, means, stddevs, minvals, maxvals]) <span class="keyword">as</span> name:  </span><br><span class="line">    shape_tensor = _ShapeTensor(shape)  </span><br><span class="line">    means_tensor = ops.convert_to_tensor(means, dtype=dtype, name=<span class="string">"means"</span>)  </span><br><span class="line">    stddevs_tensor = ops.convert_to_tensor(stddevs, dtype=dtype, name=<span class="string">"stddevs"</span>)  </span><br><span class="line">    minvals_tensor = ops.convert_to_tensor(minvals, dtype=dtype, name=<span class="string">"minvals"</span>)  </span><br><span class="line">    maxvals_tensor = ops.convert_to_tensor(maxvals, dtype=dtype, name=<span class="string">"maxvals"</span>)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    rnd = gen_random_ops._parameterized_truncated_normal(  </span><br><span class="line">        shape_tensor,  </span><br><span class="line">        means_tensor,  </span><br><span class="line">        stddevs_tensor,  </span><br><span class="line">        minvals_tensor,  </span><br><span class="line">        maxvals_tensor,  </span><br><span class="line">        seed=seed1,  </span><br><span class="line">        seed2=seed2)  </span><br><span class="line">    <span class="keyword">return</span> rnd  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">truncated_normal</span><span class="params">(shape,  </span></span></span><br><span class="line"><span class="function"><span class="params">                     mean=<span class="number">0.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                     stddev=<span class="number">1.0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                     dtype=dtypes.float32,  </span></span></span><br><span class="line"><span class="function"><span class="params">                     seed=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                     name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Outputs random values from a truncated normal distribution. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  The generated values follow a normal distribution with specified mean and </span></span><br><span class="line"><span class="string">  standard deviation, except that values whose magnitude is more than 2 standard </span></span><br><span class="line"><span class="string">  deviations from the mean are dropped and re-picked. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output tensor. </span></span><br><span class="line"><span class="string">    mean: A 0-D Tensor or Python value of type `dtype`. The mean of the </span></span><br><span class="line"><span class="string">      truncated normal distribution. </span></span><br><span class="line"><span class="string">    stddev: A 0-D Tensor or Python value of type `dtype`. The standard deviation </span></span><br><span class="line"><span class="string">      of the truncated normal distribution. </span></span><br><span class="line"><span class="string">    dtype: The type of the output. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for the operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A tensor of the specified shape filled with random truncated normal values. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"truncated_normal"</span>, [shape, mean, stddev]) <span class="keyword">as</span> name:  </span><br><span class="line">    shape_tensor = _ShapeTensor(shape)  </span><br><span class="line">    mean_tensor = ops.convert_to_tensor(mean, dtype=dtype, name=<span class="string">"mean"</span>)  </span><br><span class="line">    stddev_tensor = ops.convert_to_tensor(stddev, dtype=dtype, name=<span class="string">"stddev"</span>)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    rnd = gen_random_ops._truncated_normal(  </span><br><span class="line">        shape_tensor, dtype, seed=seed1, seed2=seed2)  </span><br><span class="line">    mul = rnd * stddev_tensor  </span><br><span class="line">    value = math_ops.add(mul, mean_tensor, name=name)  </span><br><span class="line">    <span class="keyword">return</span> value  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"ParameterizedTruncatedNormal"</span>)  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"TruncatedNormal"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_uniform</span><span class="params">(shape,  </span></span></span><br><span class="line"><span class="function"><span class="params">                   minval=<span class="number">0</span>,  </span></span></span><br><span class="line"><span class="function"><span class="params">                   maxval=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                   dtype=dtypes.float32,  </span></span></span><br><span class="line"><span class="function"><span class="params">                   seed=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                   name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Outputs random values from a uniform distribution. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  The generated values follow a uniform distribution in the range </span></span><br><span class="line"><span class="string">  `[minval, maxval)`. The lower bound `minval` is included in the range, while </span></span><br><span class="line"><span class="string">  the upper bound `maxval` is excluded. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must </span></span><br><span class="line"><span class="string">  be specified explicitly. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  In the integer case, the random integers are slightly biased unless </span></span><br><span class="line"><span class="string">  `maxval - minval` is an exact power of two.  The bias is small for values of </span></span><br><span class="line"><span class="string">  `maxval - minval` significantly smaller than the range of the output (either </span></span><br><span class="line"><span class="string">  `2**32` or `2**64`). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output tensor. </span></span><br><span class="line"><span class="string">    minval: A 0-D Tensor or Python value of type `dtype`. The lower bound on the </span></span><br><span class="line"><span class="string">      range of random values to generate.  Defaults to 0. </span></span><br><span class="line"><span class="string">    maxval: A 0-D Tensor or Python value of type `dtype`. The upper bound on </span></span><br><span class="line"><span class="string">      the range of random values to generate.  Defaults to 1 if `dtype` is </span></span><br><span class="line"><span class="string">      floating point. </span></span><br><span class="line"><span class="string">    dtype: The type of the output: `float32`, `float64`, `int32`, or `int64`. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for the operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A tensor of the specified shape filled with random uniform values. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Raises: </span></span><br><span class="line"><span class="string">    ValueError: If `dtype` is integral and `maxval` is not specified. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  dtype = dtypes.as_dtype(dtype)  </span><br><span class="line">  <span class="keyword">if</span> maxval <span class="keyword">is</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">if</span> dtype.is_integer:  </span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">"Must specify maxval for integer dtype %r"</span> % dtype)  </span><br><span class="line">    maxval = <span class="number">1</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"random_uniform"</span>, [shape, minval, maxval]) <span class="keyword">as</span> name:  </span><br><span class="line">    shape = _ShapeTensor(shape)  </span><br><span class="line">    minval = ops.convert_to_tensor(minval, dtype=dtype, name=<span class="string">"min"</span>)  </span><br><span class="line">    maxval = ops.convert_to_tensor(maxval, dtype=dtype, name=<span class="string">"max"</span>)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    <span class="keyword">if</span> dtype.is_integer:  </span><br><span class="line">      <span class="keyword">return</span> gen_random_ops._random_uniform_int(  </span><br><span class="line">          shape, minval, maxval, seed=seed1, seed2=seed2, name=name)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">      rnd = gen_random_ops._random_uniform(  </span><br><span class="line">          shape, dtype, seed=seed1, seed2=seed2)  </span><br><span class="line">      <span class="keyword">return</span> math_ops.add(rnd * (maxval - minval), minval, name=name)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"RandomUniform"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_shuffle</span><span class="params">(value, seed=None, name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Randomly shuffles a tensor along its first dimension. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  The tensor is shuffled along dimension 0, such that each `value[j]` is mapped </span></span><br><span class="line"><span class="string">  to one and only one `output[i]`. For example, a mapping that might occur for a </span></span><br><span class="line"><span class="string">  3x2 tensor is: </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  ```python </span></span><br><span class="line"><span class="string">  [[1, 2],       [[5, 6], </span></span><br><span class="line"><span class="string">   [3, 4],  ==&gt;   [1, 2], </span></span><br><span class="line"><span class="string">   [5, 6]]        [3, 4]] </span></span><br><span class="line"><span class="string">  ``` </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    value: A Tensor to be shuffled. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for the operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A tensor of same shape and type as `value`, shuffled along its first </span></span><br><span class="line"><span class="string">    dimension. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">  <span class="keyword">return</span> gen_random_ops._random_shuffle(  </span><br><span class="line">      value, seed=seed1, seed2=seed2, name=name)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_crop</span><span class="params">(value, size, seed=None, name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Randomly crops a tensor to a given size. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Slices a shape `size` portion out of `value` at a uniformly chosen offset. </span></span><br><span class="line"><span class="string">  Requires `value.shape &gt;= size`. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  If a dimension should not be cropped, pass the full size of that dimension. </span></span><br><span class="line"><span class="string">  For example, RGB images can be cropped with </span></span><br><span class="line"><span class="string">  `size = [crop_height, crop_width, 3]`. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    value: Input tensor to crop. </span></span><br><span class="line"><span class="string">    size: 1-D tensor with size the rank of `value`. </span></span><br><span class="line"><span class="string">    seed: Python integer. Used to create a random seed. See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: A name for this operation (optional). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    A cropped tensor of the same rank as `value` and shape `size`. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="comment"># TODO(shlens): Implement edge case to guarantee output size dimensions.  </span></span><br><span class="line">  <span class="comment"># If size &gt; value.shape, zero pad the result so that it always has shape  </span></span><br><span class="line">  <span class="comment"># exactly size.  </span></span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"random_crop"</span>, [value, size]) <span class="keyword">as</span> name:  </span><br><span class="line">    value = ops.convert_to_tensor(value, name=<span class="string">"value"</span>)  </span><br><span class="line">    size = ops.convert_to_tensor(size, dtype=dtypes.int32, name=<span class="string">"size"</span>)  </span><br><span class="line">    shape = array_ops.shape(value)  </span><br><span class="line">    check = control_flow_ops.Assert(  </span><br><span class="line">        math_ops.reduce_all(shape &gt;= size),  </span><br><span class="line">        [<span class="string">"Need value.shape &gt;= size, got "</span>, shape, size],  </span><br><span class="line">        summarize=<span class="number">1000</span>)  </span><br><span class="line">    shape = control_flow_ops.with_dependencies([check], shape)  </span><br><span class="line">    limit = shape - size + <span class="number">1</span>  </span><br><span class="line">    offset = random_uniform(  </span><br><span class="line">        array_ops.shape(shape),  </span><br><span class="line">        dtype=size.dtype,  </span><br><span class="line">        maxval=size.dtype.max,  </span><br><span class="line">        seed=seed) % limit  </span><br><span class="line">    <span class="keyword">return</span> array_ops.slice(value, offset, size, name=name)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multinomial</span><span class="params">(logits, num_samples, seed=None, name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Draws samples from a multinomial distribution. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Example: </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  ```python </span></span><br><span class="line"><span class="string">  # samples has shape [1, 5], where each value is either 0 or 1 with equal </span></span><br><span class="line"><span class="string">  # probability. </span></span><br><span class="line"><span class="string">  samples = tf.multinomial(tf.log([[10., 10.]]), 5) </span></span><br><span class="line"><span class="string">  ``` </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    logits: 2-D Tensor with shape `[batch_size, num_classes]`.  Each slice </span></span><br><span class="line"><span class="string">      `[i, :]` represents the log-odds for all classes. </span></span><br><span class="line"><span class="string">    num_samples: 0-D.  Number of independent samples to draw for each row slice. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distribution. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: Optional name for the operation. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    The drawn samples of shape `[batch_size, num_samples]`. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"multinomial"</span>, [logits]):  </span><br><span class="line">    logits = ops.convert_to_tensor(logits, name=<span class="string">"logits"</span>)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    <span class="keyword">return</span> gen_random_ops.multinomial(  </span><br><span class="line">        logits, num_samples, seed=seed1, seed2=seed2)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"Multinomial"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_gamma</span><span class="params">(shape,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 alpha,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 beta=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 dtype=dtypes.float32,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 seed=None,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Draws `shape` samples from each of the given Gamma distribution(s). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  `alpha` is the shape parameter describing the distribution(s), and `beta` is </span></span><br><span class="line"><span class="string">  the inverse scale parameter(s). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Example: </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    samples = tf.random_gamma([10], [0.5, 1.5]) </span></span><br><span class="line"><span class="string">    # samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents </span></span><br><span class="line"><span class="string">    # the samples drawn from each distribution </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    samples = tf.random_gamma([7, 5], [0.5, 1.5]) </span></span><br><span class="line"><span class="string">    # samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1] </span></span><br><span class="line"><span class="string">    # represents the 7x5 samples drawn from each of the two distributions </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    samples = tf.random_gamma([30], [[1.],[3.],[5.]], beta=[[3., 4.]]) </span></span><br><span class="line"><span class="string">    # samples has shape [30, 3, 2], with 30 samples each of 3x2 distributions. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Note: Because internal calculations are done using `float64` and casting has </span></span><br><span class="line"><span class="string">    `floor` semantics, we must manually map zero outcomes to the smallest </span></span><br><span class="line"><span class="string">    possible positive floating-point value, i.e., `np.finfo(dtype).tiny`.  This </span></span><br><span class="line"><span class="string">    means that `np.finfo(dtype).tiny` occurs more frequently than it otherwise </span></span><br><span class="line"><span class="string">    should.  This bias can only happen for small values of `alpha`, i.e., </span></span><br><span class="line"><span class="string">    `alpha &lt;&lt; 1` or large values of `beta`, i.e., `beta &gt;&gt; 1`. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output samples </span></span><br><span class="line"><span class="string">      to be drawn per alpha/beta-parameterized distribution. </span></span><br><span class="line"><span class="string">    alpha: A Tensor or Python value or N-D array of type `dtype`. `alpha` </span></span><br><span class="line"><span class="string">      provides the shape parameter(s) describing the gamma distribution(s) to </span></span><br><span class="line"><span class="string">      sample. Must be broadcastable with `beta`. </span></span><br><span class="line"><span class="string">    beta: A Tensor or Python value or N-D array of type `dtype`. Defaults to 1. </span></span><br><span class="line"><span class="string">      `beta` provides the inverse scale parameter(s) of the gamma </span></span><br><span class="line"><span class="string">      distribution(s) to sample. Must be broadcastable with `alpha`. </span></span><br><span class="line"><span class="string">    dtype: The type of alpha, beta, and the output: `float16`, `float32`, or </span></span><br><span class="line"><span class="string">      `float64`. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distributions. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: Optional name for the operation. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    samples: a `Tensor` of shape `tf.concat(shape, tf.shape(alpha + beta))` </span></span><br><span class="line"><span class="string">      with values of type `dtype`. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"random_gamma"</span>, [shape, alpha, beta]):  </span><br><span class="line">    shape = ops.convert_to_tensor(shape, name=<span class="string">"shape"</span>, dtype=dtypes.int32)  </span><br><span class="line">    alpha = ops.convert_to_tensor(alpha, name=<span class="string">"alpha"</span>, dtype=dtype)  </span><br><span class="line">    beta = ops.convert_to_tensor(  </span><br><span class="line">        beta <span class="keyword">if</span> beta <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="number">1</span>, name=<span class="string">"beta"</span>, dtype=dtype)  </span><br><span class="line">    alpha_broadcast = alpha + array_ops.zeros_like(beta)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    <span class="keyword">return</span> math_ops.maximum(  </span><br><span class="line">        np.finfo(dtype.as_numpy_dtype).tiny,  </span><br><span class="line">        gen_random_ops._random_gamma(  </span><br><span class="line">            shape, alpha_broadcast, seed=seed1, seed2=seed2) / beta)  </span><br><span class="line">  </span><br><span class="line">ops.NotDifferentiable(<span class="string">"RandomGamma"</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_poisson</span><span class="params">(lam, shape, dtype=dtypes.float32, seed=None, name=None)</span>:</span>  </span><br><span class="line">  <span class="string">"""Draws `shape` samples from each of the given Poisson distribution(s). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  `lam` is the rate parameter describing the distribution(s). </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Example: </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    samples = tf.random_poisson([0.5, 1.5], [10]) </span></span><br><span class="line"><span class="string">    # samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents </span></span><br><span class="line"><span class="string">    # the samples drawn from each distribution </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    samples = tf.random_poisson([12.2, 3.3], [7, 5]) </span></span><br><span class="line"><span class="string">    # samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1] </span></span><br><span class="line"><span class="string">    # represents the 7x5 samples drawn from each of the two distributions </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Args: </span></span><br><span class="line"><span class="string">    lam: A Tensor or Python value or N-D array of type `dtype`. </span></span><br><span class="line"><span class="string">      `lam` provides the rate parameter(s) describing the poisson </span></span><br><span class="line"><span class="string">      distribution(s) to sample. </span></span><br><span class="line"><span class="string">    shape: A 1-D integer Tensor or Python array. The shape of the output samples </span></span><br><span class="line"><span class="string">      to be drawn per "rate"-parameterized distribution. </span></span><br><span class="line"><span class="string">    dtype: The type of `lam` and the output: `float16`, `float32`, or </span></span><br><span class="line"><span class="string">      `float64`. </span></span><br><span class="line"><span class="string">    seed: A Python integer. Used to create a random seed for the distributions. </span></span><br><span class="line"><span class="string">      See </span></span><br><span class="line"><span class="string">      @&#123;tf.set_random_seed&#125; </span></span><br><span class="line"><span class="string">      for behavior. </span></span><br><span class="line"><span class="string">    name: Optional name for the operation. </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Returns: </span></span><br><span class="line"><span class="string">    samples: a `Tensor` of shape `tf.concat(shape, tf.shape(lam))` with </span></span><br><span class="line"><span class="string">      values of type `dtype`. </span></span><br><span class="line"><span class="string">  """</span>  </span><br><span class="line">  <span class="keyword">with</span> ops.name_scope(name, <span class="string">"random_poisson"</span>, [lam, shape]):  </span><br><span class="line">    lam = ops.convert_to_tensor(lam, name=<span class="string">"lam"</span>, dtype=dtype)  </span><br><span class="line">    shape = ops.convert_to_tensor(shape, name=<span class="string">"shape"</span>, dtype=dtypes.int32)  </span><br><span class="line">    seed1, seed2 = random_seed.get_seed(seed)  </span><br><span class="line">    <span class="keyword">return</span> gen_random_ops._random_poisson(shape, lam, seed=seed1, seed2=seed2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随机数函数-tf-random-normal-amp-tf-random-uniform-amp-tf-truncated-normal-amp-tf-random-shuffle&quot;&gt;&lt;a href=&quot;#随机数函数-tf-random-normal-amp-tf-
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tf.random*" scheme="http://yoursite.com/tags/tf-random/"/>
    
  </entry>
  
  <entry>
    <title>Python屏蔽警告方法</title>
    <link href="http://yoursite.com/2018/05/01/python/Python%E5%B1%8F%E8%94%BD%E8%AD%A6%E5%91%8A%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/01/python/Python屏蔽警告方法/</id>
    <published>2018-05-01T11:51:27.000Z</published>
    <updated>2018-05-06T04:52:09.375Z</updated>
    
    <content type="html"><![CDATA[<p>只需要在相应的.py文件头这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.environ[&apos;TF_CPP_MIN_LOG_LEVEL&apos;]=&apos;2&apos;</span><br><span class="line">import tensorflow as tf</span><br></pre></td></tr></table></figure></p><p>然后就没有问题啦～</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'1'</span> <span class="comment"># 这是默认的显示等级，显示所有信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2级</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'2'</span> <span class="comment"># 只显示 warning 和 Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3级</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="string">'3'</span> <span class="comment"># 只显示 Error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只需要在相应的.py文件头这样写：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Python技巧" scheme="http://yoursite.com/tags/Python%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>欢迎光临，BLOG刚弄不久正在施工 文章陆续上传中...</title>
    <link href="http://yoursite.com/2018/04/29/OTHERS/%E7%BD%AE%E9%A1%B6%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2018/04/29/OTHERS/置顶信息/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-04T04:39:25.923Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>4线性方程求解</title>
    <link href="http://yoursite.com/2018/04/29/math/linear_algebra/4%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/29/math/linear_algebra/4线性方程求解/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-03T13:31:39.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性方程求解方法"><a href="#线性方程求解方法" class="headerlink" title="线性方程求解方法"></a>线性方程求解方法</h1><h2 id="Gauss消去法"><a href="#Gauss消去法" class="headerlink" title="Gauss消去法"></a>Gauss消去法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-18-09.png" alt=""><br>1转化为（同解）的三角形方程组<br>2化阶梯形矩阵 且 要保证解不变，所以需要组成增广阵再进行 初等行变换（同解变换）<br>实际过程就是一行一行消元，用上面行消去下面行第一个项，有利于解出最后一个回代</p><p>举例：<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-06.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-18.png" alt=""><br>适用性：<br>系数矩阵A规模比较小的，否则很慢<br>系数矩阵A是非奇异的，否则没有唯一解</p><h2 id="Jacobi迭代法"><a href="#Jacobi迭代法" class="headerlink" title="Jacobi迭代法"></a>Jacobi迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-23-45.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-05.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-14.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-21.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-35.png" alt=""></p><h3 id="雅克比迭代法矩阵描述"><a href="#雅克比迭代法矩阵描述" class="headerlink" title="雅克比迭代法矩阵描述"></a>雅克比迭代法矩阵描述</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-30.png" alt=""></p><h3 id="矩阵迭代公式"><a href="#矩阵迭代公式" class="headerlink" title="矩阵迭代公式"></a>矩阵迭代公式</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-46.png" alt=""><br>DX = (L+U)X + b<br>L和U都没更新，写在右边<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-14.png" alt=""></p><h2 id="Gauss-Seildel迭代法"><a href="#Gauss-Seildel迭代法" class="headerlink" title="Gauss-Seildel迭代法"></a>Gauss-Seildel迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-47.png" alt=""><br>及时更新下半三角系数的迭代</p><h3 id="矩阵迭代公式一"><a href="#矩阵迭代公式一" class="headerlink" title="矩阵迭代公式一"></a>矩阵迭代公式一</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-19.png" alt=""><br>(D-L)X = UX + b<br>只有上半部的U没更新，写在右边</p><h3 id="矩阵迭代公式二"><a href="#矩阵迭代公式二" class="headerlink" title="矩阵迭代公式二"></a>矩阵迭代公式二</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-39.png" alt=""><br>这样D的逆更方便求出来</p><h2 id="迭代法的收敛"><a href="#迭代法的收敛" class="headerlink" title="迭代法的收敛"></a>迭代法的收敛</h2><p>严格对角占优矩阵<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-28-47.png" alt=""></p><p>定义：对角线元素的绝对值和 &gt; 其所在 行/列 元素的绝对值和 的矩阵</p><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-29-02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性方程求解方法&quot;&gt;&lt;a href=&quot;#线性方程求解方法&quot; class=&quot;headerlink&quot; title=&quot;线性方程求解方法&quot;&gt;&lt;/a&gt;线性方程求解方法&lt;/h1&gt;&lt;h2 id=&quot;Gauss消去法&quot;&gt;&lt;a href=&quot;#Gauss消去法&quot; class=&quot;head
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>anaconda安装命令整理</title>
    <link href="http://yoursite.com/2018/04/25/anaconda/anaconda%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/25/anaconda/anaconda安装命令整理/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-05-03T04:00:06.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装命令整理"><a href="#安装命令整理" class="headerlink" title="安装命令整理"></a>安装命令整理</h1><h2 id="Tensorflow-安装（以windows版本为例）"><a href="#Tensorflow-安装（以windows版本为例）" class="headerlink" title="Tensorflow 安装（以windows版本为例）"></a>Tensorflow 安装（以windows版本为例）</h2><p>S1. 查找所有Tensorflow版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda search -t conda tensorflow</span><br></pre></td></tr></table></figure></p><p>找到windows版本<br><img src="/2018/04/25/anaconda/anaconda安装命令整理/2018-04-25-14-17-21.png" alt=""><br>S2. 显示该版本的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda show dhirschfeld/tensorflow</span><br></pre></td></tr></table></figure></p><p>S3. 使用所提示的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --channel https://conda.anaconda.org/dhirschfeld tensorflow</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装命令整理&quot;&gt;&lt;a href=&quot;#安装命令整理&quot; class=&quot;headerlink&quot; title=&quot;安装命令整理&quot;&gt;&lt;/a&gt;安装命令整理&lt;/h1&gt;&lt;h2 id=&quot;Tensorflow-安装（以windows版本为例）&quot;&gt;&lt;a href=&quot;#Tensorflow
      
    
    </summary>
    
      <category term="anaconda" scheme="http://yoursite.com/categories/anaconda/"/>
    
    
      <category term="anaconda" scheme="http://yoursite.com/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>jupyter设置</title>
    <link href="http://yoursite.com/2018/04/25/anaconda/jupyter%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/25/anaconda/jupyter设置/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-05-03T03:45:08.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更改启动目录"><a href="#更改启动目录" class="headerlink" title="更改启动目录"></a>更改启动目录</h2><p>右键jupyter notebook快捷方式属性，把“目标”属性最后的变量改为自己的路径，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\\Users\\lenovo\\Desktop\\Python WORK SPACE\\&quot;</span><br></pre></td></tr></table></figure></p><p>注意前面一个空格要保留</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;更改启动目录&quot;&gt;&lt;a href=&quot;#更改启动目录&quot; class=&quot;headerlink&quot; title=&quot;更改启动目录&quot;&gt;&lt;/a&gt;更改启动目录&lt;/h2&gt;&lt;p&gt;右键jupyter notebook快捷方式属性，把“目标”属性最后的变量改为自己的路径，如下：&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="anaconda" scheme="http://yoursite.com/categories/anaconda/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2018/04/24/hexo/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/24/hexo/markdown语法/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-04-24T15:35:19.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><p>空格：输入法全角状态下space</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;markdown语法&quot;&gt;&lt;a href=&quot;#markdown语法&quot; class=&quot;headerlink&quot; title=&quot;markdown语法&quot;&gt;&lt;/a&gt;markdown语法&lt;/h2&gt;&lt;p&gt;空格：输入法全角状态下space&lt;/p&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>2模型评估与选择</title>
    <link href="http://yoursite.com/2018/04/21/machine_learning_theory/2%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2018/04/21/machine_learning_theory/2模型评估与选择/</id>
    <published>2018-04-21T04:49:42.000Z</published>
    <updated>2018-05-04T07:56:59.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><h3 id="二分类任务的-混淆矩阵-和-其衍生的度量指标"><a href="#二分类任务的-混淆矩阵-和-其衍生的度量指标" class="headerlink" title="二分类任务的 混淆矩阵 和 其衍生的度量指标"></a>二分类任务的 混淆矩阵 和 其衍生的度量指标</h3><p><img src="/2018/04/21/machine_learning_theory/2模型评估与选择/2018-05-04-14-38-40.png" alt=""></p><p>True Positive  （真正, TP） 被模型预测为正样本，是真的判断正确。所以就是正样本，也称作正的数。</p><p>True Negative（真负 , TN）被模型判断为负样本，是真的判断正确。所以就是负样本，也称作负的数。</p><p>False Positive  （假正, FP）被模型判断为正样本，是假的判断错误。所以应该是负样本，也称作误报数。</p><p>False Negative（假负 , FN）被模型判断为负样本，是假的判断错误。所以应该是正样本，也称作漏报数。</p><h4 id="1）常用的3个指标（多用于交叉验证）"><a href="#1）常用的3个指标（多用于交叉验证）" class="headerlink" title="1）常用的3个指标（多用于交叉验证）"></a>1）常用的3个指标（多用于交叉验证）</h4><ul><li>accuracy（准确率）——检验模型预测的正确率<script type="math/tex; mode=display">A=\frac {TP+TN}{ALL}</script></li></ul><p>预测正确个数/全部样本数</p><ul><li>precision（精确率）——检验模型预测正例的正确率<script type="math/tex; mode=display">P=\frac {TP}{TP+FP}</script></li></ul><p>预测正确的正样本数 / 预测为的正样本数</p><ul><li>recall/TPR（召回率/真正率）——检验模型正例预测的全面性<script type="math/tex; mode=display">R\ /\ TPR=\frac {TP}{TP+FN}</script></li></ul><p>预测正确的正样本数 / 真实的正样本数</p><h4 id="2）不常用的3个指标（多用于绘图）"><a href="#2）不常用的3个指标（多用于绘图）" class="headerlink" title="2）不常用的3个指标（多用于绘图）"></a>2）不常用的3个指标（多用于绘图）</h4><ul><li>specificity（特异性/真负率）——检验模型负例预测的正确率<script type="math/tex; mode=display">S=\frac {TN}{TN+FP}</script></li></ul><p>预测正确的负样本数 / 真实的负样本数</p><ul><li>FPR（假正率）——用于和TPR一起绘制ROC曲线<script type="math/tex; mode=display">FPR=\frac {FP}{TN+FP}</script></li></ul><p>预测错误的正样本数 / 真实的负样本数</p><ul><li>FNR（假负率）——用的少 <script type="math/tex; mode=display">FNR=\frac {FN}{TP+FN}</script></li></ul><p>预测错误的负样本数 / 真实的正样本数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性能度量&quot;&gt;&lt;a href=&quot;#性能度量&quot; class=&quot;headerlink&quot; title=&quot;性能度量&quot;&gt;&lt;/a&gt;性能度量&lt;/h2&gt;&lt;h3 id=&quot;二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;&gt;&lt;a href=&quot;#二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
  </entry>
  
  <entry>
    <title>2矩阵的运算、行列式</title>
    <link href="http://yoursite.com/2018/04/20/math/linear_algebra/2%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%90%E7%AE%97%E3%80%81%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-03T13:17:23.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><p>1 矩阵乘法的具体应用<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-18-51-07.png" alt=""><br>总结：<br>A中每个元素和B中每个元素相乘是有意义的；<br>B矩阵和最终C矩阵指标数相等，相当于对应指标类元素的求和</p><h2 id="几种特殊的矩阵"><a href="#几种特殊的矩阵" class="headerlink" title="几种特殊的矩阵"></a>几种特殊的矩阵</h2><p>1.对角矩阵<br>2.数量矩阵★<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-08-14.png" alt=""><br>3.单矩阵<br>4.三角矩阵<br>5.对称矩阵</p><h2 id="分块矩阵和其运算"><a href="#分块矩阵和其运算" class="headerlink" title="分块矩阵和其运算"></a>分块矩阵和其运算</h2><p>1 简介：<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-09-25.png" alt=""><br>2 分块矩阵相加和相乘<br>A+B 和 AB<br>相加：要求每个子块矩阵有相同的行数和列数<br>相乘：要求A的列 = B的行</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>1 矩阵的行列式和他的转置的行列式相等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;矩阵的运算&quot;&gt;&lt;a href=&quot;#矩阵的运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵的运算&quot;&gt;&lt;/a&gt;矩阵的运算&lt;/h2&gt;&lt;p&gt;1 矩阵乘法的具体应用&lt;br&gt;&lt;img src=&quot;/2018/04/20/math/linear_algebra/2
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow学习6：Tensorboard网络结构</title>
    <link href="http://yoursite.com/2018/04/20/tensorflow/Tensorflow%E5%AD%A6%E4%B9%A06%EF%BC%9ATensorboard%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/04/20/tensorflow/Tensorflow学习6：Tensorboard网络结构/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-27T04:21:45.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入数据集</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个批次大小</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line"><span class="comment">#计算有多少批次</span></span><br><span class="line">batch_num = mnist.train.num_examples // batch_size</span><br><span class="line"><span class="comment"># STEP 1</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"input"</span>):</span><br><span class="line">    input_x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>], name=<span class="string">"input_x"</span>)</span><br><span class="line">    input_y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>], name=<span class="string">"input_y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建神经网络模型</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"layers"</span>):</span><br><span class="line">    W1 = tf.Variable(tf.truncated_normal([<span class="number">784</span>,<span class="number">128</span>], <span class="number">0.</span>,<span class="number">0.5</span>), name=<span class="string">"W1"</span>)</span><br><span class="line">    b1 = tf.Variable(tf.zeros([<span class="number">128</span>]) + <span class="number">0.1</span>, name=<span class="string">"b1"</span>)</span><br><span class="line">    L1 = tf.nn.relu(tf.matmul(input_x, W1) + b1, name=<span class="string">"L1"</span>)</span><br><span class="line"></span><br><span class="line">    W2 = tf.Variable(tf.truncated_normal([<span class="number">128</span>,<span class="number">10</span>], <span class="number">0.</span>,<span class="number">0.5</span>), name=<span class="string">"W2"</span>)</span><br><span class="line">    b2 = tf.Variable(tf.zeros([<span class="number">10</span>]) + <span class="number">0.1</span>, name=<span class="string">"b2"</span>)</span><br><span class="line">    L2 = tf.add(tf.matmul(L1, W2), b2, name=<span class="string">"L2"</span>)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"loss"</span>):</span><br><span class="line">    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=L2, labels=input_y))</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"train_and_optimizer"</span>):</span><br><span class="line">    train = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取用于显示的精度——优化效果</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"accuracy"</span>):</span><br><span class="line">    correct_indices = tf.equal(tf.argmax(input_y, <span class="number">1</span>), tf.argmax(L2, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_indices, tf.float32))</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="comment"># STEP 2</span></span><br><span class="line">    writer = tf.summary.FileWriter(<span class="string">"D:/Tensorboard/logs"</span>, sess.graph)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(batch_num):</span><br><span class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(train, feed_dict=&#123;input_x:batch_xs, input_y:batch_ys&#125;)</span><br><span class="line">        _accuracy = sess.run(accuracy, feed_dict=&#123;input_x:mnist.test.images, input_y:mnist.test.labels&#125;)</span><br><span class="line">        print(<span class="string">"epoch:"</span>+ str(epoch) + <span class="string">", accuracy:"</span>+ str(_accuracy))</span><br></pre></td></tr></table></figure><pre><code>Extracting MNIST_data\train-images-idx3-ubyte.gzExtracting MNIST_data\train-labels-idx1-ubyte.gzExtracting MNIST_data\t10k-images-idx3-ubyte.gzExtracting MNIST_data\t10k-labels-idx1-ubyte.gzepoch:0, accuracy:0.909epoch:1, accuracy:0.9272epoch:2, accuracy:0.9358epoch:3, accuracy:0.942epoch:4, accuracy:0.9459</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><b>Tensorboard使用方法：</b></p><p>STEP 1:在sess外部给tensor加上命名空间name_scope 和 name。<br>name_scope对应矩形<br>name对应矩形内部的tensor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&quot;input&quot;):</span><br><span class="line">    input_x = tf.placeholder(tf.float32, [None, 784], name=&quot;input_x&quot;)</span><br><span class="line">    input_y = tf.placeholder(tf.float32, [None, 10], name=&quot;input_y&quot;)</span><br></pre></td></tr></table></figure></p><p>STEP 2:在sess内部加上打印日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer = tf.summary.FileWriter(&quot;logs&quot;, sess.graph)</span><br></pre></td></tr></table></figure></p><p>STEP 3:运行代码。<br>如果之前运行过，可以restart kernel选择“Restart &amp; Run All”</p><p>STEP 4:打开anaconda cmd，切换到log的相应盘符下，否则tensorboard无法显示。接下来输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m tensorflow.tensorboard --logdir=D:/Tensorflow/logs</span><br></pre></td></tr></table></figure></p><p>复制生成的地址在浏览器打开<br><img src="/2018/04/20/tensorflow/Tensorflow学习6：Tensorboard网络结构/Tensorflow网络结构.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="Tensorboard" scheme="http://yoursite.com/tags/Tensorboard/"/>
    
  </entry>
  
  <entry>
    <title>直线和平面方程</title>
    <link href="http://yoursite.com/2018/04/20/math/calculus/%E7%9B%B4%E7%BA%BF%E5%92%8C%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/20/math/calculus/直线和平面方程/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-04T12:56:17.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、直线"><a href="#一、直线" class="headerlink" title="一、直线"></a>一、直线</h2><p>直线方程</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>ax+by+c=0</td><td>优点：可以表示平面上的任意一条直线缺点：要确定的常数较多</td></tr><tr><td>斜截式</td><td>y=kx+b</td><td>优点：只需要斜率和截距缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>点斜式</td><td>y-y0=k(x-x0)</td><td>优点：只需要一个点和斜率缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>两点式</td><td>(y-y1)/(y2-y1)=(x-x1)/(x2-x1)</td><td>优点：只需要2个点缺点：不能表示两点x1=x2或y1=y2时的直线（即垂直或水平直线）</td></tr><tr><td>截距式</td><td>x/a+y/b=1</td><td>优点：只需要x轴截距a和y轴截距b缺点：不能表示截距为0时的直线,比如正比例直线</td></tr></tbody></table></div><h2 id="二、平面"><a href="#二、平面" class="headerlink" title="二、平面"></a>二、平面</h2><p>平面方程常用4种</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>Ax+By+Cz+D=0</td><td></td></tr><tr><td>截距式</td><td>x/a+y/b+z/c=1</td><td></td></tr><tr><td>点法式</td><td>A(x-x0)+B(y-y0)+C(z-z0)=0</td><td>向量(A,B,C)为平面的法向量</td></tr><tr><td>法线式</td><td>xcosα+ycosβ+zcosγ=p</td><td>其中cosα、cosβ、cosγ是平面法矢量的方向余弦，p为原点到平面的距离。</td></tr></tbody></table></div><p>​                                                                                 平面方程全部7种</p><p><img src="/2018/04/20/math/calculus/直线和平面方程/20180310005032167.png" alt=""><br><img src="/2018/04/20/math/calculus/直线和平面方程/2018031000522558.png" alt=""></p><h2 id="三、超平面"><a href="#三、超平面" class="headerlink" title="三、超平面"></a>三、超平面</h2><p>二维空间的超平面是一条直线，三维空间的超平面是一个平面，而N维空间的超平面则是N-1维的仿射空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、直线&quot;&gt;&lt;a href=&quot;#一、直线&quot; class=&quot;headerlink&quot; title=&quot;一、直线&quot;&gt;&lt;/a&gt;一、直线&lt;/h2&gt;&lt;p&gt;直线方程&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="calculus" scheme="http://yoursite.com/categories/math/calculus/"/>
    
    
      <category term="平面方程" scheme="http://yoursite.com/tags/%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>贷款分析</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/%E8%B4%B7%E6%AC%BE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/贷款分析/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-05-04T08:07:29.339Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans_2007 = pd.read_csv(<span class="string">'LoanStats3a.csv'</span>, skiprows=<span class="number">1</span>)</span><br><span class="line">half_count = len(loans_2007) / <span class="number">2</span></span><br><span class="line">loans_2007 = loans_2007.dropna(thresh=half_count, axis=<span class="number">1</span>)</span><br><span class="line">loans_2007 = loans_2007.drop([<span class="string">'desc'</span>, <span class="string">'url'</span>],axis=<span class="number">1</span>)</span><br><span class="line">loans_2007.to_csv(<span class="string">'loans_2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>D:\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py:2717: DtypeWarning: Columns (0,47) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans_2007 = pd.read_csv(<span class="string">"loans_2007.csv"</span>)</span><br><span class="line"><span class="comment">#loans_2007.drop_duplicates()</span></span><br><span class="line">print(loans_2007.iloc[<span class="number">0</span>].head(<span class="number">15</span>))</span><br><span class="line">print(loans_2007.shape[<span class="number">1</span>]) <span class="comment">#共52个特征</span></span><br></pre></td></tr></table></figure><pre><code>id                        1077501member_id              1.2966e+06loan_amnt                    5000funded_amnt                  5000funded_amnt_inv              4975term                    36 monthsint_rate                   10.65%installment                162.87grade                           Bsub_grade                      B2emp_title                     NaNemp_length              10+ yearshome_ownership               RENTannual_inc                  24000verification_status      VerifiedName: 0, dtype: object52D:\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py:2717: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><h2 id="预处理——数据清洗"><a href="#预处理——数据清洗" class="headerlink" title="预处理——数据清洗"></a>预处理——数据清洗</h2><p>先直观上 去掉不需要的特征。<br>包括： 1.预测后才出现的特征（比如：实际发放的贷款）、2.高度相关的特征（比如：123和ABC）、3。关系不大的特征（比如：ID等）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loans_2007 = loans_2007.drop([<span class="string">"id"</span>, <span class="string">"member_id"</span>, <span class="string">"funded_amnt"</span>, <span class="string">"funded_amnt_inv"</span>, <span class="string">"grade"</span>, <span class="string">"sub_grade"</span>, <span class="string">"emp_title"</span>, <span class="string">"issue_d"</span>], axis=<span class="number">1</span>)</span><br><span class="line">loans_2007 = loans_2007.drop([<span class="string">"zip_code"</span>, <span class="string">"out_prncp"</span>, <span class="string">"out_prncp_inv"</span>, <span class="string">"total_pymnt"</span>, <span class="string">"total_pymnt_inv"</span>, <span class="string">"total_rec_prncp"</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loans_2007 = loans_2007.drop([<span class="string">"total_rec_int"</span>, <span class="string">"total_rec_late_fee"</span>, <span class="string">"recoveries"</span>, <span class="string">"collection_recovery_fee"</span>, <span class="string">"last_pymnt_d"</span>, <span class="string">"last_pymnt_amnt"</span>], axis=<span class="number">1</span>)</span><br><span class="line">print(loans_2007.iloc[<span class="number">0</span>])</span><br><span class="line">print(loans_2007.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>loan_amnt                            5000term                            36 monthsint_rate                           10.65%installment                        162.87emp_length                      10+ yearshome_ownership                       RENTannual_inc                          24000verification_status              Verifiedloan_status                    Fully Paidpymnt_plan                              npurpose                       credit_cardtitle                            Computeraddr_state                             AZdti                                 27.65delinq_2yrs                             0earliest_cr_line                 Jan-1985inq_last_6mths                          1open_acc                                3pub_rec                                 0revol_bal                           13648revol_util                          83.7%total_acc                               9initial_list_status                     flast_credit_pull_d               Nov-2016collections_12_mths_ex_med              0policy_code                             1application_type               INDIVIDUALacc_now_delinq                          0chargeoff_within_12_mths                0delinq_amnt                             0pub_rec_bankruptcies                    0tax_liens                               0Name: 0, dtype: object32</code></pre><h2 id="预处理——label列属性数字替换"><a href="#预处理——label列属性数字替换" class="headerlink" title="预处理——label列属性数字替换"></a>预处理——label列属性数字替换</h2><p>对label属性进行统计，选择适合用于分类的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(loans_2007[<span class="string">'loan_status'</span>].value_counts())</span><br></pre></td></tr></table></figure><pre><code>Fully Paid                                             33902Charged Off                                             5658Does not meet the credit policy. Status:Fully Paid      1988Does not meet the credit policy. Status:Charged Off      761Current                                                  201Late (31-120 days)                                        10In Grace Period                                            9Late (16-30 days)                                          5Default                                                    1Name: loan_status, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性为Fully Paid 和 Charged off 的替换为 1 和 0</span></span><br><span class="line"><span class="comment"># 只取这部分数据</span></span><br><span class="line">loans_2007 = loans_2007[(loans_2007[<span class="string">'loan_status'</span>] == <span class="string">"Fully Paid"</span>) | (loans_2007[<span class="string">'loan_status'</span>] == <span class="string">"Charged Off"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换指定列的 指定属性为 指定的值★</span></span><br><span class="line">status_replace = &#123;</span><br><span class="line">    <span class="string">"loan_status"</span> : &#123;</span><br><span class="line">        <span class="string">"Fully Paid"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"Charged Off"</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loans_2007 = loans_2007.replace(status_replace)</span><br></pre></td></tr></table></figure><h2 id="预处理——最后再去掉列属性只有一个的列"><a href="#预处理——最后再去掉列属性只有一个的列" class="headerlink" title="预处理——最后再去掉列属性只有一个的列"></a>预处理——最后再去掉列属性只有一个的列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#let's look for any columns that contain only one unique value and remove them</span></span><br><span class="line"></span><br><span class="line">orig_columns = loans_2007.columns</span><br><span class="line">drop_columns = []</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> orig_columns:</span><br><span class="line">    col_series = loans_2007[col].dropna().unique() <span class="comment">#这里要去掉空值nan以后 再判定列的属性是否只有一个</span></span><br><span class="line">    <span class="keyword">if</span> len(col_series) == <span class="number">1</span>:</span><br><span class="line">        drop_columns.append(col)</span><br><span class="line">loans_2007 = loans_2007.drop(drop_columns, axis=<span class="number">1</span>)</span><br><span class="line">print(drop_columns)</span><br><span class="line">print(loans_2007.shape)</span><br><span class="line">loans_2007.to_csv(<span class="string">'filtered_loans_2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;initial_list_status&#39;, &#39;collections_12_mths_ex_med&#39;, &#39;policy_code&#39;, &#39;application_type&#39;, &#39;acc_now_delinq&#39;, &#39;chargeoff_within_12_mths&#39;, &#39;delinq_amnt&#39;, &#39;tax_liens&#39;](39560, 24)</code></pre><p>处理完毕，最终得到24列数据</p><h2 id="预处理——缺失值"><a href="#预处理——缺失值" class="headerlink" title="预处理——缺失值"></a>预处理——缺失值</h2><p>先查找列缺失值多的，去掉这些列，只剩下缺失值少的列。之后直接去掉那些样本行即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans = pd.read_csv(<span class="string">'filtered_loans_2007.csv'</span>)</span><br><span class="line">null_counts = loans.isnull().sum()</span><br><span class="line">print(null_counts)</span><br></pre></td></tr></table></figure><pre><code>loan_amnt                 0term                      0int_rate                  0installment               0emp_length                0home_ownership            0annual_inc                0verification_status       0loan_status               0pymnt_plan                0purpose                   0title                    10addr_state                0dti                       0delinq_2yrs               0earliest_cr_line          0inq_last_6mths            0open_acc                  0pub_rec                   0revol_bal                 0revol_util               50total_acc                 0last_credit_pull_d        2pub_rec_bankruptcies    697dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loans = loans.drop(<span class="string">"pub_rec_bankruptcies"</span>, axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.dropna(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>object     12float64    10int64       1dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理完缺失值，统计每种数据类型的列 有几个</span></span><br><span class="line">print(loans.dtypes.value_counts())</span><br></pre></td></tr></table></figure><h2 id="预处理——字符串值转换"><a href="#预处理——字符串值转换" class="headerlink" title="预处理——字符串值转换"></a>预处理——字符串值转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object_columns_df = loans.select_dtypes(include=[<span class="string">"object"</span>])</span><br><span class="line">print(object_columns_df.iloc[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>term                     36 monthsint_rate                    10.65%emp_length               10+ yearshome_ownership                RENTverification_status       Verifiedpymnt_plan                       npurpose                credit_cardtitle                     Computeraddr_state                      AZearliest_cr_line          Jan-1985revol_util                   83.7%last_credit_pull_d        Nov-2016Name: 0, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'home_ownership'</span>, <span class="string">'verification_status'</span>, <span class="string">'emp_length'</span>, <span class="string">'term'</span>, <span class="string">'addr_state'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cols:</span><br><span class="line">    print(loans[c].value_counts())</span><br></pre></td></tr></table></figure><pre><code>RENT        18780MORTGAGE    17574OWN          3045OTHER          96NONE            3Name: home_ownership, dtype: int64Not Verified       16856Verified           12705Source Verified     9937Name: verification_status, dtype: int6410+ years    8821&lt; 1 year     45632 years      43713 years      40744 years      34095 years      32701 year       32276 years      22127 years      17568 years      14729 years      1254n/a          1069Name: emp_length, dtype: int64 36 months    29041 60 months    10457Name: term, dtype: int64CA    7070NY    3788FL    2856TX    2714NJ    1838IL    1517PA    1504VA    1400GA    1393MA    1336OH    1208MD    1049AZ     874WA     834CO     786NC     780CT     747MI     722MO     682MN     611NV     492SC     470WI     453AL     446OR     445LA     435KY     325OK     298KS     269UT     256AR     243DC     211RI     198NM     188WV     176HI     172NH     172DE     113MT      84WY      83AK      79SD      63VT      54MS      19TN      17IN       9ID       6IA       5NE       5ME       3Name: addr_state, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这2个特征内容差不多，选择去掉title列</span></span><br><span class="line">print(loans[<span class="string">"purpose"</span>].value_counts())</span><br><span class="line">print(loans[<span class="string">"title"</span>].value_counts())</span><br></pre></td></tr></table></figure><pre><code>debt_consolidation    18533credit_card            5099other                  3963home_improvement       2965major_purchase         2181small_business         1815car                    1544wedding                 945medical                 692moving                  581vacation                379house                   378educational             320renewable_energy        103Name: purpose, dtype: int64Debt Consolidation                         2168Debt Consolidation Loan                    1706Personal Loan                               658Consolidation                               509debt consolidation                          502Credit Card Consolidation                   356Home Improvement                            354Debt consolidation                          333Small Business Loan                         322Credit Card Loan                            313Personal                                    308Consolidation Loan                          255Home Improvement Loan                       246personal loan                               234personal                                    220Loan                                        212Wedding Loan                                209consolidation                               200Car Loan                                    200Other Loan                                  190Credit Card Payoff                          155Wedding                                     152Major Purchase Loan                         144Credit Card Refinance                       143Consolidate                                 127Medical                                     122Credit Card                                 117home improvement                            111My Loan                                      94Credit Cards                                 93                                           ... DebtConsolidationn                            1 Freedom                                      1Credit Card Consolidation Loan - SEG          1SOLAR PV                                      1Pay on Credit card                            1To pay off balloon payments due               1Paying off the debt                           1Payoff ING PLOC                               1Josh CC Loan                                  1House payoff                                  1Taking care of Business                       1Gluten Free Bakery in ideal town for it       1Startup Money for Small Business              1FundToFinanceCar                              1getting ready for Baby                        1Dougs Wedding Loan                            1d rock                                        1LC Loan 2                                     1swimming pool repair                          1engagement                                    1Cut the credit cards Loan                     1vinman                                        1working hard to get out of debt               1consolidate the rest of my debt               1Medical/Vacation                              12BDebtFree                                    1Paying Off High Interest Credit Cards!        1Baby on the way!                              1cart loan                                     1Consolidaton                                  1Name: title, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mapping_dict = &#123;</span><br><span class="line">    <span class="string">"emp_length"</span>: &#123;</span><br><span class="line">        <span class="string">"10+ years"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"9 years"</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">"8 years"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">"7 years"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">"6 years"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">"5 years"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">"4 years"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">"3 years"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"2 years"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"1 year"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"&lt; 1 year"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"n/a"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">loans = loans.drop([<span class="string">"last_credit_pull_d"</span>, <span class="string">"earliest_cr_line"</span>, <span class="string">"addr_state"</span>, <span class="string">"title"</span>], axis=<span class="number">1</span>)</span><br><span class="line">loans[<span class="string">"int_rate"</span>] = loans[<span class="string">"int_rate"</span>].str.rstrip(<span class="string">"%"</span>).astype(<span class="string">"float"</span>)</span><br><span class="line">loans[<span class="string">"revol_util"</span>] = loans[<span class="string">"revol_util"</span>].str.rstrip(<span class="string">"%"</span>).astype(<span class="string">"float"</span>)</span><br><span class="line">loans = loans.replace(mapping_dict)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat_columns = [<span class="string">"home_ownership"</span>, <span class="string">"verification_status"</span>, <span class="string">"emp_length"</span>, <span class="string">"purpose"</span>, <span class="string">"term"</span>]</span><br><span class="line">dummy_df = pd.get_dummies(loans[cat_columns])</span><br><span class="line">loans = pd.concat([loans, dummy_df], axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.drop(cat_columns, axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.drop(<span class="string">"pymnt_plan"</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loans.to_csv(<span class="string">'cleaned_loans2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="模型训练、评估、调参——训练目标是盈利最大化"><a href="#模型训练、评估、调参——训练目标是盈利最大化" class="headerlink" title="模型训练、评估、调参——训练目标是盈利最大化"></a>模型训练、评估、调参——训练目标是盈利最大化</h2><p>模型训练目标：<br><img src="/2018/04/19/machine_learning_in_action/贷款分析/QQ%E6%88%AA%E5%9B%BE20180425000738.jpg" alt=""><br>是确保TP的数量至少是FP的10倍。<br>然而这里不适合使用精度，故我们选择 TPR 和 FPR ，要使 TPR尽可能大， FPR 尽可能小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans = pd.read_csv(<span class="string">"cleaned_loans2007.csv"</span>)</span><br><span class="line">print(loans.info())</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 39498 entries, 0 to 39497Data columns (total 37 columns):loan_amnt                              39498 non-null float64int_rate                               39498 non-null float64installment                            39498 non-null float64annual_inc                             39498 non-null float64loan_status                            39498 non-null int64dti                                    39498 non-null float64delinq_2yrs                            39498 non-null float64inq_last_6mths                         39498 non-null float64open_acc                               39498 non-null float64pub_rec                                39498 non-null float64revol_bal                              39498 non-null float64revol_util                             39498 non-null float64total_acc                              39498 non-null float64home_ownership_MORTGAGE                39498 non-null int64home_ownership_NONE                    39498 non-null int64home_ownership_OTHER                   39498 non-null int64home_ownership_OWN                     39498 non-null int64home_ownership_RENT                    39498 non-null int64verification_status_Not Verified       39498 non-null int64verification_status_Source Verified    39498 non-null int64verification_status_Verified           39498 non-null int64purpose_car                            39498 non-null int64purpose_credit_card                    39498 non-null int64purpose_debt_consolidation             39498 non-null int64purpose_educational                    39498 non-null int64purpose_home_improvement               39498 non-null int64purpose_house                          39498 non-null int64purpose_major_purchase                 39498 non-null int64purpose_medical                        39498 non-null int64purpose_moving                         39498 non-null int64purpose_other                          39498 non-null int64purpose_renewable_energy               39498 non-null int64purpose_small_business                 39498 non-null int64purpose_vacation                       39498 non-null int64purpose_wedding                        39498 non-null int64term_ 36 months                        39498 non-null int64term_ 60 months                        39498 non-null int64dtypes: float64(12), int64(25)memory usage: 11.1 MBNone</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">cols = loans.columns</span><br><span class="line">train_cols = cols.drop(<span class="string">"loan_status"</span>)</span><br><span class="line">features = loans[train_cols]</span><br><span class="line">target = loans[<span class="string">"loan_status"</span>]</span><br><span class="line">lr.fit(features, target)</span><br><span class="line">predictions = lr.predict(features)</span><br></pre></td></tr></table></figure><h3 id="第一次，逻辑回归"><a href="#第一次，逻辑回归" class="headerlink" title="第一次，逻辑回归"></a>第一次，逻辑回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict, KFold</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br><span class="line"><span class="keyword">print</span> predictions[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>0.9990844384060.9980492995210     11     12     13     14     15     16     17     18     19     110    111    112    113    114    115    116    117    118    119    1dtype: int64</code></pre><p>因为样本不均衡导致效果不好。</p><h3 id="第二次，逻辑回归，设置模型参数-class-weight-”balanced”-，让模型自动添加惩罚权重"><a href="#第二次，逻辑回归，设置模型参数-class-weight-”balanced”-，让模型自动添加惩罚权重" class="headerlink" title="第二次，逻辑回归，设置模型参数 class_weight=”balanced” ，让模型自动添加惩罚权重"></a>第二次，逻辑回归，设置模型参数 class_weight=”balanced” ，让模型自动添加惩罚权重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">lr = LogisticRegression(class_weight=<span class="string">"balanced"</span>)</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br><span class="line"><span class="keyword">print</span> predictions[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>0.6707817714640.4007802801920     11     02     03     14     15     06     07     08     09     010    111    012    113    114    015    016    117    118    119    0dtype: int64</code></pre><p>模型终于起了效果，但还是不理想</p><h3 id="第三次，逻辑回归，手动调节-cclass-weight-参数设置惩罚系数"><a href="#第三次，逻辑回归，手动调节-cclass-weight-参数设置惩罚系数" class="headerlink" title="第三次，逻辑回归，手动调节 cclass_weight 参数设置惩罚系数"></a>第三次，逻辑回归，手动调节 cclass_weight 参数设置惩罚系数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">penalty = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression(class_weight=penalty)</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br></pre></td></tr></table></figure><pre><code>0.7317995215450.478985635751</code></pre><p>效果又好了一些</p><h3 id="第四次，随机森林"><a href="#第四次，随机森林" class="headerlink" title="第四次，随机森林"></a>第四次，随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">rf = RandomForestClassifier(n_estimators=<span class="number">10</span>,class_weight=<span class="string">"balanced"</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#print help(RandomForestClassifier)</span></span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(rf, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="pandas列属性数字替换" scheme="http://yoursite.com/tags/pandas%E5%88%97%E5%B1%9E%E6%80%A7%E6%95%B0%E5%AD%97%E6%9B%BF%E6%8D%A2/"/>
    
      <category term="pandas缺失值处理" scheme="http://yoursite.com/tags/pandas%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PCA 手写主成分分析</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/PCA%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/PCA主成分分析/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-24T07:12:55.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PCA-手写主成分分析"><a href="#PCA-手写主成分分析" class="headerlink" title="PCA 手写主成分分析"></a>PCA 手写主成分分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">'iris.data'</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>5.1</th>      <th>3.5</th>      <th>1.4</th>      <th>0.2</th>      <th>Iris-setosa</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.4</td>      <td>3.9</td>      <td>1.7</td>      <td>0.4</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1 数据预处理"></a>1 数据预处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上列名</span></span><br><span class="line">df.columns=[<span class="string">'sepal_len'</span>, <span class="string">'sepal_wid'</span>, <span class="string">'petal_len'</span>, <span class="string">'petal_wid'</span>, <span class="string">'class'</span>]</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_len</th>      <th>sepal_wid</th>      <th>petal_len</th>      <th>petal_wid</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.4</td>      <td>3.9</td>      <td>1.7</td>      <td>0.4</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><h2 id="2-画图，进行降维特征分析"><a href="#2-画图，进行降维特征分析" class="headerlink" title="2 画图，进行降维特征分析"></a>2 画图，进行降维特征分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split data table into data X and class labels y</span></span><br><span class="line"></span><br><span class="line">X = df.iloc[:,<span class="number">0</span>:<span class="number">4</span>].values</span><br><span class="line">y = df.iloc[:,<span class="number">4</span>].values</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把每个特征用于分类的结果，都画成条形图，观察哪个特征更容易划分种类</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">label_dict = &#123;<span class="number">1</span>: <span class="string">'Iris-Setosa'</span>,</span><br><span class="line">              <span class="number">2</span>: <span class="string">'Iris-Versicolor'</span>,</span><br><span class="line">              <span class="number">3</span>: <span class="string">'Iris-Virgnica'</span>&#125;</span><br><span class="line"></span><br><span class="line">feature_dict = &#123;<span class="number">0</span>: <span class="string">'sepal length [cm]'</span>,</span><br><span class="line">                <span class="number">1</span>: <span class="string">'sepal width [cm]'</span>,</span><br><span class="line">                <span class="number">2</span>: <span class="string">'petal length [cm]'</span>,</span><br><span class="line">                <span class="number">3</span>: <span class="string">'petal width [cm]'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, cnt+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> lab <span class="keyword">in</span> (<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>):</span><br><span class="line">        plt.hist(X[y==lab, cnt],</span><br><span class="line">                     label=lab,</span><br><span class="line">                     bins=<span class="number">10</span>,</span><br><span class="line">                     alpha=<span class="number">0.3</span>,)</span><br><span class="line">    plt.xlabel(feature_dict[cnt])</span><br><span class="line">    plt.legend(loc=<span class="string">'upper right'</span>, fancybox=<span class="keyword">True</span>, fontsize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_7_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">X_std = StandardScaler().fit_transform(X)</span><br></pre></td></tr></table></figure><h2 id="3-协方差分析（发现有2个有用特征，决定从4维降到2维）"><a href="#3-协方差分析（发现有2个有用特征，决定从4维降到2维）" class="headerlink" title="3 协方差分析（发现有2个有用特征，决定从4维降到2维）"></a>3 协方差分析（发现有2个有用特征，决定从4维降到2维）</h2><h3 id="1-计算样本X的-协方差矩阵（有4个特征，所以是4x4）"><a href="#1-计算样本X的-协方差矩阵（有4个特征，所以是4x4）" class="headerlink" title="1 计算样本X的 协方差矩阵（有4个特征，所以是4x4）"></a>1 计算样本X的 协方差矩阵（有4个特征，所以是4x4）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自己算 协方差矩阵</span></span><br><span class="line">mean_vec = np.mean(X_std, axis=<span class="number">0</span>)</span><br><span class="line">cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[<span class="number">0</span>]<span class="number">-1</span>)</span><br><span class="line">print(<span class="string">'Covariance matrix \n%s'</span> %cov_mat)</span><br></pre></td></tr></table></figure><pre><code>Covariance matrix [[ 1.00675676 -0.10448539  0.87716999  0.82249094] [-0.10448539  1.00675676 -0.41802325 -0.35310295] [ 0.87716999 -0.41802325  1.00675676  0.96881642] [ 0.82249094 -0.35310295  0.96881642  1.00675676]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy算 协方差矩阵</span></span><br><span class="line">print(<span class="string">'NumPy covariance matrix: \n%s'</span> %np.cov(X_std.T))</span><br></pre></td></tr></table></figure><pre><code>NumPy covariance matrix: [[ 1.00675676 -0.10448539  0.87716999  0.82249094] [-0.10448539  1.00675676 -0.41802325 -0.35310295] [ 0.87716999 -0.41802325  1.00675676  0.96881642] [ 0.82249094 -0.35310295  0.96881642  1.00675676]]</code></pre><h3 id="2-对协方差矩阵进行-特征值分解"><a href="#2-对协方差矩阵进行-特征值分解" class="headerlink" title="2 对协方差矩阵进行 特征值分解"></a>2 对协方差矩阵进行 特征值分解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cov_mat = np.cov(X_std.T)</span><br><span class="line"></span><br><span class="line">eig_vals, eig_vecs = np.linalg.eig(cov_mat)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Eigenvectors \n%s'</span> %eig_vecs)</span><br><span class="line">print(<span class="string">'\nEigenvalues \n%s'</span> %eig_vals)</span><br></pre></td></tr></table></figure><pre><code>Eigenvectors [[ 0.52308496 -0.36956962 -0.72154279  0.26301409] [-0.25956935 -0.92681168  0.2411952  -0.12437342] [ 0.58184289 -0.01912775  0.13962963 -0.80099722] [ 0.56609604 -0.06381646  0.63380158  0.52321917]]Eigenvalues [ 2.92442837  0.93215233  0.14946373  0.02098259]</code></pre><h3 id="3-把特征值从大到小排列，并配对特征向量"><a href="#3-把特征值从大到小排列，并配对特征向量" class="headerlink" title="3 把特征值从大到小排列，并配对特征向量"></a>3 把特征值从大到小排列，并配对特征向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Make a list of (eigenvalue, eigenvector) tuples</span></span><br><span class="line">eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(eig_vals))]</span><br><span class="line"><span class="keyword">print</span> (eig_pairs)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------'</span>)</span><br><span class="line"><span class="comment"># Sort the (eigenvalue, eigenvector) tuples from high to low</span></span><br><span class="line">eig_pairs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visually confirm that the list is correctly sorted by decreasing eigenvalues</span></span><br><span class="line">print(<span class="string">'Eigenvalues in descending order:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eig_pairs:</span><br><span class="line">    print(i[<span class="number">0</span>],<span class="string">"对应"</span>,i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[(2.9244283691111144, array([ 0.52308496, -0.25956935,  0.58184289,  0.56609604])), (0.93215233025350641, array([-0.36956962, -0.92681168, -0.01912775, -0.06381646])), (0.14946373489813314, array([-0.72154279,  0.2411952 ,  0.13962963,  0.63380158])), (0.020982592764270606, array([ 0.26301409, -0.12437342, -0.80099722,  0.52321917]))]----------Eigenvalues in descending order:2.92442836911 对应 [ 0.52308496 -0.25956935  0.58184289  0.56609604]0.932152330254 对应 [-0.36956962 -0.92681168 -0.01912775 -0.06381646]0.149463734898 对应 [-0.72154279  0.2411952   0.13962963  0.63380158]0.0209825927643 对应 [ 0.26301409 -0.12437342 -0.80099722  0.52321917]</code></pre><h3 id="4-通过前面特征值累加所占比重-的图像，判断取前多少特征值合适，组成投影矩阵W"><a href="#4-通过前面特征值累加所占比重-的图像，判断取前多少特征值合适，组成投影矩阵W" class="headerlink" title="4 通过前面特征值累加所占比重 的图像，判断取前多少特征值合适，组成投影矩阵W"></a>4 通过前面特征值累加所占比重 的图像，判断取前多少特征值合适，组成投影矩阵W</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tot = sum(eig_vals)</span><br><span class="line">var_exp = [(i / tot)*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> sorted(eig_vals, reverse=<span class="keyword">True</span>)]</span><br><span class="line"><span class="keyword">print</span> (var_exp)</span><br><span class="line">cum_var_exp = np.cumsum(var_exp)</span><br><span class="line">cum_var_exp</span><br></pre></td></tr></table></figure><pre><code>[72.620033326920336, 23.147406858644135, 3.7115155645845164, 0.52104424985101538]array([  72.62003333,   95.76744019,   99.47895575,  100.        ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-----------'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.cumsum(a))</span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4]-----------[ 1  3  6 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(range(<span class="number">4</span>), var_exp, alpha=<span class="number">0.5</span>, align=<span class="string">'center'</span>,</span><br><span class="line">            label=<span class="string">'individual explained variance'</span>)</span><br><span class="line">plt.step(range(<span class="number">4</span>), cum_var_exp, where=<span class="string">'mid'</span>,</span><br><span class="line">             label=<span class="string">'cumulative explained variance'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Explained variance ratio'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Principal components'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_20_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">matrix_w = np.hstack((eig_pairs[<span class="number">0</span>][<span class="number">1</span>].reshape(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">                      eig_pairs[<span class="number">1</span>][<span class="number">1</span>].reshape(<span class="number">4</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Matrix W:\n'</span>, matrix_w)</span><br></pre></td></tr></table></figure><pre><code>Matrix W: [[ 0.52308496 -0.36956962] [-0.25956935 -0.92681168] [ 0.58184289 -0.01912775] [ 0.56609604 -0.06381646]]</code></pre><h2 id="4-开始降维——用投影矩阵降维样本矩阵X"><a href="#4-开始降维——用投影矩阵降维样本矩阵X" class="headerlink" title="4 开始降维——用投影矩阵降维样本矩阵X"></a>4 开始降维——用投影矩阵降维样本矩阵X</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y = X_std.dot(matrix_w)</span><br></pre></td></tr></table></figure><h2 id="5-画图观察-降维前-和-降维后的样本分布"><a href="#5-画图观察-降维前-和-降维后的样本分布" class="headerlink" title="5 画图观察 降维前 和 降维后的样本分布"></a>5 画图观察 降维前 和 降维后的样本分布</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> lab, col <span class="keyword">in</span> zip((<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>),</span><br><span class="line">                        (<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>)):</span><br><span class="line">     plt.scatter(X[y==lab, <span class="number">0</span>],</span><br><span class="line">                X[y==lab, <span class="number">1</span>],</span><br><span class="line">                label=lab,</span><br><span class="line">                c=col)</span><br><span class="line">plt.xlabel(<span class="string">'sepal_len'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal_wid'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_25_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> lab, col <span class="keyword">in</span> zip((<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>),</span><br><span class="line">                        (<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>)):</span><br><span class="line">     plt.scatter(Y[y==lab, <span class="number">0</span>],</span><br><span class="line">                Y[y==lab, <span class="number">1</span>],</span><br><span class="line">                label=lab,</span><br><span class="line">                c=col)</span><br><span class="line">plt.xlabel(<span class="string">'Principal Component 1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Principal Component 2'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower center'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_26_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PCA-手写主成分分析&quot;&gt;&lt;a href=&quot;#PCA-手写主成分分析&quot; class=&quot;headerlink&quot; title=&quot;PCA 手写主成分分析&quot;&gt;&lt;/a&gt;PCA 手写主成分分析&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>Pandas常用功能、函数</title>
    <link href="http://yoursite.com/2018/04/19/pandas/Pandas%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/19/pandas/Pandas常用功能、函数/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-23T08:35:51.474Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>1机器学习流程</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_theory/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_theory/1机器学习流程/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-05-08T00:31:13.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据收集并给定标签"><a href="#一、数据收集并给定标签" class="headerlink" title="一、数据收集并给定标签"></a>一、数据收集并给定标签</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="1）归一化"><a href="#1）归一化" class="headerlink" title="1）归一化"></a>1）归一化</h3><h3 id="2）数据清洗"><a href="#2）数据清洗" class="headerlink" title="2）数据清洗"></a>2）数据清洗</h3><p>先直观上 去掉不需要的列特征。 包括：<br>1.预测后才出现的特征（比如：实际发放的贷款）、<br>2.高度相关的特征（比如：123和ABC）、<br>3.关系不大的特征（比如：ID等）<br>4.列属性只有一个值的<br>　需要先排除列中 nan 值，再用 unique() 判定</p><h3 id="3）缺失值处理"><a href="#3）缺失值处理" class="headerlink" title="3）缺失值处理"></a>3）缺失值处理</h3><p>先查找列缺失值多的，去掉这些列，只剩下缺失值少的列。之后直接去掉那些样本行即可</p><h3 id="4）字符串值处理"><a href="#4）字符串值处理" class="headerlink" title="4）字符串值处理"></a>4）字符串值处理</h3><p>把 object 类型转为 int 和 float 类型。包括：<br>1.one-hot 编码<br>2.列属性数字替换</p><h3 id="5）数据样本均衡分析"><a href="#5）数据样本均衡分析" class="headerlink" title="5）数据样本均衡分析"></a>5）数据样本均衡分析</h3><p>样本分布不均衡：指的是 label 不同的样本数量差距很大。<br>如果数据样本不均衡，容易导致分类器效果很差。<br>为了解决，有以下2种方案：</p><p>P1：oversample 或 undersample<br>P2：用模型参数 调节分类惩罚权重比参数： class_weight，适用于所有分类算法</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><h2 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h2><h1 id="二、训练一个分类器"><a href="#二、训练一个分类器" class="headerlink" title="二、训练一个分类器"></a>二、训练一个分类器</h1><h2 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h2><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><ul><li>让学习率随迭代次数收敛</li></ul><h1 id="三、模型测试、评估"><a href="#三、模型测试、评估" class="headerlink" title="三、模型测试、评估"></a>三、模型测试、评估</h1><h2 id="选择模型评估方法"><a href="#选择模型评估方法" class="headerlink" title="选择模型评估方法"></a>选择模型评估方法</h2><p>1.交叉验证 + 指标（比如：精度、TPR）<br>2.均方误差<br>3.交叉熵</p><h2 id="模型评估结果分析"><a href="#模型评估结果分析" class="headerlink" title="模型评估结果分析"></a>模型评估结果分析</h2><p>如果分类效果不佳，可采取以下措施：</p><ul><li>调节分类惩罚系数比（可在模型参数中调节）</li><li>调节模型其他参数</li><li>考虑 过拟合 可能，去掉一些列</li><li>集成多个模型</li><li>尝试其他模型</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、数据收集并给定标签&quot;&gt;&lt;a href=&quot;#一、数据收集并给定标签&quot; class=&quot;headerlink&quot; title=&quot;一、数据收集并给定标签&quot;&gt;&lt;/a&gt;一、数据收集并给定标签&lt;/h1&gt;&lt;h2 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于NLP的股价预测</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/%E5%9F%BA%E4%BA%8ENLP%E7%9A%84%E8%82%A1%E4%BB%B7%E9%A2%84%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/基于NLP的股价预测/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-24T06:57:45.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于NLP的股价预测"><a href="#基于NLP的股价预测" class="headerlink" title="基于NLP的股价预测"></a>基于NLP的股价预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'Combined_News_DJIA.csv'</span>)</span><br></pre></td></tr></table></figure><ul><li>每行是某公司 这一天股市数据；label表示当天涨/跌，Top表示依重要程度排列的当天新闻事件</li><li>通过NLP处理可以把这些字符串转换为 机器认识的语言</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Label</th>      <th>Top1</th>      <th>Top2</th>      <th>Top3</th>      <th>Top4</th>      <th>Top5</th>      <th>Top6</th>      <th>Top7</th>      <th>Top8</th>      <th>...</th>      <th>Top16</th>      <th>Top17</th>      <th>Top18</th>      <th>Top19</th>      <th>Top20</th>      <th>Top21</th>      <th>Top22</th>      <th>Top23</th>      <th>Top24</th>      <th>Top25</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2008-08-08</td>      <td>0</td>      <td>b"Georgia 'downs two Russian warplanes' as cou...</td>      <td>b'BREAKING: Musharraf to be impeached.'</td>      <td>b'Russia Today: Columns of troops roll into So...</td>      <td>b'Russian tanks are moving towards the capital...</td>      <td>b"Afghan children raped with 'impunity,' U.N. ...</td>      <td>b'150 Russian tanks have entered South Ossetia...</td>      <td>b"Breaking: Georgia invades South Ossetia, Rus...</td>      <td>b"The 'enemy combatent' trials are nothing but...</td>      <td>...</td>      <td>b'Georgia Invades South Ossetia - if Russia ge...</td>      <td>b'Al-Qaeda Faces Islamist Backlash'</td>      <td>b'Condoleezza Rice: "The US would not act to p...</td>      <td>b'This is a busy day:  The European Union has ...</td>      <td>b"Georgia will withdraw 1,000 soldiers from Ir...</td>      <td>b'Why the Pentagon Thinks Attacking Iran is a ...</td>      <td>b'Caucasus in crisis: Georgia invades South Os...</td>      <td>b'Indian shoe manufactory  - And again in a se...</td>      <td>b'Visitors Suffering from Mental Illnesses Ban...</td>      <td>b"No Help for Mexico's Kidnapping Surge"</td>    </tr>    <tr>      <th>1</th>      <td>2008-08-11</td>      <td>1</td>      <td>b'Why wont America and Nato help us? If they w...</td>      <td>b'Bush puts foot down on Georgian conflict'</td>      <td>b"Jewish Georgian minister: Thanks to Israeli ...</td>      <td>b'Georgian army flees in disarray as Russians ...</td>      <td>b"Olympic opening ceremony fireworks 'faked'"</td>      <td>b'What were the Mossad with fraudulent New Zea...</td>      <td>b'Russia angered by Israeli military sale to G...</td>      <td>b'An American citizen living in S.Ossetia blam...</td>      <td>...</td>      <td>b'Israel and the US behind the Georgian aggres...</td>      <td>b'"Do not believe TV, neither Russian nor Geor...</td>      <td>b'Riots are still going on in Montreal (Canada...</td>      <td>b'China to overtake US as largest manufacturer'</td>      <td>b'War in South Ossetia [PICS]'</td>      <td>b'Israeli Physicians Group Condemns State Tort...</td>      <td>b' Russia has just beaten the United States ov...</td>      <td>b'Perhaps *the* question about the Georgia - R...</td>      <td>b'Russia is so much better at war'</td>      <td>b"So this is what it's come to: trading sex fo...</td>    </tr>    <tr>      <th>2</th>      <td>2008-08-12</td>      <td>0</td>      <td>b'Remember that adorable 9-year-old who sang a...</td>      <td>b"Russia 'ends Georgia operation'"</td>      <td>b'"If we had no sexual harassment we would hav...</td>      <td>b"Al-Qa'eda is losing support in Iraq because ...</td>      <td>b'Ceasefire in Georgia: Putin Outmaneuvers the...</td>      <td>b'Why Microsoft and Intel tried to kill the XO...</td>      <td>b'Stratfor: The Russo-Georgian War and the Bal...</td>      <td>b"I'm Trying to Get a Sense of This Whole Geor...</td>      <td>...</td>      <td>b'U.S. troops still in Georgia (did you know t...</td>      <td>b'Why Russias response to Georgia was right'</td>      <td>b'Gorbachev accuses U.S. of making a "serious ...</td>      <td>b'Russia, Georgia, and NATO: Cold War Two'</td>      <td>b'Remember that adorable 62-year-old who led y...</td>      <td>b'War in Georgia: The Israeli connection'</td>      <td>b'All signs point to the US encouraging Georgi...</td>      <td>b'Christopher King argues that the US and NATO...</td>      <td>b'America: The New Mexico?'</td>      <td>b"BBC NEWS | Asia-Pacific | Extinction 'by man...</td>    </tr>    <tr>      <th>3</th>      <td>2008-08-13</td>      <td>0</td>      <td>b' U.S. refuses Israel weapons to attack Iran:...</td>      <td>b"When the president ordered to attack Tskhinv...</td>      <td>b' Israel clears troops who killed Reuters cam...</td>      <td>b'Britain\'s policy of being tough on drugs is...</td>      <td>b'Body of 14 year old found in trunk; Latest (...</td>      <td>b'China has moved 10 *million* quake survivors...</td>      <td>b"Bush announces Operation Get All Up In Russi...</td>      <td>b'Russian forces sink Georgian ships '</td>      <td>...</td>      <td>b'Elephants extinct by 2020?'</td>      <td>b'US humanitarian missions soon in Georgia - i...</td>      <td>b"Georgia's DDOS came from US sources"</td>      <td>b'Russian convoy heads into Georgia, violating...</td>      <td>b'Israeli defence minister: US against strike ...</td>      <td>b'Gorbachev: We Had No Choice'</td>      <td>b'Witness: Russian forces head towards Tbilisi...</td>      <td>b' Quarter of Russians blame U.S. for conflict...</td>      <td>b'Georgian president  says US military will ta...</td>      <td>b'2006: Nobel laureate Aleksander Solzhenitsyn...</td>    </tr>    <tr>      <th>4</th>      <td>2008-08-14</td>      <td>1</td>      <td>b'All the experts admit that we should legalis...</td>      <td>b'War in South Osetia - 89 pictures made by a ...</td>      <td>b'Swedish wrestler Ara Abrahamian throws away ...</td>      <td>b'Russia exaggerated the death toll in South O...</td>      <td>b'Missile That Killed 9 Inside Pakistan May Ha...</td>      <td>b"Rushdie Condemns Random House's Refusal to P...</td>      <td>b'Poland and US agree to missle defense deal. ...</td>      <td>b'Will the Russians conquer Tblisi? Bet on it,...</td>      <td>...</td>      <td>b'Bank analyst forecast Georgian crisis 2 days...</td>      <td>b"Georgia confict could set back Russia's US r...</td>      <td>b'War in the Caucasus is as much the product o...</td>      <td>b'"Non-media" photos of South Ossetia/Georgia ...</td>      <td>b'Georgian TV reporter shot by Russian sniper ...</td>      <td>b'Saudi Arabia: Mother moves to block child ma...</td>      <td>b'Taliban wages war on humanitarian aid workers'</td>      <td>b'Russia: World  "can forget about" Georgia\'s...</td>      <td>b'Darfur rebels accuse Sudan of mounting major...</td>      <td>b'Philippines : Peace Advocate say Muslims nee...</td>    </tr>  </tbody></table><p>5 rows × 27 columns</p></div><h2 id="1-数据简单预处理、划分"><a href="#1-数据简单预处理、划分" class="headerlink" title="1 数据简单预处理、划分"></a>1 数据简单预处理、划分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期划分 训练集 测试集</span></span><br><span class="line">train = data[data[<span class="string">'Date'</span>] &lt; <span class="string">'2015-01-01'</span>]</span><br><span class="line">test = data[data[<span class="string">'Date'</span>] &gt; <span class="string">'2014-12-31'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = train.iloc[<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">print(example)</span><br></pre></td></tr></table></figure><pre><code>b&quot;The commander of a Navy air reconnaissance squadron that provides the President and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example2 = example.lower()</span><br><span class="line">print(example2)</span><br></pre></td></tr></table></figure><pre><code>b&quot;the commander of a navy air reconnaissance squadron that provides the president and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example3 = CountVectorizer().build_tokenizer()(example2)</span><br><span class="line">print(example3)</span><br></pre></td></tr></table></figure><pre><code>[&#39;the&#39;, &#39;commander&#39;, &#39;of&#39;, &#39;navy&#39;, &#39;air&#39;, &#39;reconnaissance&#39;, &#39;squadron&#39;, &#39;that&#39;, &#39;provides&#39;, &#39;the&#39;, &#39;president&#39;, &#39;and&#39;, &#39;the&#39;, &#39;defense&#39;, &#39;secretary&#39;, &#39;the&#39;, &#39;airborne&#39;, &#39;ability&#39;, &#39;to&#39;, &#39;command&#39;, &#39;the&#39;, &#39;nation&#39;, &#39;nuclear&#39;, &#39;weapons&#39;, &#39;has&#39;, &#39;been&#39;, &#39;relieved&#39;, &#39;of&#39;, &#39;duty&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame([[x,example3.count(x)] <span class="keyword">for</span> x <span class="keyword">in</span> set(example3)], columns = [<span class="string">'Word'</span>, <span class="string">'Count'</span>])</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Word</th>      <th>Count</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>the</td>      <td>5</td>    </tr>    <tr>      <th>1</th>      <td>command</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>secretary</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>weapons</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>has</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>defense</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>commander</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>squadron</td>      <td>1</td>    </tr>    <tr>      <th>8</th>      <td>relieved</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>navy</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>of</td>      <td>2</td>    </tr>    <tr>      <th>11</th>      <td>air</td>      <td>1</td>    </tr>    <tr>      <th>12</th>      <td>reconnaissance</td>      <td>1</td>    </tr>    <tr>      <th>13</th>      <td>provides</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>president</td>      <td>1</td>    </tr>    <tr>      <th>15</th>      <td>been</td>      <td>1</td>    </tr>    <tr>      <th>16</th>      <td>to</td>      <td>1</td>    </tr>    <tr>      <th>17</th>      <td>and</td>      <td>1</td>    </tr>    <tr>      <th>18</th>      <td>ability</td>      <td>1</td>    </tr>    <tr>      <th>19</th>      <td>nation</td>      <td>1</td>    </tr>    <tr>      <th>20</th>      <td>that</td>      <td>1</td>    </tr>    <tr>      <th>21</th>      <td>duty</td>      <td>1</td>    </tr>    <tr>      <th>22</th>      <td>nuclear</td>      <td>1</td>    </tr>    <tr>      <th>23</th>      <td>airborne</td>      <td>1</td>    </tr>  </tbody></table></div><h2 id="2-基于词频的特征提取——构造词频矩阵"><a href="#2-基于词频的特征提取——构造词频矩阵" class="headerlink" title="2 基于词频的特征提取——构造词频矩阵"></a>2 基于词频的特征提取——构造词频矩阵</h2><p>1）构造一个字符串数组StringList，每个元素是对应行所有top特征字符串拼成的长字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trainheadlines = [] </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(train.index)):</span><br><span class="line">    trainheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> train.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">print(trainheadlines[<span class="number">0</span>:<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;b&quot;Georgia \&#39;downs two Russian warplanes\&#39; as countries move to brink of war&quot; b\&#39;BREAKING: Musharraf to be impeached.\&#39; b\&#39;Russia Today: Columns of troops roll into South Ossetia; footage from fighting (YouTube)\&#39; b\&#39;Russian tanks are moving towards the capital of South Ossetia, which has reportedly been completely destroyed by Georgian artillery fire\&#39; b&quot;Afghan children raped with \&#39;impunity,\&#39; U.N. official says - this is sick, a three year old was raped and they do nothing&quot; b\&#39;150 Russian tanks have entered South Ossetia whilst Georgia shoots down two Russian jets.\&#39; b&quot;Breaking: Georgia invades South Ossetia, Russia warned it would intervene on SO\&#39;s side&quot; b&quot;The \&#39;enemy combatent\&#39; trials are nothing but a sham: Salim Haman has been sentenced to 5 1/2 years, but will be kept longer anyway just because they feel like it.&quot; b\&#39;Georgian troops retreat from S. Osettain capital, presumably leaving several hundred people killed. [VIDEO]\&#39; b\&#39;Did the U.S. Prep Georgia for War with Russia?\&#39; b\&#39;Rice Gives Green Light for Israel to Attack Iran: Says U.S. has no veto over Israeli military ops\&#39; b\&#39;Announcing:Class Action Lawsuit on Behalf of American Public Against the FBI\&#39; b&quot;So---Russia and Georgia are at war and the NYT\&#39;s top story is opening ceremonies of the Olympics?  What a fucking disgrace and yet further proof of the decline of journalism.&quot; b&quot;China tells Bush to stay out of other countries\&#39; affairs&quot; b\&#39;Did World War III start today?\&#39; b\&#39;Georgia Invades South Ossetia - if Russia gets involved, will NATO absorb Georgia and unleash a full scale war?\&#39; b\&#39;Al-Qaeda Faces Islamist Backlash\&#39; b\&#39;Condoleezza Rice: &quot;The US would not act to prevent an Israeli strike on Iran.&quot; Israeli Defense Minister Ehud Barak: &quot;Israel is prepared for uncompromising victory in the case of military hostilities.&quot;\&#39; b\&#39;This is a busy day:  The European Union has approved new sanctions against Iran in protest at its nuclear programme.\&#39; b&quot;Georgia will withdraw 1,000 soldiers from Iraq to help fight off Russian forces in Georgia\&#39;s breakaway region of South Ossetia&quot; b\&#39;Why the Pentagon Thinks Attacking Iran is a Bad Idea - US News &amp;amp; World Report\&#39; b\&#39;Caucasus in crisis: Georgia invades South Ossetia\&#39; b\&#39;Indian shoe manufactory  - And again in a series of &quot;you do not like your work?&quot;\&#39; b\&#39;Visitors Suffering from Mental Illnesses Banned from Olympics\&#39; b&quot;No Help for Mexico\&#39;s Kidnapping Surge&quot;&#39;]</code></pre><p>2）将这个字符串数组 转换成 词频矩阵，以便可以作为训练集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basicvectorizer = CountVectorizer()</span><br><span class="line">basictrain = basicvectorizer.fit_transform(trainheadlines)</span><br><span class="line">print(basictrain.shape) <span class="comment"># 生成了一个词频矩阵，总共1611个样本，31675个不重复的单词</span></span><br></pre></td></tr></table></figure><pre><code>(1611, 31675)</code></pre><h2 id="3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof"><a href="#3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof" class="headerlink" title="3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_"></a>3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归 fit 训练集词频矩阵</span></span><br><span class="line">basicmodel = LogisticRegression()</span><br><span class="line">basicmodel = basicmodel.fit(basictrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">basictest = basicvectorizer.transform(testheadlines)</span><br><span class="line"><span class="comment"># 逻辑回归 predict 测试集词频矩阵</span></span><br><span class="line">predictions = basicmodel.predict(basictest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造简易 混淆矩阵</span></span><br><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], predictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#0.42</span></span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>61</td>      <td>125</td>    </tr>    <tr>      <th>1</th>      <td>92</td>      <td>100</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">观察：用精度做的混淆矩阵，精度只有<span class="number">42</span>% 不理想</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">basicwords = basicvectorizer.get_feature_names() <span class="comment"># 得到分词模型中所有单词（特征）</span></span><br><span class="line">basiccoeffs = basicmodel.coef_.tolist()[<span class="number">0</span>] <span class="comment"># 得到logistic模型中所有单词对应的 权重参数</span></span><br><span class="line">coeffdf = pd.DataFrame(&#123;<span class="string">'Word'</span> : basicwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : basiccoeffs&#125;)</span><br><span class="line">coeffdf = coeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Word'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>]) <span class="comment"># 从大到小排序</span></span><br><span class="line">coeffdf.head(<span class="number">10</span>) <span class="comment"># 前面的正相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>19419</th>      <td>0.497924</td>      <td>nigeria</td>    </tr>    <tr>      <th>25261</th>      <td>0.452526</td>      <td>self</td>    </tr>    <tr>      <th>29286</th>      <td>0.428011</td>      <td>tv</td>    </tr>    <tr>      <th>15998</th>      <td>0.425863</td>      <td>korea</td>    </tr>    <tr>      <th>20135</th>      <td>0.425716</td>      <td>olympics</td>    </tr>    <tr>      <th>15843</th>      <td>0.411636</td>      <td>kills</td>    </tr>    <tr>      <th>26323</th>      <td>0.411267</td>      <td>so</td>    </tr>    <tr>      <th>29256</th>      <td>0.394855</td>      <td>turn</td>    </tr>    <tr>      <th>10874</th>      <td>0.388555</td>      <td>fears</td>    </tr>    <tr>      <th>28274</th>      <td>0.384031</td>      <td>territory</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coeffdf.tail(<span class="number">10</span>) <span class="comment"># 前面的负相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>27299</th>      <td>-0.424441</td>      <td>students</td>    </tr>    <tr>      <th>8478</th>      <td>-0.427079</td>      <td>did</td>    </tr>    <tr>      <th>6683</th>      <td>-0.431925</td>      <td>congo</td>    </tr>    <tr>      <th>12818</th>      <td>-0.444069</td>      <td>hacking</td>    </tr>    <tr>      <th>7139</th>      <td>-0.448570</td>      <td>country</td>    </tr>    <tr>      <th>16949</th>      <td>-0.463116</td>      <td>low</td>    </tr>    <tr>      <th>3651</th>      <td>-0.470454</td>      <td>begin</td>    </tr>    <tr>      <th>25433</th>      <td>-0.494555</td>      <td>sex</td>    </tr>    <tr>      <th>24754</th>      <td>-0.549725</td>      <td>sanctions</td>    </tr>    <tr>      <th>24542</th>      <td>-0.587794</td>      <td>run</td>    </tr>  </tbody></table></div><h2 id="4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵"><a href="#4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵" class="headerlink" title="4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵"></a>4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedvectorizer = CountVectorizer(ngram_range=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">advancedtrain = advancedvectorizer.fit_transform(trainheadlines)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(advancedtrain.shape)</span><br></pre></td></tr></table></figure><pre><code>(1611, 366721)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedmodel = LogisticRegression()</span><br><span class="line">advancedmodel = advancedmodel.fit(advancedtrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">advancedtest = advancedvectorizer.transform(testheadlines)</span><br><span class="line">advpredictions = advancedmodel.predict(advancedtest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], advpredictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#.57</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>66</td>      <td>120</td>    </tr>    <tr>      <th>1</th>      <td>45</td>      <td>147</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">advwords = advancedvectorizer.get_feature_names()</span><br><span class="line">advcoeffs = advancedmodel.coef_.tolist()[<span class="number">0</span>]</span><br><span class="line">advcoeffdf = pd.DataFrame(&#123;<span class="string">'Words'</span> : advwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : advcoeffs&#125;)</span><br><span class="line">advcoeffdf = advcoeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Words'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">advcoeffdf.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>272047</th>      <td>0.286533</td>      <td>right to</td>    </tr>    <tr>      <th>24710</th>      <td>0.275274</td>      <td>and other</td>    </tr>    <tr>      <th>285392</th>      <td>0.274698</td>      <td>set to</td>    </tr>    <tr>      <th>316194</th>      <td>0.262873</td>      <td>the first</td>    </tr>    <tr>      <th>157511</th>      <td>0.227943</td>      <td>in china</td>    </tr>    <tr>      <th>159522</th>      <td>0.224184</td>      <td>in south</td>    </tr>    <tr>      <th>125870</th>      <td>0.219130</td>      <td>found in</td>    </tr>    <tr>      <th>124411</th>      <td>0.216726</td>      <td>forced to</td>    </tr>    <tr>      <th>173246</th>      <td>0.211137</td>      <td>it has</td>    </tr>    <tr>      <th>322590</th>      <td>0.209239</td>      <td>this is</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advcoeffdf.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>326846</th>      <td>-0.198495</td>      <td>to help</td>    </tr>    <tr>      <th>118707</th>      <td>-0.201654</td>      <td>fire on</td>    </tr>    <tr>      <th>155038</th>      <td>-0.209702</td>      <td>if he</td>    </tr>    <tr>      <th>242528</th>      <td>-0.211303</td>      <td>people are</td>    </tr>    <tr>      <th>31669</th>      <td>-0.213362</td>      <td>around the</td>    </tr>    <tr>      <th>321333</th>      <td>-0.215699</td>      <td>there is</td>    </tr>    <tr>      <th>327113</th>      <td>-0.221812</td>      <td>to kill</td>    </tr>    <tr>      <th>340714</th>      <td>-0.226289</td>      <td>up in</td>    </tr>    <tr>      <th>358917</th>      <td>-0.227516</td>      <td>with iran</td>    </tr>    <tr>      <th>315485</th>      <td>-0.331153</td>      <td>the country</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于NLP的股价预测&quot;&gt;&lt;a href=&quot;#基于NLP的股价预测&quot; class=&quot;headerlink&quot; title=&quot;基于NLP的股价预测&quot;&gt;&lt;/a&gt;基于NLP的股价预测&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="CountVectorizer" scheme="http://yoursite.com/tags/CountVectorizer/"/>
    
      <category term="LogisticRegression" scheme="http://yoursite.com/tags/LogisticRegression/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow函数整理</title>
    <link href="http://yoursite.com/2018/04/19/tensorflow/Tensorflow%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/19/tensorflow/Tensorflow函数整理/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-05-11T16:53:17.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性类"><a href="#属性类" class="headerlink" title="属性类"></a>属性类</h2><p>.eval() 取op的值</p><h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><h3 id="计算函数"><a href="#计算函数" class="headerlink" title="计算函数"></a>计算函数</h3><p>tf.nn.dopout(L1, keep_prob)：keep_prob是设置层L1工作神经元的百分比<br>tf.nn.sigmoid()<br>tf.nn.softmax()<br>tf.nn.softmax_cross_entropy_with_logits(y_hat, y)：交叉熵函数。<br>tf.add()：加减乘除<br>tf.subtract()<br>tf.multiply()<br>tf.divide()</p><p>tf.matmul()<br>tf.reshape(labels, [128, 1])</p><p>tf.reduce_max()<br>tf.reduce_mean()</p><p>tf.square()：平方<br>tf.sqrt()：开方</p><h3 id="算法函数"><a href="#算法函数" class="headerlink" title="算法函数"></a>算法函数</h3><h4 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h4><p>tf.train.GradientDescentOptimizer()：梯度下降<br>tf.train.AdadeItaOptimizer()<br>tf.train.AdagradOptimizer()<br>tf.train.AdagradDAOptimizer()<br>tf.train.MomentumOptimizer()<br>tf.train.AdamOptimizer()<br>tf.train.FtriOptimizer()<br>tf.train.ProximalGradientDescentOptimizer()<br>tf.train.ProximalAdagradOptimizer()<br>tf.train.RMSPropOptimizer()</p><h3 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h3><ul><li>tf.equal(a, b)  ：比较是否相等</li><li>tf.cast(a, “float”)  :类型转换</li><li>tf.placeholder(“float”, [None, 10]) ：None is for infinite 这是一个n行10列的动态矩阵</li><li>tf.InteractiveSession(): 它能让你在运行图的时候，插入一些计算图</li><li>tf.Session(): 需要在启动session之前构建整个计算图，然后启动该计算图。</li><li>tf.random_normal([2, 3], mean=-1, stddev=4) ：高斯初始化生成一个 均值为-1，方差为4的矩阵</li></ul><h2 id="经验总结类"><a href="#经验总结类" class="headerlink" title="经验总结类"></a>经验总结类</h2><p>Tensorflow 定义的任何数据类型都推荐用 float32</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;属性类&quot;&gt;&lt;a href=&quot;#属性类&quot; class=&quot;headerlink&quot; title=&quot;属性类&quot;&gt;&lt;/a&gt;属性类&lt;/h2&gt;&lt;p&gt;.eval() 取op的值&lt;/p&gt;
&lt;h2 id=&quot;函数类&quot;&gt;&lt;a href=&quot;#函数类&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Python常用功能、函数</title>
    <link href="http://yoursite.com/2018/04/19/python/Python%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/19/python/Python常用功能、函数/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-05-04T05:13:04.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p>1简单的文件读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"123.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">content = f.read();</span><br><span class="line">print(content);</span><br><span class="line">f.close();</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"123.txt"</span>, <span class="string">"a+"</span>);</span><br><span class="line">f.write(<span class="string">"\n"</span>);</span><br><span class="line">f.write(<span class="string">"222222222222"</span>);</span><br><span class="line">f.close();</span><br></pre></td></tr></table></figure><p>2读取数据到矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取txt二维数据到矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span>    </span><br><span class="line">    dataMat = np.mat([<span class="number">0</span>,<span class="number">0</span>])               </span><br><span class="line">    f = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        curLine = line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(curLine)==<span class="number">1</span> : </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        curLineMat = np.mat(curLine)</span><br><span class="line">        dataMat = np.vstack((dataMat, curLineMat))  <span class="comment">#拼接矩阵</span></span><br><span class="line">    dataMat = dataMat[<span class="number">1</span>:,:].astype(float)   <span class="comment">#不要第一行；转为纯数字</span></span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p>将一个字符串拆成 单个字符 组成的字符集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = set(<span class="string">'runoob'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = set(<span class="string">'google'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y (set([<span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]), set([<span class="string">'e'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'l'</span>])) <span class="comment"># 重复的被删除 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y <span class="comment"># 交集 set(['o']) </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y <span class="comment"># 并集 set(['b', 'e', 'g', 'l', 'o', 'n', 'r', 'u']) </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y <span class="comment"># 差集 set(['r', 'b', 'u', 'n']) </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h2><ol><li>= 赋值 传引用 =》内存不独立 =》 同步跟随变化</li><li>copy 浅拷贝 只拷贝父对象 =》父对象内存独立 =》只有子对象跟随变化</li><li>deepcopy 深拷贝 拷贝对象及其子对象 =》全部内存独立 =》 不跟随变化<br>（深拷贝 和 浅拷贝——只对数组结构有用，int之类的没用）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a) <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a) <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>) <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>) <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">'a = '</span>, a</span><br><span class="line"><span class="keyword">print</span> <span class="string">'b = '</span>, b</span><br><span class="line"><span class="keyword">print</span> <span class="string">'c = '</span>, c</span><br><span class="line"><span class="keyword">print</span> <span class="string">'d = '</span>, d</span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure></li></ol><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>zip函数接受任意多个序列作为参数，返回一个tuple列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(zip(range(<span class="number">3</span>),range(<span class="number">5</span>)))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(range(<span class="number">3</span>),range(<span class="number">5</span>)):</span><br><span class="line">    print(i)</span><br><span class="line">    print(j)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="运算符and和or"><a href="#运算符and和or" class="headerlink" title="运算符and和or"></a>运算符and和or</h2><p> 注意：and or 是python特有的短路运算符</p><ol><li>表达式从左至右运算，若 or 的左侧逻辑值为 True ，则短路 or 后所有的表达式（不管是 and 还是 or），直接输出 or 左侧表达式 。</li><li>表达式从左至右运算，若 and 的左侧逻辑值为 False ，则短路其后所有 and 表达式，直到有 or 出现，输出 and 左侧表达式到 or 的左侧，参与接下来的逻辑运算。</li><li>若 or 的左侧为 False ，或者 and 的左侧为 True 则不能使用短路逻辑。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;open&quot;&gt;&lt;a href=&quot;#open&quot; class=&quot;headerlink&quot; title=&quot;open()&quot;&gt;&lt;/a&gt;open()&lt;/h2&gt;&lt;p&gt;1简单的文件读写&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
