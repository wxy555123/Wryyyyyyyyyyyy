<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新日暮里的幻想乡</title>
  
  <subtitle>boy next door</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-03T13:31:39.792Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wxy555123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4线性方程求解</title>
    <link href="http://yoursite.com/2018/04/29/math/linear_algebra/4%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/29/math/linear_algebra/4线性方程求解/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-03T13:31:39.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性方程求解方法"><a href="#线性方程求解方法" class="headerlink" title="线性方程求解方法"></a>线性方程求解方法</h1><h2 id="Gauss消去法"><a href="#Gauss消去法" class="headerlink" title="Gauss消去法"></a>Gauss消去法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-18-09.png" alt=""><br>1转化为（同解）的三角形方程组<br>2化阶梯形矩阵 且 要保证解不变，所以需要组成增广阵再进行 初等行变换（同解变换）<br>实际过程就是一行一行消元，用上面行消去下面行第一个项，有利于解出最后一个回代</p><p>举例：<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-06.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-19-18.png" alt=""><br>适用性：<br>系数矩阵A规模比较小的，否则很慢<br>系数矩阵A是非奇异的，否则没有唯一解</p><h2 id="Jacobi迭代法"><a href="#Jacobi迭代法" class="headerlink" title="Jacobi迭代法"></a>Jacobi迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-23-45.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-05.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-14.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-21.png" alt=""><br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-24-35.png" alt=""></p><h3 id="雅克比迭代法矩阵描述"><a href="#雅克比迭代法矩阵描述" class="headerlink" title="雅克比迭代法矩阵描述"></a>雅克比迭代法矩阵描述</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-30.png" alt=""></p><h3 id="矩阵迭代公式"><a href="#矩阵迭代公式" class="headerlink" title="矩阵迭代公式"></a>矩阵迭代公式</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-25-46.png" alt=""><br>DX = (L+U)X + b<br>L和U都没更新，写在右边<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-14.png" alt=""></p><h2 id="Gauss-Seildel迭代法"><a href="#Gauss-Seildel迭代法" class="headerlink" title="Gauss-Seildel迭代法"></a>Gauss-Seildel迭代法</h2><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-26-47.png" alt=""><br>及时更新下半三角系数的迭代</p><h3 id="矩阵迭代公式一"><a href="#矩阵迭代公式一" class="headerlink" title="矩阵迭代公式一"></a>矩阵迭代公式一</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-19.png" alt=""><br>(D-L)X = UX + b<br>只有上半部的U没更新，写在右边</p><h3 id="矩阵迭代公式二"><a href="#矩阵迭代公式二" class="headerlink" title="矩阵迭代公式二"></a>矩阵迭代公式二</h3><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-27-39.png" alt=""><br>这样D的逆更方便求出来</p><h2 id="迭代法的收敛"><a href="#迭代法的收敛" class="headerlink" title="迭代法的收敛"></a>迭代法的收敛</h2><p>严格对角占优矩阵<br><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-28-47.png" alt=""></p><p>定义：对角线元素的绝对值和 &gt; 其所在 行/列 元素的绝对值和 的矩阵</p><p><img src="/2018/04/29/math/linear_algebra/4线性方程求解/2018-05-03-21-29-02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性方程求解方法&quot;&gt;&lt;a href=&quot;#线性方程求解方法&quot; class=&quot;headerlink&quot; title=&quot;线性方程求解方法&quot;&gt;&lt;/a&gt;线性方程求解方法&lt;/h1&gt;&lt;h2 id=&quot;Gauss消去法&quot;&gt;&lt;a href=&quot;#Gauss消去法&quot; class=&quot;head
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎光临，BLOG刚弄不久正在施工 文章陆续上传中...</title>
    <link href="http://yoursite.com/2018/04/29/OTHERS/%E7%BD%AE%E9%A1%B6%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2018/04/29/OTHERS/置顶信息/</id>
    <published>2018-04-28T16:51:27.000Z</published>
    <updated>2018-05-04T04:39:25.923Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>jupyter设置</title>
    <link href="http://yoursite.com/2018/04/25/anaconda/jupyter%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/25/anaconda/jupyter设置/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-05-03T03:45:08.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更改启动目录"><a href="#更改启动目录" class="headerlink" title="更改启动目录"></a>更改启动目录</h2><p>右键jupyter notebook快捷方式属性，把“目标”属性最后的变量改为自己的路径，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\\Users\\lenovo\\Desktop\\Python WORK SPACE\\&quot;</span><br></pre></td></tr></table></figure></p><p>注意前面一个空格要保留</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;更改启动目录&quot;&gt;&lt;a href=&quot;#更改启动目录&quot; class=&quot;headerlink&quot; title=&quot;更改启动目录&quot;&gt;&lt;/a&gt;更改启动目录&lt;/h2&gt;&lt;p&gt;右键jupyter notebook快捷方式属性，把“目标”属性最后的变量改为自己的路径，如下：&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="anaconda" scheme="http://yoursite.com/categories/anaconda/"/>
    
    
  </entry>
  
  <entry>
    <title>anaconda安装命令整理</title>
    <link href="http://yoursite.com/2018/04/25/anaconda/anaconda%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/25/anaconda/anaconda安装命令整理/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-04-25T06:21:52.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装命令整理"><a href="#安装命令整理" class="headerlink" title="安装命令整理"></a>安装命令整理</h1><h2 id="Tensorflow-安装（以windows版本为例）"><a href="#Tensorflow-安装（以windows版本为例）" class="headerlink" title="Tensorflow 安装（以windows版本为例）"></a>Tensorflow 安装（以windows版本为例）</h2><p>S1. 查找所有Tensorflow版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda search -t conda tensorflow</span><br></pre></td></tr></table></figure></p><p>找到windows版本<br><img src="/2018/04/25/anaconda/anaconda安装命令整理/2018-04-25-14-17-21.png" alt=""><br>S2. 显示该版本的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda show dhirschfeld/tensorflow</span><br></pre></td></tr></table></figure></p><p>S3. 使用所提示的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --channel https://conda.anaconda.org/dhirschfeld tensorflow</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装命令整理&quot;&gt;&lt;a href=&quot;#安装命令整理&quot; class=&quot;headerlink&quot; title=&quot;安装命令整理&quot;&gt;&lt;/a&gt;安装命令整理&lt;/h1&gt;&lt;h2 id=&quot;Tensorflow-安装（以windows版本为例）&quot;&gt;&lt;a href=&quot;#Tensorflow
      
    
    </summary>
    
      <category term="anaconda" scheme="http://yoursite.com/categories/anaconda/"/>
    
    
      <category term="anaconda" scheme="http://yoursite.com/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2018/04/24/hexo/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/24/hexo/markdown语法/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-04-24T15:35:19.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><p>空格：输入法全角状态下space</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;markdown语法&quot;&gt;&lt;a href=&quot;#markdown语法&quot; class=&quot;headerlink&quot; title=&quot;markdown语法&quot;&gt;&lt;/a&gt;markdown语法&lt;/h2&gt;&lt;p&gt;空格：输入法全角状态下space&lt;/p&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>2模型评估与选择</title>
    <link href="http://yoursite.com/2018/04/21/machine_learning_theory/2%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2018/04/21/machine_learning_theory/2模型评估与选择/</id>
    <published>2018-04-21T04:49:42.000Z</published>
    <updated>2018-05-04T07:56:59.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><h3 id="二分类任务的-混淆矩阵-和-其衍生的度量指标"><a href="#二分类任务的-混淆矩阵-和-其衍生的度量指标" class="headerlink" title="二分类任务的 混淆矩阵 和 其衍生的度量指标"></a>二分类任务的 混淆矩阵 和 其衍生的度量指标</h3><p><img src="/2018/04/21/machine_learning_theory/2模型评估与选择/2018-05-04-14-38-40.png" alt=""></p><p>True Positive  （真正, TP） 被模型预测为正样本，是真的判断正确。所以就是正样本，也称作正的数。</p><p>True Negative（真负 , TN）被模型判断为负样本，是真的判断正确。所以就是负样本，也称作负的数。</p><p>False Positive  （假正, FP）被模型判断为正样本，是假的判断错误。所以应该是负样本，也称作误报数。</p><p>False Negative（假负 , FN）被模型判断为负样本，是假的判断错误。所以应该是正样本，也称作漏报数。</p><h4 id="1）常用的3个指标（多用于交叉验证）"><a href="#1）常用的3个指标（多用于交叉验证）" class="headerlink" title="1）常用的3个指标（多用于交叉验证）"></a>1）常用的3个指标（多用于交叉验证）</h4><ul><li>accuracy（准确率）——检验模型预测的正确率<script type="math/tex; mode=display">A=\frac {TP+TN}{ALL}</script></li></ul><p>预测正确个数/全部样本数</p><ul><li>precision（精确率）——检验模型预测正例的正确率<script type="math/tex; mode=display">P=\frac {TP}{TP+FP}</script></li></ul><p>预测正确的正样本数 / 预测为的正样本数</p><ul><li>recall/TPR（召回率/真正率）——检验模型正例预测的全面性<script type="math/tex; mode=display">R\ /\ TPR=\frac {TP}{TP+FN}</script></li></ul><p>预测正确的正样本数 / 真实的正样本数</p><h4 id="2）不常用的3个指标（多用于绘图）"><a href="#2）不常用的3个指标（多用于绘图）" class="headerlink" title="2）不常用的3个指标（多用于绘图）"></a>2）不常用的3个指标（多用于绘图）</h4><ul><li>specificity（特异性/真负率）——检验模型负例预测的正确率<script type="math/tex; mode=display">S=\frac {TN}{TN+FP}</script></li></ul><p>预测正确的负样本数 / 真实的负样本数</p><ul><li>FPR（假正率）——用于和TPR一起绘制ROC曲线<script type="math/tex; mode=display">FPR=\frac {FP}{TN+FP}</script></li></ul><p>预测错误的正样本数 / 真实的负样本数</p><ul><li>FNR（假负率）——用的少 <script type="math/tex; mode=display">FNR=\frac {FN}{TP+FN}</script></li></ul><p>预测错误的负样本数 / 真实的正样本数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性能度量&quot;&gt;&lt;a href=&quot;#性能度量&quot; class=&quot;headerlink&quot; title=&quot;性能度量&quot;&gt;&lt;/a&gt;性能度量&lt;/h2&gt;&lt;h3 id=&quot;二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;&gt;&lt;a href=&quot;#二分类任务的-混淆矩阵-和-其衍生的度量指标&quot;
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
  </entry>
  
  <entry>
    <title>2矩阵的运算、行列式</title>
    <link href="http://yoursite.com/2018/04/20/math/linear_algebra/2%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%90%E7%AE%97%E3%80%81%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-03T13:17:23.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><p>1 矩阵乘法的具体应用<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-18-51-07.png" alt=""><br>总结：<br>A中每个元素和B中每个元素相乘是有意义的；<br>B矩阵和最终C矩阵指标数相等，相当于对应指标类元素的求和</p><h2 id="几种特殊的矩阵"><a href="#几种特殊的矩阵" class="headerlink" title="几种特殊的矩阵"></a>几种特殊的矩阵</h2><p>1.对角矩阵<br>2.数量矩阵★<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-08-14.png" alt=""><br>3.单矩阵<br>4.三角矩阵<br>5.对称矩阵</p><h2 id="分块矩阵和其运算"><a href="#分块矩阵和其运算" class="headerlink" title="分块矩阵和其运算"></a>分块矩阵和其运算</h2><p>1 简介：<br><img src="/2018/04/20/math/linear_algebra/2矩阵的运算、行列式/2018-04-22-19-09-25.png" alt=""><br>2 分块矩阵相加和相乘<br>A+B 和 AB<br>相加：要求每个子块矩阵有相同的行数和列数<br>相乘：要求A的列 = B的行</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>1 矩阵的行列式和他的转置的行列式相等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;矩阵的运算&quot;&gt;&lt;a href=&quot;#矩阵的运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵的运算&quot;&gt;&lt;/a&gt;矩阵的运算&lt;/h2&gt;&lt;p&gt;1 矩阵乘法的具体应用&lt;br&gt;&lt;img src=&quot;/2018/04/20/math/linear_algebra/2
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
  </entry>
  
  <entry>
    <title>直线和平面方程</title>
    <link href="http://yoursite.com/2018/04/20/math/calculus/%E7%9B%B4%E7%BA%BF%E5%92%8C%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/20/math/calculus/直线和平面方程/</id>
    <published>2018-04-19T16:51:27.000Z</published>
    <updated>2018-05-04T05:07:24.504Z</updated>
    
    <content type="html"><![CDATA[<p>一、直线</p><p>直线方程</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>ax+by+c=0</td><td>优点：可以表示平面上的任意一条直线缺点：要确定的常数较多</td></tr><tr><td>斜截式</td><td>y=kx+b</td><td>优点：只需要斜率和截距缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>点斜式</td><td>y-y0=k(x-x0)</td><td>优点：只需要一个点和斜率缺点：不能表示垂直x轴的直线x=a</td></tr><tr><td>两点式</td><td>(y-y1)/(y2-y1)=(x-x1)/(x2-x1)</td><td>优点：只需要2个点缺点：不能表示两点x1=x2或y1=y2时的直线（即垂直或水平直线）</td></tr><tr><td>截距式</td><td>x/a+y/b=1</td><td>优点：只需要x轴截距a和y轴截距b缺点：不能表示截距为0时的直线,比如正比例直线</td></tr></tbody></table></div><p>二、平面</p><p>平面方程常用4种</p><div class="table-container"><table><thead><tr><th>方程名称</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>一般式</td><td>Ax+By+Cz+D=0</td><td></td></tr><tr><td>截距式</td><td>x/a+y/b+z/c=1</td><td></td></tr><tr><td>点法式</td><td>A(x-x0)+B(y-y0)+C(z-z0)=0</td><td>向量(A,B,C)为平面的法向量</td></tr><tr><td>法线式</td><td>xcosα+ycosβ+zcosγ=p</td><td>其中cosα、cosβ、cosγ是平面法矢量的方向余弦，p为原点到平面的距离。</td></tr></tbody></table></div><p>​                                                                                 平面方程全部7种</p><p><img src="/2018/04/20/math/calculus/直线和平面方程/20180310005032167.png" alt=""><br><img src="/2018/04/20/math/calculus/直线和平面方程/2018031000522558.png" alt=""></p><p>三、超平面</p><p>二维空间的超平面是一条直线，三维空间的超平面是一个平面，而N维空间的超平面则是N-1维的仿射空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、直线&lt;/p&gt;
&lt;p&gt;直线方程&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方程名称&lt;/th&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="calculus" scheme="http://yoursite.com/categories/math/calculus/"/>
    
    
      <category term="平面方程" scheme="http://yoursite.com/tags/%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>贷款分析</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/%E8%B4%B7%E6%AC%BE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/贷款分析/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-05-04T08:07:29.339Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans_2007 = pd.read_csv(<span class="string">'LoanStats3a.csv'</span>, skiprows=<span class="number">1</span>)</span><br><span class="line">half_count = len(loans_2007) / <span class="number">2</span></span><br><span class="line">loans_2007 = loans_2007.dropna(thresh=half_count, axis=<span class="number">1</span>)</span><br><span class="line">loans_2007 = loans_2007.drop([<span class="string">'desc'</span>, <span class="string">'url'</span>],axis=<span class="number">1</span>)</span><br><span class="line">loans_2007.to_csv(<span class="string">'loans_2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>D:\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py:2717: DtypeWarning: Columns (0,47) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans_2007 = pd.read_csv(<span class="string">"loans_2007.csv"</span>)</span><br><span class="line"><span class="comment">#loans_2007.drop_duplicates()</span></span><br><span class="line">print(loans_2007.iloc[<span class="number">0</span>].head(<span class="number">15</span>))</span><br><span class="line">print(loans_2007.shape[<span class="number">1</span>]) <span class="comment">#共52个特征</span></span><br></pre></td></tr></table></figure><pre><code>id                        1077501member_id              1.2966e+06loan_amnt                    5000funded_amnt                  5000funded_amnt_inv              4975term                    36 monthsint_rate                   10.65%installment                162.87grade                           Bsub_grade                      B2emp_title                     NaNemp_length              10+ yearshome_ownership               RENTannual_inc                  24000verification_status      VerifiedName: 0, dtype: object52D:\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py:2717: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><h2 id="预处理——数据清洗"><a href="#预处理——数据清洗" class="headerlink" title="预处理——数据清洗"></a>预处理——数据清洗</h2><p>先直观上 去掉不需要的特征。<br>包括： 1.预测后才出现的特征（比如：实际发放的贷款）、2.高度相关的特征（比如：123和ABC）、3。关系不大的特征（比如：ID等）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loans_2007 = loans_2007.drop([<span class="string">"id"</span>, <span class="string">"member_id"</span>, <span class="string">"funded_amnt"</span>, <span class="string">"funded_amnt_inv"</span>, <span class="string">"grade"</span>, <span class="string">"sub_grade"</span>, <span class="string">"emp_title"</span>, <span class="string">"issue_d"</span>], axis=<span class="number">1</span>)</span><br><span class="line">loans_2007 = loans_2007.drop([<span class="string">"zip_code"</span>, <span class="string">"out_prncp"</span>, <span class="string">"out_prncp_inv"</span>, <span class="string">"total_pymnt"</span>, <span class="string">"total_pymnt_inv"</span>, <span class="string">"total_rec_prncp"</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loans_2007 = loans_2007.drop([<span class="string">"total_rec_int"</span>, <span class="string">"total_rec_late_fee"</span>, <span class="string">"recoveries"</span>, <span class="string">"collection_recovery_fee"</span>, <span class="string">"last_pymnt_d"</span>, <span class="string">"last_pymnt_amnt"</span>], axis=<span class="number">1</span>)</span><br><span class="line">print(loans_2007.iloc[<span class="number">0</span>])</span><br><span class="line">print(loans_2007.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>loan_amnt                            5000term                            36 monthsint_rate                           10.65%installment                        162.87emp_length                      10+ yearshome_ownership                       RENTannual_inc                          24000verification_status              Verifiedloan_status                    Fully Paidpymnt_plan                              npurpose                       credit_cardtitle                            Computeraddr_state                             AZdti                                 27.65delinq_2yrs                             0earliest_cr_line                 Jan-1985inq_last_6mths                          1open_acc                                3pub_rec                                 0revol_bal                           13648revol_util                          83.7%total_acc                               9initial_list_status                     flast_credit_pull_d               Nov-2016collections_12_mths_ex_med              0policy_code                             1application_type               INDIVIDUALacc_now_delinq                          0chargeoff_within_12_mths                0delinq_amnt                             0pub_rec_bankruptcies                    0tax_liens                               0Name: 0, dtype: object32</code></pre><h2 id="预处理——label列属性数字替换"><a href="#预处理——label列属性数字替换" class="headerlink" title="预处理——label列属性数字替换"></a>预处理——label列属性数字替换</h2><p>对label属性进行统计，选择适合用于分类的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(loans_2007[<span class="string">'loan_status'</span>].value_counts())</span><br></pre></td></tr></table></figure><pre><code>Fully Paid                                             33902Charged Off                                             5658Does not meet the credit policy. Status:Fully Paid      1988Does not meet the credit policy. Status:Charged Off      761Current                                                  201Late (31-120 days)                                        10In Grace Period                                            9Late (16-30 days)                                          5Default                                                    1Name: loan_status, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性为Fully Paid 和 Charged off 的替换为 1 和 0</span></span><br><span class="line"><span class="comment"># 只取这部分数据</span></span><br><span class="line">loans_2007 = loans_2007[(loans_2007[<span class="string">'loan_status'</span>] == <span class="string">"Fully Paid"</span>) | (loans_2007[<span class="string">'loan_status'</span>] == <span class="string">"Charged Off"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换指定列的 指定属性为 指定的值★</span></span><br><span class="line">status_replace = &#123;</span><br><span class="line">    <span class="string">"loan_status"</span> : &#123;</span><br><span class="line">        <span class="string">"Fully Paid"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"Charged Off"</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loans_2007 = loans_2007.replace(status_replace)</span><br></pre></td></tr></table></figure><h2 id="预处理——最后再去掉列属性只有一个的列"><a href="#预处理——最后再去掉列属性只有一个的列" class="headerlink" title="预处理——最后再去掉列属性只有一个的列"></a>预处理——最后再去掉列属性只有一个的列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#let's look for any columns that contain only one unique value and remove them</span></span><br><span class="line"></span><br><span class="line">orig_columns = loans_2007.columns</span><br><span class="line">drop_columns = []</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> orig_columns:</span><br><span class="line">    col_series = loans_2007[col].dropna().unique() <span class="comment">#这里要去掉空值nan以后 再判定列的属性是否只有一个</span></span><br><span class="line">    <span class="keyword">if</span> len(col_series) == <span class="number">1</span>:</span><br><span class="line">        drop_columns.append(col)</span><br><span class="line">loans_2007 = loans_2007.drop(drop_columns, axis=<span class="number">1</span>)</span><br><span class="line">print(drop_columns)</span><br><span class="line">print(loans_2007.shape)</span><br><span class="line">loans_2007.to_csv(<span class="string">'filtered_loans_2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;initial_list_status&#39;, &#39;collections_12_mths_ex_med&#39;, &#39;policy_code&#39;, &#39;application_type&#39;, &#39;acc_now_delinq&#39;, &#39;chargeoff_within_12_mths&#39;, &#39;delinq_amnt&#39;, &#39;tax_liens&#39;](39560, 24)</code></pre><p>处理完毕，最终得到24列数据</p><h2 id="预处理——缺失值"><a href="#预处理——缺失值" class="headerlink" title="预处理——缺失值"></a>预处理——缺失值</h2><p>先查找列缺失值多的，去掉这些列，只剩下缺失值少的列。之后直接去掉那些样本行即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans = pd.read_csv(<span class="string">'filtered_loans_2007.csv'</span>)</span><br><span class="line">null_counts = loans.isnull().sum()</span><br><span class="line">print(null_counts)</span><br></pre></td></tr></table></figure><pre><code>loan_amnt                 0term                      0int_rate                  0installment               0emp_length                0home_ownership            0annual_inc                0verification_status       0loan_status               0pymnt_plan                0purpose                   0title                    10addr_state                0dti                       0delinq_2yrs               0earliest_cr_line          0inq_last_6mths            0open_acc                  0pub_rec                   0revol_bal                 0revol_util               50total_acc                 0last_credit_pull_d        2pub_rec_bankruptcies    697dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loans = loans.drop(<span class="string">"pub_rec_bankruptcies"</span>, axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.dropna(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>object     12float64    10int64       1dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理完缺失值，统计每种数据类型的列 有几个</span></span><br><span class="line">print(loans.dtypes.value_counts())</span><br></pre></td></tr></table></figure><h2 id="预处理——字符串值转换"><a href="#预处理——字符串值转换" class="headerlink" title="预处理——字符串值转换"></a>预处理——字符串值转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object_columns_df = loans.select_dtypes(include=[<span class="string">"object"</span>])</span><br><span class="line">print(object_columns_df.iloc[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>term                     36 monthsint_rate                    10.65%emp_length               10+ yearshome_ownership                RENTverification_status       Verifiedpymnt_plan                       npurpose                credit_cardtitle                     Computeraddr_state                      AZearliest_cr_line          Jan-1985revol_util                   83.7%last_credit_pull_d        Nov-2016Name: 0, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'home_ownership'</span>, <span class="string">'verification_status'</span>, <span class="string">'emp_length'</span>, <span class="string">'term'</span>, <span class="string">'addr_state'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cols:</span><br><span class="line">    print(loans[c].value_counts())</span><br></pre></td></tr></table></figure><pre><code>RENT        18780MORTGAGE    17574OWN          3045OTHER          96NONE            3Name: home_ownership, dtype: int64Not Verified       16856Verified           12705Source Verified     9937Name: verification_status, dtype: int6410+ years    8821&lt; 1 year     45632 years      43713 years      40744 years      34095 years      32701 year       32276 years      22127 years      17568 years      14729 years      1254n/a          1069Name: emp_length, dtype: int64 36 months    29041 60 months    10457Name: term, dtype: int64CA    7070NY    3788FL    2856TX    2714NJ    1838IL    1517PA    1504VA    1400GA    1393MA    1336OH    1208MD    1049AZ     874WA     834CO     786NC     780CT     747MI     722MO     682MN     611NV     492SC     470WI     453AL     446OR     445LA     435KY     325OK     298KS     269UT     256AR     243DC     211RI     198NM     188WV     176HI     172NH     172DE     113MT      84WY      83AK      79SD      63VT      54MS      19TN      17IN       9ID       6IA       5NE       5ME       3Name: addr_state, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这2个特征内容差不多，选择去掉title列</span></span><br><span class="line">print(loans[<span class="string">"purpose"</span>].value_counts())</span><br><span class="line">print(loans[<span class="string">"title"</span>].value_counts())</span><br></pre></td></tr></table></figure><pre><code>debt_consolidation    18533credit_card            5099other                  3963home_improvement       2965major_purchase         2181small_business         1815car                    1544wedding                 945medical                 692moving                  581vacation                379house                   378educational             320renewable_energy        103Name: purpose, dtype: int64Debt Consolidation                         2168Debt Consolidation Loan                    1706Personal Loan                               658Consolidation                               509debt consolidation                          502Credit Card Consolidation                   356Home Improvement                            354Debt consolidation                          333Small Business Loan                         322Credit Card Loan                            313Personal                                    308Consolidation Loan                          255Home Improvement Loan                       246personal loan                               234personal                                    220Loan                                        212Wedding Loan                                209consolidation                               200Car Loan                                    200Other Loan                                  190Credit Card Payoff                          155Wedding                                     152Major Purchase Loan                         144Credit Card Refinance                       143Consolidate                                 127Medical                                     122Credit Card                                 117home improvement                            111My Loan                                      94Credit Cards                                 93                                           ... DebtConsolidationn                            1 Freedom                                      1Credit Card Consolidation Loan - SEG          1SOLAR PV                                      1Pay on Credit card                            1To pay off balloon payments due               1Paying off the debt                           1Payoff ING PLOC                               1Josh CC Loan                                  1House payoff                                  1Taking care of Business                       1Gluten Free Bakery in ideal town for it       1Startup Money for Small Business              1FundToFinanceCar                              1getting ready for Baby                        1Dougs Wedding Loan                            1d rock                                        1LC Loan 2                                     1swimming pool repair                          1engagement                                    1Cut the credit cards Loan                     1vinman                                        1working hard to get out of debt               1consolidate the rest of my debt               1Medical/Vacation                              12BDebtFree                                    1Paying Off High Interest Credit Cards!        1Baby on the way!                              1cart loan                                     1Consolidaton                                  1Name: title, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mapping_dict = &#123;</span><br><span class="line">    <span class="string">"emp_length"</span>: &#123;</span><br><span class="line">        <span class="string">"10+ years"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"9 years"</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">"8 years"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">"7 years"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">"6 years"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">"5 years"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">"4 years"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">"3 years"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"2 years"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"1 year"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"&lt; 1 year"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"n/a"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">loans = loans.drop([<span class="string">"last_credit_pull_d"</span>, <span class="string">"earliest_cr_line"</span>, <span class="string">"addr_state"</span>, <span class="string">"title"</span>], axis=<span class="number">1</span>)</span><br><span class="line">loans[<span class="string">"int_rate"</span>] = loans[<span class="string">"int_rate"</span>].str.rstrip(<span class="string">"%"</span>).astype(<span class="string">"float"</span>)</span><br><span class="line">loans[<span class="string">"revol_util"</span>] = loans[<span class="string">"revol_util"</span>].str.rstrip(<span class="string">"%"</span>).astype(<span class="string">"float"</span>)</span><br><span class="line">loans = loans.replace(mapping_dict)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat_columns = [<span class="string">"home_ownership"</span>, <span class="string">"verification_status"</span>, <span class="string">"emp_length"</span>, <span class="string">"purpose"</span>, <span class="string">"term"</span>]</span><br><span class="line">dummy_df = pd.get_dummies(loans[cat_columns])</span><br><span class="line">loans = pd.concat([loans, dummy_df], axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.drop(cat_columns, axis=<span class="number">1</span>)</span><br><span class="line">loans = loans.drop(<span class="string">"pymnt_plan"</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loans.to_csv(<span class="string">'cleaned_loans2007.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="模型训练、评估、调参——训练目标是盈利最大化"><a href="#模型训练、评估、调参——训练目标是盈利最大化" class="headerlink" title="模型训练、评估、调参——训练目标是盈利最大化"></a>模型训练、评估、调参——训练目标是盈利最大化</h2><p>模型训练目标：<br><img src="/2018/04/19/machine_learning_in_action/贷款分析/QQ%E6%88%AA%E5%9B%BE20180425000738.jpg" alt=""><br>是确保TP的数量至少是FP的10倍。<br>然而这里不适合使用精度，故我们选择 TPR 和 FPR ，要使 TPR尽可能大， FPR 尽可能小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">loans = pd.read_csv(<span class="string">"cleaned_loans2007.csv"</span>)</span><br><span class="line">print(loans.info())</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 39498 entries, 0 to 39497Data columns (total 37 columns):loan_amnt                              39498 non-null float64int_rate                               39498 non-null float64installment                            39498 non-null float64annual_inc                             39498 non-null float64loan_status                            39498 non-null int64dti                                    39498 non-null float64delinq_2yrs                            39498 non-null float64inq_last_6mths                         39498 non-null float64open_acc                               39498 non-null float64pub_rec                                39498 non-null float64revol_bal                              39498 non-null float64revol_util                             39498 non-null float64total_acc                              39498 non-null float64home_ownership_MORTGAGE                39498 non-null int64home_ownership_NONE                    39498 non-null int64home_ownership_OTHER                   39498 non-null int64home_ownership_OWN                     39498 non-null int64home_ownership_RENT                    39498 non-null int64verification_status_Not Verified       39498 non-null int64verification_status_Source Verified    39498 non-null int64verification_status_Verified           39498 non-null int64purpose_car                            39498 non-null int64purpose_credit_card                    39498 non-null int64purpose_debt_consolidation             39498 non-null int64purpose_educational                    39498 non-null int64purpose_home_improvement               39498 non-null int64purpose_house                          39498 non-null int64purpose_major_purchase                 39498 non-null int64purpose_medical                        39498 non-null int64purpose_moving                         39498 non-null int64purpose_other                          39498 non-null int64purpose_renewable_energy               39498 non-null int64purpose_small_business                 39498 non-null int64purpose_vacation                       39498 non-null int64purpose_wedding                        39498 non-null int64term_ 36 months                        39498 non-null int64term_ 60 months                        39498 non-null int64dtypes: float64(12), int64(25)memory usage: 11.1 MBNone</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">cols = loans.columns</span><br><span class="line">train_cols = cols.drop(<span class="string">"loan_status"</span>)</span><br><span class="line">features = loans[train_cols]</span><br><span class="line">target = loans[<span class="string">"loan_status"</span>]</span><br><span class="line">lr.fit(features, target)</span><br><span class="line">predictions = lr.predict(features)</span><br></pre></td></tr></table></figure><h3 id="第一次，逻辑回归"><a href="#第一次，逻辑回归" class="headerlink" title="第一次，逻辑回归"></a>第一次，逻辑回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict, KFold</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br><span class="line"><span class="keyword">print</span> predictions[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>0.9990844384060.9980492995210     11     12     13     14     15     16     17     18     19     110    111    112    113    114    115    116    117    118    119    1dtype: int64</code></pre><p>因为样本不均衡导致效果不好。</p><h3 id="第二次，逻辑回归，设置模型参数-class-weight-”balanced”-，让模型自动添加惩罚权重"><a href="#第二次，逻辑回归，设置模型参数-class-weight-”balanced”-，让模型自动添加惩罚权重" class="headerlink" title="第二次，逻辑回归，设置模型参数 class_weight=”balanced” ，让模型自动添加惩罚权重"></a>第二次，逻辑回归，设置模型参数 class_weight=”balanced” ，让模型自动添加惩罚权重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">lr = LogisticRegression(class_weight=<span class="string">"balanced"</span>)</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br><span class="line"><span class="keyword">print</span> predictions[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>0.6707817714640.4007802801920     11     02     03     14     15     06     07     08     09     010    111    012    113    114    015    016    117    118    119    0dtype: int64</code></pre><p>模型终于起了效果，但还是不理想</p><h3 id="第三次，逻辑回归，手动调节-cclass-weight-参数设置惩罚系数"><a href="#第三次，逻辑回归，手动调节-cclass-weight-参数设置惩罚系数" class="headerlink" title="第三次，逻辑回归，手动调节 cclass_weight 参数设置惩罚系数"></a>第三次，逻辑回归，手动调节 cclass_weight 参数设置惩罚系数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">penalty = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression(class_weight=penalty)</span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(lr, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br><span class="line"></span><br><span class="line">print(tpr)</span><br><span class="line">print(fpr)</span><br></pre></td></tr></table></figure><pre><code>0.7317995215450.478985635751</code></pre><p>效果又好了一些</p><h3 id="第四次，随机森林"><a href="#第四次，随机森林" class="headerlink" title="第四次，随机森林"></a>第四次，随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_predict</span><br><span class="line">rf = RandomForestClassifier(n_estimators=<span class="number">10</span>,class_weight=<span class="string">"balanced"</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#print help(RandomForestClassifier)</span></span><br><span class="line">kf = KFold(features.shape[<span class="number">0</span>], random_state=<span class="number">1</span>)</span><br><span class="line">predictions = cross_val_predict(rf, features, target, cv=kf)</span><br><span class="line">predictions = pd.Series(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># False positives.</span></span><br><span class="line">fp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">fp = len(predictions[fp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True positives.</span></span><br><span class="line">tp_filter = (predictions == <span class="number">1</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">tp = len(predictions[tp_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># False negatives.</span></span><br><span class="line">fn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">1</span>)</span><br><span class="line">fn = len(predictions[fn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># True negatives</span></span><br><span class="line">tn_filter = (predictions == <span class="number">0</span>) &amp; (loans[<span class="string">"loan_status"</span>] == <span class="number">0</span>)</span><br><span class="line">tn = len(predictions[tn_filter])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rates</span></span><br><span class="line">tpr = tp / float((tp + fn))</span><br><span class="line">fpr = fp / float((fp + tn))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="pandas列属性数字替换" scheme="http://yoursite.com/tags/pandas%E5%88%97%E5%B1%9E%E6%80%A7%E6%95%B0%E5%AD%97%E6%9B%BF%E6%8D%A2/"/>
    
      <category term="pandas缺失值处理" scheme="http://yoursite.com/tags/pandas%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>1机器学习流程</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_theory/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_theory/1机器学习流程/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-05-04T06:38:20.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据收集并给定标签"><a href="#一、数据收集并给定标签" class="headerlink" title="一、数据收集并给定标签"></a>一、数据收集并给定标签</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="1）归一化"><a href="#1）归一化" class="headerlink" title="1）归一化"></a>1）归一化</h3><h3 id="2）数据清洗"><a href="#2）数据清洗" class="headerlink" title="2）数据清洗"></a>2）数据清洗</h3><p>先直观上 去掉不需要的列特征。 包括：<br>1.预测后才出现的特征（比如：实际发放的贷款）、<br>2.高度相关的特征（比如：123和ABC）、<br>3.关系不大的特征（比如：ID等）<br>4.列属性只有一个值的<br>　需要先排除列中 nan 值，再用 unique() 判定</p><h3 id="3）缺失值处理"><a href="#3）缺失值处理" class="headerlink" title="3）缺失值处理"></a>3）缺失值处理</h3><p>先查找列缺失值多的，去掉这些列，只剩下缺失值少的列。之后直接去掉那些样本行即可</p><h3 id="4）字符串值处理"><a href="#4）字符串值处理" class="headerlink" title="4）字符串值处理"></a>4）字符串值处理</h3><p>把 object 类型转为 int 和 float 类型。包括：<br>1.one-hot 编码<br>2.列属性数字替换</p><h3 id="5）数据样本均衡分析"><a href="#5）数据样本均衡分析" class="headerlink" title="5）数据样本均衡分析"></a>5）数据样本均衡分析</h3><p>样本分布不均衡：指的是 label 不同的样本数量差距很大。<br>如果数据样本不均衡，容易导致分类器效果很差。<br>为了解决，有以下2种方案：</p><p>P1：oversample 或 undersample<br>P2：用模型参数 调节分类惩罚权重比参数： class_weight，适用于所有分类算法</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><h2 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h2><h1 id="二、训练一个分类器"><a href="#二、训练一个分类器" class="headerlink" title="二、训练一个分类器"></a>二、训练一个分类器</h1><h2 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h2><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h1 id="三、模型测试、评估"><a href="#三、模型测试、评估" class="headerlink" title="三、模型测试、评估"></a>三、模型测试、评估</h1><h2 id="选择模型评估方法"><a href="#选择模型评估方法" class="headerlink" title="选择模型评估方法"></a>选择模型评估方法</h2><p>1.交叉验证 + 指标（比如：精度、TPR）<br>2.均方误差<br>3.交叉熵</p><h2 id="模型评估结果分析"><a href="#模型评估结果分析" class="headerlink" title="模型评估结果分析"></a>模型评估结果分析</h2><p>如果分类效果不佳，可采取以下措施：</p><ul><li>调节分类惩罚系数比（可在模型参数中调节）</li><li>调节模型其他参数</li><li>考虑 过拟合 可能，去掉一些列</li><li>集成多个模型</li><li>尝试其他模型</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、数据收集并给定标签&quot;&gt;&lt;a href=&quot;#一、数据收集并给定标签&quot; class=&quot;headerlink&quot; title=&quot;一、数据收集并给定标签&quot;&gt;&lt;/a&gt;一、数据收集并给定标签&lt;/h1&gt;&lt;h2 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class
      
    
    </summary>
    
      <category term="machine_learning_theory" scheme="http://yoursite.com/categories/machine-learning-theory/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PCA 手写主成分分析</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/PCA%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/PCA主成分分析/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-24T07:12:55.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PCA-手写主成分分析"><a href="#PCA-手写主成分分析" class="headerlink" title="PCA 手写主成分分析"></a>PCA 手写主成分分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">'iris.data'</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>5.1</th>      <th>3.5</th>      <th>1.4</th>      <th>0.2</th>      <th>Iris-setosa</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.4</td>      <td>3.9</td>      <td>1.7</td>      <td>0.4</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1 数据预处理"></a>1 数据预处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上列名</span></span><br><span class="line">df.columns=[<span class="string">'sepal_len'</span>, <span class="string">'sepal_wid'</span>, <span class="string">'petal_len'</span>, <span class="string">'petal_wid'</span>, <span class="string">'class'</span>]</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_len</th>      <th>sepal_wid</th>      <th>petal_len</th>      <th>petal_wid</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.4</td>      <td>3.9</td>      <td>1.7</td>      <td>0.4</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><h2 id="2-画图，进行降维特征分析"><a href="#2-画图，进行降维特征分析" class="headerlink" title="2 画图，进行降维特征分析"></a>2 画图，进行降维特征分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split data table into data X and class labels y</span></span><br><span class="line"></span><br><span class="line">X = df.iloc[:,<span class="number">0</span>:<span class="number">4</span>].values</span><br><span class="line">y = df.iloc[:,<span class="number">4</span>].values</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把每个特征用于分类的结果，都画成条形图，观察哪个特征更容易划分种类</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">label_dict = &#123;<span class="number">1</span>: <span class="string">'Iris-Setosa'</span>,</span><br><span class="line">              <span class="number">2</span>: <span class="string">'Iris-Versicolor'</span>,</span><br><span class="line">              <span class="number">3</span>: <span class="string">'Iris-Virgnica'</span>&#125;</span><br><span class="line"></span><br><span class="line">feature_dict = &#123;<span class="number">0</span>: <span class="string">'sepal length [cm]'</span>,</span><br><span class="line">                <span class="number">1</span>: <span class="string">'sepal width [cm]'</span>,</span><br><span class="line">                <span class="number">2</span>: <span class="string">'petal length [cm]'</span>,</span><br><span class="line">                <span class="number">3</span>: <span class="string">'petal width [cm]'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, cnt+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> lab <span class="keyword">in</span> (<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>):</span><br><span class="line">        plt.hist(X[y==lab, cnt],</span><br><span class="line">                     label=lab,</span><br><span class="line">                     bins=<span class="number">10</span>,</span><br><span class="line">                     alpha=<span class="number">0.3</span>,)</span><br><span class="line">    plt.xlabel(feature_dict[cnt])</span><br><span class="line">    plt.legend(loc=<span class="string">'upper right'</span>, fancybox=<span class="keyword">True</span>, fontsize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_7_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">X_std = StandardScaler().fit_transform(X)</span><br></pre></td></tr></table></figure><h2 id="3-协方差分析（发现有2个有用特征，决定从4维降到2维）"><a href="#3-协方差分析（发现有2个有用特征，决定从4维降到2维）" class="headerlink" title="3 协方差分析（发现有2个有用特征，决定从4维降到2维）"></a>3 协方差分析（发现有2个有用特征，决定从4维降到2维）</h2><h3 id="1-计算样本X的-协方差矩阵（有4个特征，所以是4x4）"><a href="#1-计算样本X的-协方差矩阵（有4个特征，所以是4x4）" class="headerlink" title="1 计算样本X的 协方差矩阵（有4个特征，所以是4x4）"></a>1 计算样本X的 协方差矩阵（有4个特征，所以是4x4）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自己算 协方差矩阵</span></span><br><span class="line">mean_vec = np.mean(X_std, axis=<span class="number">0</span>)</span><br><span class="line">cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[<span class="number">0</span>]<span class="number">-1</span>)</span><br><span class="line">print(<span class="string">'Covariance matrix \n%s'</span> %cov_mat)</span><br></pre></td></tr></table></figure><pre><code>Covariance matrix [[ 1.00675676 -0.10448539  0.87716999  0.82249094] [-0.10448539  1.00675676 -0.41802325 -0.35310295] [ 0.87716999 -0.41802325  1.00675676  0.96881642] [ 0.82249094 -0.35310295  0.96881642  1.00675676]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy算 协方差矩阵</span></span><br><span class="line">print(<span class="string">'NumPy covariance matrix: \n%s'</span> %np.cov(X_std.T))</span><br></pre></td></tr></table></figure><pre><code>NumPy covariance matrix: [[ 1.00675676 -0.10448539  0.87716999  0.82249094] [-0.10448539  1.00675676 -0.41802325 -0.35310295] [ 0.87716999 -0.41802325  1.00675676  0.96881642] [ 0.82249094 -0.35310295  0.96881642  1.00675676]]</code></pre><h3 id="2-对协方差矩阵进行-特征值分解"><a href="#2-对协方差矩阵进行-特征值分解" class="headerlink" title="2 对协方差矩阵进行 特征值分解"></a>2 对协方差矩阵进行 特征值分解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cov_mat = np.cov(X_std.T)</span><br><span class="line"></span><br><span class="line">eig_vals, eig_vecs = np.linalg.eig(cov_mat)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Eigenvectors \n%s'</span> %eig_vecs)</span><br><span class="line">print(<span class="string">'\nEigenvalues \n%s'</span> %eig_vals)</span><br></pre></td></tr></table></figure><pre><code>Eigenvectors [[ 0.52308496 -0.36956962 -0.72154279  0.26301409] [-0.25956935 -0.92681168  0.2411952  -0.12437342] [ 0.58184289 -0.01912775  0.13962963 -0.80099722] [ 0.56609604 -0.06381646  0.63380158  0.52321917]]Eigenvalues [ 2.92442837  0.93215233  0.14946373  0.02098259]</code></pre><h3 id="3-把特征值从大到小排列，并配对特征向量"><a href="#3-把特征值从大到小排列，并配对特征向量" class="headerlink" title="3 把特征值从大到小排列，并配对特征向量"></a>3 把特征值从大到小排列，并配对特征向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Make a list of (eigenvalue, eigenvector) tuples</span></span><br><span class="line">eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(eig_vals))]</span><br><span class="line"><span class="keyword">print</span> (eig_pairs)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------'</span>)</span><br><span class="line"><span class="comment"># Sort the (eigenvalue, eigenvector) tuples from high to low</span></span><br><span class="line">eig_pairs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visually confirm that the list is correctly sorted by decreasing eigenvalues</span></span><br><span class="line">print(<span class="string">'Eigenvalues in descending order:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eig_pairs:</span><br><span class="line">    print(i[<span class="number">0</span>],<span class="string">"对应"</span>,i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[(2.9244283691111144, array([ 0.52308496, -0.25956935,  0.58184289,  0.56609604])), (0.93215233025350641, array([-0.36956962, -0.92681168, -0.01912775, -0.06381646])), (0.14946373489813314, array([-0.72154279,  0.2411952 ,  0.13962963,  0.63380158])), (0.020982592764270606, array([ 0.26301409, -0.12437342, -0.80099722,  0.52321917]))]----------Eigenvalues in descending order:2.92442836911 对应 [ 0.52308496 -0.25956935  0.58184289  0.56609604]0.932152330254 对应 [-0.36956962 -0.92681168 -0.01912775 -0.06381646]0.149463734898 对应 [-0.72154279  0.2411952   0.13962963  0.63380158]0.0209825927643 对应 [ 0.26301409 -0.12437342 -0.80099722  0.52321917]</code></pre><h3 id="4-通过前面特征值累加所占比重-的图像，判断取前多少特征值合适，组成投影矩阵W"><a href="#4-通过前面特征值累加所占比重-的图像，判断取前多少特征值合适，组成投影矩阵W" class="headerlink" title="4 通过前面特征值累加所占比重 的图像，判断取前多少特征值合适，组成投影矩阵W"></a>4 通过前面特征值累加所占比重 的图像，判断取前多少特征值合适，组成投影矩阵W</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tot = sum(eig_vals)</span><br><span class="line">var_exp = [(i / tot)*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> sorted(eig_vals, reverse=<span class="keyword">True</span>)]</span><br><span class="line"><span class="keyword">print</span> (var_exp)</span><br><span class="line">cum_var_exp = np.cumsum(var_exp)</span><br><span class="line">cum_var_exp</span><br></pre></td></tr></table></figure><pre><code>[72.620033326920336, 23.147406858644135, 3.7115155645845164, 0.52104424985101538]array([  72.62003333,   95.76744019,   99.47895575,  100.        ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-----------'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.cumsum(a))</span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4]-----------[ 1  3  6 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(range(<span class="number">4</span>), var_exp, alpha=<span class="number">0.5</span>, align=<span class="string">'center'</span>,</span><br><span class="line">            label=<span class="string">'individual explained variance'</span>)</span><br><span class="line">plt.step(range(<span class="number">4</span>), cum_var_exp, where=<span class="string">'mid'</span>,</span><br><span class="line">             label=<span class="string">'cumulative explained variance'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Explained variance ratio'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Principal components'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_20_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">matrix_w = np.hstack((eig_pairs[<span class="number">0</span>][<span class="number">1</span>].reshape(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">                      eig_pairs[<span class="number">1</span>][<span class="number">1</span>].reshape(<span class="number">4</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Matrix W:\n'</span>, matrix_w)</span><br></pre></td></tr></table></figure><pre><code>Matrix W: [[ 0.52308496 -0.36956962] [-0.25956935 -0.92681168] [ 0.58184289 -0.01912775] [ 0.56609604 -0.06381646]]</code></pre><h2 id="4-开始降维——用投影矩阵降维样本矩阵X"><a href="#4-开始降维——用投影矩阵降维样本矩阵X" class="headerlink" title="4 开始降维——用投影矩阵降维样本矩阵X"></a>4 开始降维——用投影矩阵降维样本矩阵X</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y = X_std.dot(matrix_w)</span><br></pre></td></tr></table></figure><h2 id="5-画图观察-降维前-和-降维后的样本分布"><a href="#5-画图观察-降维前-和-降维后的样本分布" class="headerlink" title="5 画图观察 降维前 和 降维后的样本分布"></a>5 画图观察 降维前 和 降维后的样本分布</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> lab, col <span class="keyword">in</span> zip((<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>),</span><br><span class="line">                        (<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>)):</span><br><span class="line">     plt.scatter(X[y==lab, <span class="number">0</span>],</span><br><span class="line">                X[y==lab, <span class="number">1</span>],</span><br><span class="line">                label=lab,</span><br><span class="line">                c=col)</span><br><span class="line">plt.xlabel(<span class="string">'sepal_len'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal_wid'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_25_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> lab, col <span class="keyword">in</span> zip((<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>),</span><br><span class="line">                        (<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>)):</span><br><span class="line">     plt.scatter(Y[y==lab, <span class="number">0</span>],</span><br><span class="line">                Y[y==lab, <span class="number">1</span>],</span><br><span class="line">                label=lab,</span><br><span class="line">                c=col)</span><br><span class="line">plt.xlabel(<span class="string">'Principal Component 1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Principal Component 2'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower center'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/04/19/machine_learning_in_action/PCA主成分分析/output_26_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PCA-手写主成分分析&quot;&gt;&lt;a href=&quot;#PCA-手写主成分分析&quot; class=&quot;headerlink&quot; title=&quot;PCA 手写主成分分析&quot;&gt;&lt;/a&gt;PCA 手写主成分分析&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>Pandas常用功能、函数</title>
    <link href="http://yoursite.com/2018/04/19/pandas/Pandas%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/19/pandas/Pandas常用功能、函数/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-23T08:35:51.474Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>基于NLP的股价预测</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/%E5%9F%BA%E4%BA%8ENLP%E7%9A%84%E8%82%A1%E4%BB%B7%E9%A2%84%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/基于NLP的股价预测/</id>
    <published>2018-04-19T04:49:42.000Z</published>
    <updated>2018-04-24T06:57:45.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于NLP的股价预测"><a href="#基于NLP的股价预测" class="headerlink" title="基于NLP的股价预测"></a>基于NLP的股价预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'Combined_News_DJIA.csv'</span>)</span><br></pre></td></tr></table></figure><ul><li>每行是某公司 这一天股市数据；label表示当天涨/跌，Top表示依重要程度排列的当天新闻事件</li><li>通过NLP处理可以把这些字符串转换为 机器认识的语言</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Label</th>      <th>Top1</th>      <th>Top2</th>      <th>Top3</th>      <th>Top4</th>      <th>Top5</th>      <th>Top6</th>      <th>Top7</th>      <th>Top8</th>      <th>...</th>      <th>Top16</th>      <th>Top17</th>      <th>Top18</th>      <th>Top19</th>      <th>Top20</th>      <th>Top21</th>      <th>Top22</th>      <th>Top23</th>      <th>Top24</th>      <th>Top25</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2008-08-08</td>      <td>0</td>      <td>b"Georgia 'downs two Russian warplanes' as cou...</td>      <td>b'BREAKING: Musharraf to be impeached.'</td>      <td>b'Russia Today: Columns of troops roll into So...</td>      <td>b'Russian tanks are moving towards the capital...</td>      <td>b"Afghan children raped with 'impunity,' U.N. ...</td>      <td>b'150 Russian tanks have entered South Ossetia...</td>      <td>b"Breaking: Georgia invades South Ossetia, Rus...</td>      <td>b"The 'enemy combatent' trials are nothing but...</td>      <td>...</td>      <td>b'Georgia Invades South Ossetia - if Russia ge...</td>      <td>b'Al-Qaeda Faces Islamist Backlash'</td>      <td>b'Condoleezza Rice: "The US would not act to p...</td>      <td>b'This is a busy day:  The European Union has ...</td>      <td>b"Georgia will withdraw 1,000 soldiers from Ir...</td>      <td>b'Why the Pentagon Thinks Attacking Iran is a ...</td>      <td>b'Caucasus in crisis: Georgia invades South Os...</td>      <td>b'Indian shoe manufactory  - And again in a se...</td>      <td>b'Visitors Suffering from Mental Illnesses Ban...</td>      <td>b"No Help for Mexico's Kidnapping Surge"</td>    </tr>    <tr>      <th>1</th>      <td>2008-08-11</td>      <td>1</td>      <td>b'Why wont America and Nato help us? If they w...</td>      <td>b'Bush puts foot down on Georgian conflict'</td>      <td>b"Jewish Georgian minister: Thanks to Israeli ...</td>      <td>b'Georgian army flees in disarray as Russians ...</td>      <td>b"Olympic opening ceremony fireworks 'faked'"</td>      <td>b'What were the Mossad with fraudulent New Zea...</td>      <td>b'Russia angered by Israeli military sale to G...</td>      <td>b'An American citizen living in S.Ossetia blam...</td>      <td>...</td>      <td>b'Israel and the US behind the Georgian aggres...</td>      <td>b'"Do not believe TV, neither Russian nor Geor...</td>      <td>b'Riots are still going on in Montreal (Canada...</td>      <td>b'China to overtake US as largest manufacturer'</td>      <td>b'War in South Ossetia [PICS]'</td>      <td>b'Israeli Physicians Group Condemns State Tort...</td>      <td>b' Russia has just beaten the United States ov...</td>      <td>b'Perhaps *the* question about the Georgia - R...</td>      <td>b'Russia is so much better at war'</td>      <td>b"So this is what it's come to: trading sex fo...</td>    </tr>    <tr>      <th>2</th>      <td>2008-08-12</td>      <td>0</td>      <td>b'Remember that adorable 9-year-old who sang a...</td>      <td>b"Russia 'ends Georgia operation'"</td>      <td>b'"If we had no sexual harassment we would hav...</td>      <td>b"Al-Qa'eda is losing support in Iraq because ...</td>      <td>b'Ceasefire in Georgia: Putin Outmaneuvers the...</td>      <td>b'Why Microsoft and Intel tried to kill the XO...</td>      <td>b'Stratfor: The Russo-Georgian War and the Bal...</td>      <td>b"I'm Trying to Get a Sense of This Whole Geor...</td>      <td>...</td>      <td>b'U.S. troops still in Georgia (did you know t...</td>      <td>b'Why Russias response to Georgia was right'</td>      <td>b'Gorbachev accuses U.S. of making a "serious ...</td>      <td>b'Russia, Georgia, and NATO: Cold War Two'</td>      <td>b'Remember that adorable 62-year-old who led y...</td>      <td>b'War in Georgia: The Israeli connection'</td>      <td>b'All signs point to the US encouraging Georgi...</td>      <td>b'Christopher King argues that the US and NATO...</td>      <td>b'America: The New Mexico?'</td>      <td>b"BBC NEWS | Asia-Pacific | Extinction 'by man...</td>    </tr>    <tr>      <th>3</th>      <td>2008-08-13</td>      <td>0</td>      <td>b' U.S. refuses Israel weapons to attack Iran:...</td>      <td>b"When the president ordered to attack Tskhinv...</td>      <td>b' Israel clears troops who killed Reuters cam...</td>      <td>b'Britain\'s policy of being tough on drugs is...</td>      <td>b'Body of 14 year old found in trunk; Latest (...</td>      <td>b'China has moved 10 *million* quake survivors...</td>      <td>b"Bush announces Operation Get All Up In Russi...</td>      <td>b'Russian forces sink Georgian ships '</td>      <td>...</td>      <td>b'Elephants extinct by 2020?'</td>      <td>b'US humanitarian missions soon in Georgia - i...</td>      <td>b"Georgia's DDOS came from US sources"</td>      <td>b'Russian convoy heads into Georgia, violating...</td>      <td>b'Israeli defence minister: US against strike ...</td>      <td>b'Gorbachev: We Had No Choice'</td>      <td>b'Witness: Russian forces head towards Tbilisi...</td>      <td>b' Quarter of Russians blame U.S. for conflict...</td>      <td>b'Georgian president  says US military will ta...</td>      <td>b'2006: Nobel laureate Aleksander Solzhenitsyn...</td>    </tr>    <tr>      <th>4</th>      <td>2008-08-14</td>      <td>1</td>      <td>b'All the experts admit that we should legalis...</td>      <td>b'War in South Osetia - 89 pictures made by a ...</td>      <td>b'Swedish wrestler Ara Abrahamian throws away ...</td>      <td>b'Russia exaggerated the death toll in South O...</td>      <td>b'Missile That Killed 9 Inside Pakistan May Ha...</td>      <td>b"Rushdie Condemns Random House's Refusal to P...</td>      <td>b'Poland and US agree to missle defense deal. ...</td>      <td>b'Will the Russians conquer Tblisi? Bet on it,...</td>      <td>...</td>      <td>b'Bank analyst forecast Georgian crisis 2 days...</td>      <td>b"Georgia confict could set back Russia's US r...</td>      <td>b'War in the Caucasus is as much the product o...</td>      <td>b'"Non-media" photos of South Ossetia/Georgia ...</td>      <td>b'Georgian TV reporter shot by Russian sniper ...</td>      <td>b'Saudi Arabia: Mother moves to block child ma...</td>      <td>b'Taliban wages war on humanitarian aid workers'</td>      <td>b'Russia: World  "can forget about" Georgia\'s...</td>      <td>b'Darfur rebels accuse Sudan of mounting major...</td>      <td>b'Philippines : Peace Advocate say Muslims nee...</td>    </tr>  </tbody></table><p>5 rows × 27 columns</p></div><h2 id="1-数据简单预处理、划分"><a href="#1-数据简单预处理、划分" class="headerlink" title="1 数据简单预处理、划分"></a>1 数据简单预处理、划分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期划分 训练集 测试集</span></span><br><span class="line">train = data[data[<span class="string">'Date'</span>] &lt; <span class="string">'2015-01-01'</span>]</span><br><span class="line">test = data[data[<span class="string">'Date'</span>] &gt; <span class="string">'2014-12-31'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = train.iloc[<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">print(example)</span><br></pre></td></tr></table></figure><pre><code>b&quot;The commander of a Navy air reconnaissance squadron that provides the President and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example2 = example.lower()</span><br><span class="line">print(example2)</span><br></pre></td></tr></table></figure><pre><code>b&quot;the commander of a navy air reconnaissance squadron that provides the president and the defense secretary the airborne ability to command the nation&#39;s nuclear weapons has been relieved of duty&quot;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example3 = CountVectorizer().build_tokenizer()(example2)</span><br><span class="line">print(example3)</span><br></pre></td></tr></table></figure><pre><code>[&#39;the&#39;, &#39;commander&#39;, &#39;of&#39;, &#39;navy&#39;, &#39;air&#39;, &#39;reconnaissance&#39;, &#39;squadron&#39;, &#39;that&#39;, &#39;provides&#39;, &#39;the&#39;, &#39;president&#39;, &#39;and&#39;, &#39;the&#39;, &#39;defense&#39;, &#39;secretary&#39;, &#39;the&#39;, &#39;airborne&#39;, &#39;ability&#39;, &#39;to&#39;, &#39;command&#39;, &#39;the&#39;, &#39;nation&#39;, &#39;nuclear&#39;, &#39;weapons&#39;, &#39;has&#39;, &#39;been&#39;, &#39;relieved&#39;, &#39;of&#39;, &#39;duty&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame([[x,example3.count(x)] <span class="keyword">for</span> x <span class="keyword">in</span> set(example3)], columns = [<span class="string">'Word'</span>, <span class="string">'Count'</span>])</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Word</th>      <th>Count</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>the</td>      <td>5</td>    </tr>    <tr>      <th>1</th>      <td>command</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>secretary</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>weapons</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>has</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>defense</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>commander</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>squadron</td>      <td>1</td>    </tr>    <tr>      <th>8</th>      <td>relieved</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>navy</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>of</td>      <td>2</td>    </tr>    <tr>      <th>11</th>      <td>air</td>      <td>1</td>    </tr>    <tr>      <th>12</th>      <td>reconnaissance</td>      <td>1</td>    </tr>    <tr>      <th>13</th>      <td>provides</td>      <td>1</td>    </tr>    <tr>      <th>14</th>      <td>president</td>      <td>1</td>    </tr>    <tr>      <th>15</th>      <td>been</td>      <td>1</td>    </tr>    <tr>      <th>16</th>      <td>to</td>      <td>1</td>    </tr>    <tr>      <th>17</th>      <td>and</td>      <td>1</td>    </tr>    <tr>      <th>18</th>      <td>ability</td>      <td>1</td>    </tr>    <tr>      <th>19</th>      <td>nation</td>      <td>1</td>    </tr>    <tr>      <th>20</th>      <td>that</td>      <td>1</td>    </tr>    <tr>      <th>21</th>      <td>duty</td>      <td>1</td>    </tr>    <tr>      <th>22</th>      <td>nuclear</td>      <td>1</td>    </tr>    <tr>      <th>23</th>      <td>airborne</td>      <td>1</td>    </tr>  </tbody></table></div><h2 id="2-基于词频的特征提取——构造词频矩阵"><a href="#2-基于词频的特征提取——构造词频矩阵" class="headerlink" title="2 基于词频的特征提取——构造词频矩阵"></a>2 基于词频的特征提取——构造词频矩阵</h2><p>1）构造一个字符串数组StringList，每个元素是对应行所有top特征字符串拼成的长字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trainheadlines = [] </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(train.index)):</span><br><span class="line">    trainheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> train.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">print(trainheadlines[<span class="number">0</span>:<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;b&quot;Georgia \&#39;downs two Russian warplanes\&#39; as countries move to brink of war&quot; b\&#39;BREAKING: Musharraf to be impeached.\&#39; b\&#39;Russia Today: Columns of troops roll into South Ossetia; footage from fighting (YouTube)\&#39; b\&#39;Russian tanks are moving towards the capital of South Ossetia, which has reportedly been completely destroyed by Georgian artillery fire\&#39; b&quot;Afghan children raped with \&#39;impunity,\&#39; U.N. official says - this is sick, a three year old was raped and they do nothing&quot; b\&#39;150 Russian tanks have entered South Ossetia whilst Georgia shoots down two Russian jets.\&#39; b&quot;Breaking: Georgia invades South Ossetia, Russia warned it would intervene on SO\&#39;s side&quot; b&quot;The \&#39;enemy combatent\&#39; trials are nothing but a sham: Salim Haman has been sentenced to 5 1/2 years, but will be kept longer anyway just because they feel like it.&quot; b\&#39;Georgian troops retreat from S. Osettain capital, presumably leaving several hundred people killed. [VIDEO]\&#39; b\&#39;Did the U.S. Prep Georgia for War with Russia?\&#39; b\&#39;Rice Gives Green Light for Israel to Attack Iran: Says U.S. has no veto over Israeli military ops\&#39; b\&#39;Announcing:Class Action Lawsuit on Behalf of American Public Against the FBI\&#39; b&quot;So---Russia and Georgia are at war and the NYT\&#39;s top story is opening ceremonies of the Olympics?  What a fucking disgrace and yet further proof of the decline of journalism.&quot; b&quot;China tells Bush to stay out of other countries\&#39; affairs&quot; b\&#39;Did World War III start today?\&#39; b\&#39;Georgia Invades South Ossetia - if Russia gets involved, will NATO absorb Georgia and unleash a full scale war?\&#39; b\&#39;Al-Qaeda Faces Islamist Backlash\&#39; b\&#39;Condoleezza Rice: &quot;The US would not act to prevent an Israeli strike on Iran.&quot; Israeli Defense Minister Ehud Barak: &quot;Israel is prepared for uncompromising victory in the case of military hostilities.&quot;\&#39; b\&#39;This is a busy day:  The European Union has approved new sanctions against Iran in protest at its nuclear programme.\&#39; b&quot;Georgia will withdraw 1,000 soldiers from Iraq to help fight off Russian forces in Georgia\&#39;s breakaway region of South Ossetia&quot; b\&#39;Why the Pentagon Thinks Attacking Iran is a Bad Idea - US News &amp;amp; World Report\&#39; b\&#39;Caucasus in crisis: Georgia invades South Ossetia\&#39; b\&#39;Indian shoe manufactory  - And again in a series of &quot;you do not like your work?&quot;\&#39; b\&#39;Visitors Suffering from Mental Illnesses Banned from Olympics\&#39; b&quot;No Help for Mexico\&#39;s Kidnapping Surge&quot;&#39;]</code></pre><p>2）将这个字符串数组 转换成 词频矩阵，以便可以作为训练集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basicvectorizer = CountVectorizer()</span><br><span class="line">basictrain = basicvectorizer.fit_transform(trainheadlines)</span><br><span class="line">print(basictrain.shape) <span class="comment"># 生成了一个词频矩阵，总共1611个样本，31675个不重复的单词</span></span><br></pre></td></tr></table></figure><pre><code>(1611, 31675)</code></pre><h2 id="3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof"><a href="#3-用逻辑回归-进行训练，查看训练结果精度-和-每个单词的权重参数ceof" class="headerlink" title="3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_"></a>3 用逻辑回归 进行训练，查看训练结果精度 和 每个单词的权重参数ceof_</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归 fit 训练集词频矩阵</span></span><br><span class="line">basicmodel = LogisticRegression()</span><br><span class="line">basicmodel = basicmodel.fit(basictrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">basictest = basicvectorizer.transform(testheadlines)</span><br><span class="line"><span class="comment"># 逻辑回归 predict 测试集词频矩阵</span></span><br><span class="line">predictions = basicmodel.predict(basictest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造简易 混淆矩阵</span></span><br><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], predictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#0.42</span></span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>61</td>      <td>125</td>    </tr>    <tr>      <th>1</th>      <td>92</td>      <td>100</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">观察：用精度做的混淆矩阵，精度只有<span class="number">42</span>% 不理想</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">basicwords = basicvectorizer.get_feature_names() <span class="comment"># 得到分词模型中所有单词（特征）</span></span><br><span class="line">basiccoeffs = basicmodel.coef_.tolist()[<span class="number">0</span>] <span class="comment"># 得到logistic模型中所有单词对应的 权重参数</span></span><br><span class="line">coeffdf = pd.DataFrame(&#123;<span class="string">'Word'</span> : basicwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : basiccoeffs&#125;)</span><br><span class="line">coeffdf = coeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Word'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>]) <span class="comment"># 从大到小排序</span></span><br><span class="line">coeffdf.head(<span class="number">10</span>) <span class="comment"># 前面的正相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>19419</th>      <td>0.497924</td>      <td>nigeria</td>    </tr>    <tr>      <th>25261</th>      <td>0.452526</td>      <td>self</td>    </tr>    <tr>      <th>29286</th>      <td>0.428011</td>      <td>tv</td>    </tr>    <tr>      <th>15998</th>      <td>0.425863</td>      <td>korea</td>    </tr>    <tr>      <th>20135</th>      <td>0.425716</td>      <td>olympics</td>    </tr>    <tr>      <th>15843</th>      <td>0.411636</td>      <td>kills</td>    </tr>    <tr>      <th>26323</th>      <td>0.411267</td>      <td>so</td>    </tr>    <tr>      <th>29256</th>      <td>0.394855</td>      <td>turn</td>    </tr>    <tr>      <th>10874</th>      <td>0.388555</td>      <td>fears</td>    </tr>    <tr>      <th>28274</th>      <td>0.384031</td>      <td>territory</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coeffdf.tail(<span class="number">10</span>) <span class="comment"># 前面的负相关</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Word</th>    </tr>  </thead>  <tbody>    <tr>      <th>27299</th>      <td>-0.424441</td>      <td>students</td>    </tr>    <tr>      <th>8478</th>      <td>-0.427079</td>      <td>did</td>    </tr>    <tr>      <th>6683</th>      <td>-0.431925</td>      <td>congo</td>    </tr>    <tr>      <th>12818</th>      <td>-0.444069</td>      <td>hacking</td>    </tr>    <tr>      <th>7139</th>      <td>-0.448570</td>      <td>country</td>    </tr>    <tr>      <th>16949</th>      <td>-0.463116</td>      <td>low</td>    </tr>    <tr>      <th>3651</th>      <td>-0.470454</td>      <td>begin</td>    </tr>    <tr>      <th>25433</th>      <td>-0.494555</td>      <td>sex</td>    </tr>    <tr>      <th>24754</th>      <td>-0.549725</td>      <td>sanctions</td>    </tr>    <tr>      <th>24542</th>      <td>-0.587794</td>      <td>run</td>    </tr>  </tbody></table></div><h2 id="4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵"><a href="#4-改进特征选择方法。用2个单词的词组-进行分词提取特征，构造新的频率矩阵" class="headerlink" title="4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵"></a>4 改进特征选择方法。用2个单词的词组 进行分词提取特征，构造新的频率矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedvectorizer = CountVectorizer(ngram_range=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">advancedtrain = advancedvectorizer.fit_transform(trainheadlines)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(advancedtrain.shape)</span><br></pre></td></tr></table></figure><pre><code>(1611, 366721)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advancedmodel = LogisticRegression()</span><br><span class="line">advancedmodel = advancedmodel.fit(advancedtrain, train[<span class="string">"Label"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testheadlines = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>,len(test.index)):</span><br><span class="line">    testheadlines.append(<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> test.iloc[row,<span class="number">2</span>:<span class="number">27</span>]))</span><br><span class="line">advancedtest = advancedvectorizer.transform(testheadlines)</span><br><span class="line">advpredictions = advancedmodel.predict(advancedtest)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(test[<span class="string">"Label"</span>], advpredictions, rownames=[<span class="string">"Actual"</span>], colnames=[<span class="string">"Predicted"</span>])</span><br><span class="line"><span class="comment">#.57</span></span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Predicted</th>      <th>0</th>      <th>1</th>    </tr>    <tr>      <th>Actual</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>66</td>      <td>120</td>    </tr>    <tr>      <th>1</th>      <td>45</td>      <td>147</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">advwords = advancedvectorizer.get_feature_names()</span><br><span class="line">advcoeffs = advancedmodel.coef_.tolist()[<span class="number">0</span>]</span><br><span class="line">advcoeffdf = pd.DataFrame(&#123;<span class="string">'Words'</span> : advwords, </span><br><span class="line">                        <span class="string">'Coefficient'</span> : advcoeffs&#125;)</span><br><span class="line">advcoeffdf = advcoeffdf.sort_values([<span class="string">'Coefficient'</span>, <span class="string">'Words'</span>], ascending=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">advcoeffdf.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>272047</th>      <td>0.286533</td>      <td>right to</td>    </tr>    <tr>      <th>24710</th>      <td>0.275274</td>      <td>and other</td>    </tr>    <tr>      <th>285392</th>      <td>0.274698</td>      <td>set to</td>    </tr>    <tr>      <th>316194</th>      <td>0.262873</td>      <td>the first</td>    </tr>    <tr>      <th>157511</th>      <td>0.227943</td>      <td>in china</td>    </tr>    <tr>      <th>159522</th>      <td>0.224184</td>      <td>in south</td>    </tr>    <tr>      <th>125870</th>      <td>0.219130</td>      <td>found in</td>    </tr>    <tr>      <th>124411</th>      <td>0.216726</td>      <td>forced to</td>    </tr>    <tr>      <th>173246</th>      <td>0.211137</td>      <td>it has</td>    </tr>    <tr>      <th>322590</th>      <td>0.209239</td>      <td>this is</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advcoeffdf.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Coefficient</th>      <th>Words</th>    </tr>  </thead>  <tbody>    <tr>      <th>326846</th>      <td>-0.198495</td>      <td>to help</td>    </tr>    <tr>      <th>118707</th>      <td>-0.201654</td>      <td>fire on</td>    </tr>    <tr>      <th>155038</th>      <td>-0.209702</td>      <td>if he</td>    </tr>    <tr>      <th>242528</th>      <td>-0.211303</td>      <td>people are</td>    </tr>    <tr>      <th>31669</th>      <td>-0.213362</td>      <td>around the</td>    </tr>    <tr>      <th>321333</th>      <td>-0.215699</td>      <td>there is</td>    </tr>    <tr>      <th>327113</th>      <td>-0.221812</td>      <td>to kill</td>    </tr>    <tr>      <th>340714</th>      <td>-0.226289</td>      <td>up in</td>    </tr>    <tr>      <th>358917</th>      <td>-0.227516</td>      <td>with iran</td>    </tr>    <tr>      <th>315485</th>      <td>-0.331153</td>      <td>the country</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于NLP的股价预测&quot;&gt;&lt;a href=&quot;#基于NLP的股价预测&quot; class=&quot;headerlink&quot; title=&quot;基于NLP的股价预测&quot;&gt;&lt;/a&gt;基于NLP的股价预测&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="CountVectorizer" scheme="http://yoursite.com/tags/CountVectorizer/"/>
    
      <category term="LogisticRegression" scheme="http://yoursite.com/tags/LogisticRegression/"/>
    
  </entry>
  
  <entry>
    <title>Python常用功能、函数</title>
    <link href="http://yoursite.com/2018/04/19/python/Python%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/19/python/Python常用功能、函数/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-05-04T05:13:04.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p>1简单的文件读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"123.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">content = f.read();</span><br><span class="line">print(content);</span><br><span class="line">f.close();</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"123.txt"</span>, <span class="string">"a+"</span>);</span><br><span class="line">f.write(<span class="string">"\n"</span>);</span><br><span class="line">f.write(<span class="string">"222222222222"</span>);</span><br><span class="line">f.close();</span><br></pre></td></tr></table></figure><p>2读取数据到矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取txt二维数据到矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span>    </span><br><span class="line">    dataMat = np.mat([<span class="number">0</span>,<span class="number">0</span>])               </span><br><span class="line">    f = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        curLine = line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(curLine)==<span class="number">1</span> : </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        curLineMat = np.mat(curLine)</span><br><span class="line">        dataMat = np.vstack((dataMat, curLineMat))  <span class="comment">#拼接矩阵</span></span><br><span class="line">    dataMat = dataMat[<span class="number">1</span>:,:].astype(float)   <span class="comment">#不要第一行；转为纯数字</span></span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p>将一个字符串拆成 单个字符 组成的字符集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = set(<span class="string">'runoob'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = set(<span class="string">'google'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y (set([<span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]), set([<span class="string">'e'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'l'</span>])) <span class="comment"># 重复的被删除 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y <span class="comment"># 交集 set(['o']) </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y <span class="comment"># 并集 set(['b', 'e', 'g', 'l', 'o', 'n', 'r', 'u']) </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y <span class="comment"># 差集 set(['r', 'b', 'u', 'n']) </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h2><ol><li>= 赋值 传引用 =》内存不独立 =》 同步跟随变化</li><li>copy 浅拷贝 只拷贝父对象 =》父对象内存独立 =》只有子对象跟随变化</li><li>deepcopy 深拷贝 拷贝对象及其子对象 =》全部内存独立 =》 不跟随变化<br>（深拷贝 和 浅拷贝——只对数组结构有用，int之类的没用）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a) <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a) <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>) <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>) <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">'a = '</span>, a</span><br><span class="line"><span class="keyword">print</span> <span class="string">'b = '</span>, b</span><br><span class="line"><span class="keyword">print</span> <span class="string">'c = '</span>, c</span><br><span class="line"><span class="keyword">print</span> <span class="string">'d = '</span>, d</span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure></li></ol><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>zip函数接受任意多个序列作为参数，返回一个tuple列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(zip(range(<span class="number">3</span>),range(<span class="number">5</span>)))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(range(<span class="number">3</span>),range(<span class="number">5</span>)):</span><br><span class="line">    print(i)</span><br><span class="line">    print(j)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="运算符and和or"><a href="#运算符and和or" class="headerlink" title="运算符and和or"></a>运算符and和or</h2><p> 注意：and or 是python特有的短路运算符</p><ol><li>表达式从左至右运算，若 or 的左侧逻辑值为 True ，则短路 or 后所有的表达式（不管是 and 还是 or），直接输出 or 左侧表达式 。</li><li>表达式从左至右运算，若 and 的左侧逻辑值为 False ，则短路其后所有 and 表达式，直到有 or 出现，输出 and 左侧表达式到 or 的左侧，参与接下来的逻辑运算。</li><li>若 or 的左侧为 False ，或者 and 的左侧为 True 则不能使用短路逻辑。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;open&quot;&gt;&lt;a href=&quot;#open&quot; class=&quot;headerlink&quot; title=&quot;open()&quot;&gt;&lt;/a&gt;open()&lt;/h2&gt;&lt;p&gt;1简单的文件读写&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象和类</title>
    <link href="http://yoursite.com/2018/04/19/python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/19/python/Python面向对象和类/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-04-27T11:57:08.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-面向对象"><a href="#Python-面向对象" class="headerlink" title="Python 面向对象"></a>Python 面向对象</h1><p>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。</p><p>如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。</p><p>接下来我们先来简单的了解下面向对象的一些基本特征。</p><hr><h2 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h2><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>实例变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><hr><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">   <span class="string">'类的帮助信息'</span>   <span class="comment">#类文档字符串</span></span><br><span class="line">   class_suite  <span class="comment">#类体</span></span><br></pre></td></tr></table></figure><p>类的帮助信息可以通过ClassName.<strong>doc</strong>查看。</p><p>class_suite 由类成员，方法，数据属性组成。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下是一个简单的 Python 类的例子:</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">   <span class="string">'所有员工的基类'</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayCount</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayEmployee</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Name : "</span>, self.name,  <span class="string">", Salary: "</span>, self.salary</span><br></pre></td></tr></table></figure><ul><li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li><li>第一种方法<strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li><li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li></ul><h3 id="self代表类的实例，而非类"><a href="#self代表类的实例，而非类" class="headerlink" title="self代表类的实例，而非类"></a>self代表类的实例，而非类</h3><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prt</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        print(self.__class__)</span><br><span class="line"> </span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br></pre></td></tr></table></figure><p>以上实例执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Test instance at <span class="number">0x10d066878</span>&gt;</span><br><span class="line">__main__.Test</span><br></pre></td></tr></table></figure><p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。</p><p>self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prt</span><span class="params">(runoob)</span>:</span></span><br><span class="line">        print(runoob)</span><br><span class="line">        print(runoob.__class__)</span><br><span class="line"> </span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br></pre></td></tr></table></figure><p>以上实例执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Test instance at <span class="number">0x10d066878</span>&gt;</span><br><span class="line">__main__.Test</span><br></pre></td></tr></table></figure><hr><h2 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h2><p>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。</p><p>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接收参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"创建 Employee 类的第一个对象"</span></span><br><span class="line">emp1 = Employee(<span class="string">"Zara"</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="string">"创建 Employee 类的第二个对象"</span></span><br><span class="line">emp2 = Employee(<span class="string">"Manni"</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h2><p>您可以使用点号 . 来访问对象的属性。使用如下类的名称访问类变量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emp1.displayEmployee()</span><br><span class="line">emp2.displayEmployee()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br></pre></td></tr></table></figure><p>完整实例：</p><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">   <span class="string">'所有员工的基类'</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayCount</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayEmployee</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Name : "</span>, self.name,  <span class="string">", Salary: "</span>, self.salary</span><br><span class="line"> </span><br><span class="line"><span class="string">"创建 Employee 类的第一个对象"</span></span><br><span class="line">emp1 = Employee(<span class="string">"Zara"</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="string">"创建 Employee 类的第二个对象"</span></span><br><span class="line">emp2 = Employee(<span class="string">"Manni"</span>, <span class="number">5000</span>)</span><br><span class="line">emp1.displayEmployee()</span><br><span class="line">emp2.displayEmployee()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br></pre></td></tr></table></figure><p>执行以上代码输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name :  Zara ,Salary:  <span class="number">2000</span></span><br><span class="line">Name :  Manni ,Salary:  <span class="number">5000</span></span><br><span class="line">Total Employee <span class="number">2</span></span><br></pre></td></tr></table></figure><p>你可以添加，删除，修改类的属性，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emp1.age = <span class="number">7</span>  <span class="comment"># 添加一个 'age' 属性</span></span><br><span class="line">emp1.age = <span class="number">8</span>  <span class="comment"># 修改 'age' 属性</span></span><br><span class="line"><span class="keyword">del</span> emp1.age  <span class="comment"># 删除 'age' 属性</span></span><br></pre></td></tr></table></figure><p>你也可以使用以下函数的方式来访问属性：</p><ul><li>getattr(obj, name[, default]) : 访问对象的属性。</li><li>hasattr(obj,name) : 检查是否存在一个属性。</li><li>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。</li><li>delattr(obj, name) : 删除属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hasattr(emp1, <span class="string">'age'</span>)    <span class="comment"># 如果存在 'age' 属性返回 </span></span><br><span class="line"><span class="keyword">True</span>。</span><br><span class="line">getattr(emp1, <span class="string">'age'</span>)    <span class="comment"># 返回 'age' 属性的值</span></span><br><span class="line">setattr(emp1, <span class="string">'age'</span>, <span class="number">8</span>) <span class="comment"># 添加属性 'age' 值为 8</span></span><br><span class="line">delattr(emp1, <span class="string">'age'</span>)    <span class="comment"># 删除属性 'age'</span></span><br></pre></td></tr></table></figure><hr><h2 id="Python内置类属性"><a href="#Python内置类属性" class="headerlink" title="Python内置类属性"></a>Python内置类属性</h2><ul><li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</li><li><strong>doc</strong> :类的文档字符串</li><li><strong>name</strong>: 类名</li><li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</li><li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li></ul><p>Python内置类属性调用实例如下：</p><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">   <span class="string">'所有员工的基类'</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayCount</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayEmployee</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Name : "</span>, self.name,  <span class="string">", Salary: "</span>, self.salary</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Employee.__doc__:"</span>, Employee.__doc__</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Employee.__name__:"</span>, Employee.__name__</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Employee.__module__:"</span>, Employee.__module__</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Employee.__bases__:"</span>, Employee.__bases__</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Employee.__dict__:"</span>, Employee.__dict__</span><br></pre></td></tr></table></figure><p>执行以上代码输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Employee.__doc__: 所有员工的基类</span><br><span class="line">Employee.__name__: Employee</span><br><span class="line">Employee.__module__: __main__</span><br><span class="line">Employee.__bases__: ()</span><br><span class="line">Employee.__dict__: &#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'displayCount'</span>: &lt;function displayCount at <span class="number">0x10a939c80</span>&gt;, <span class="string">'empCount'</span>: <span class="number">0</span>, <span class="string">'displayEmployee'</span>: &lt;function displayEmployee at <span class="number">0x10a93caa0</span>&gt;, <span class="string">'__doc__'</span>: <span class="string">'\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb'</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x10a939578</span>&gt;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="python对象销毁-垃圾回收"><a href="#python对象销毁-垃圾回收" class="headerlink" title="python对象销毁(垃圾回收)"></a>python对象销毁(垃圾回收)</h2><p>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。</p><p>在 Python 内部记录着所有使用中的对象各有多少引用。</p><p>一个内部跟踪变量，称为一个引用计数器。</p><p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">40</span>      <span class="comment"># 创建对象  &lt;40&gt;</span></span><br><span class="line">b = a       <span class="comment"># 增加引用， &lt;40&gt; 的计数</span></span><br><span class="line">c = [b]     <span class="comment"># 增加引用.  &lt;40&gt; 的计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a       <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class="line">b = <span class="number">100</span>     <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="number">-1</span>   <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br></pre></td></tr></table></figure><p>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：</p><h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">      self.x = x</span><br><span class="line">      self.y = y</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">      class_name = self.__class__.__name__</span><br><span class="line">      <span class="keyword">print</span> class_name, <span class="string">"销毁"</span></span><br><span class="line"> </span><br><span class="line">pt1 = Point()</span><br><span class="line">pt2 = pt1</span><br><span class="line">pt3 = pt1</span><br><span class="line"><span class="keyword">print</span> id(pt1), id(pt2), id(pt3) <span class="comment"># 打印对象的id</span></span><br><span class="line"><span class="keyword">del</span> pt1</span><br><span class="line"><span class="keyword">del</span> pt2</span><br><span class="line"><span class="keyword">del</span> pt3</span><br></pre></td></tr></table></figure><p>以上实例运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3083401324</span> <span class="number">3083401324</span> <span class="number">3083401324</span></span><br><span class="line">Point 销毁</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>通常你需要在单独的文件中定义一个类，</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。</p><p>需要注意的地方：<strong>继承语法</strong> class 派生类名（<strong>基类名</strong>）：//… 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。</p><p>在python中继承中的一些特点：</p><ul><li>1：在继承中基类的构造（<strong>init</strong>()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。</li><li>2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别在于类中调用普通函数时并不需要带上self参数</li><li>3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。</li></ul><p>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。</p><p><strong>语法：</strong></p><p>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClassName</span> <span class="params">(ParentClass1[, ParentClass2, ...])</span>:</span></span><br><span class="line">   <span class="string">'Optional class documentation string'</span></span><br><span class="line">   class_suite</span><br></pre></td></tr></table></figure><h2 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span>        <span class="comment"># 定义父类</span></span><br><span class="line">   parentAttr = <span class="number">100</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"调用父类构造函数"</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parentMethod</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'调用父类方法'</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">setAttr</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">      Parent.parentAttr = attr</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">getAttr</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"父类属性 :"</span>, Parent.parentAttr</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span> <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"调用子类构造方法"</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">childMethod</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'调用子类方法'</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 实例化子类</span></span><br><span class="line">c.childMethod()      <span class="comment"># 调用子类的方法</span></span><br><span class="line">c.parentMethod()     <span class="comment"># 调用父类方法</span></span><br><span class="line">c.setAttr(<span class="number">200</span>)       <span class="comment"># 再次调用父类的方法 - 设置属性值</span></span><br><span class="line">c.getAttr()          <span class="comment"># 再次调用父类的方法 - 获取属性值</span></span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用子类构造方法</span><br><span class="line">调用子类方法</span><br><span class="line">调用父类方法</span><br><span class="line">父类属性 : <span class="number">200</span></span><br></pre></td></tr></table></figure><p>你可以继承多个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>        <span class="comment"># 定义类 A</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span>         <span class="comment"># 定义类 B</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span>   <span class="comment"># 继承类 A 和 B</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>你可以使用issubclass()或者isinstance()方法来检测。</p><ul><li>issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)</li><li>isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。</li></ul><hr><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：</p><p>实例：</p><h2 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span>        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'调用父类方法'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span> <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'调用子类方法'</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure><p>执行以上代码输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用子类方法</span><br></pre></td></tr></table></figure><hr><h2 id="基础重载方法"><a href="#基础重载方法" class="headerlink" title="基础重载方法"></a>基础重载方法</h2><p>下表列出了一些通用的功能，你可以在自己的类重写：</p><div class="table-container"><table><thead><tr><th>序号</th><th>方法, 描述 &amp; 简单的调用</th></tr></thead><tbody><tr><td>1</td><td><strong><strong>init</strong> ( self [,args…] )</strong>构造函数简单的调用方法: <em>obj = className(args)</em></td></tr><tr><td>2</td><td><strong><strong>del</strong>( self )</strong>析构方法, 删除一个对象简单的调用方法 : <em>del obj</em></td></tr><tr><td>3</td><td><strong><strong>repr</strong>( self )</strong>转化为供解释器读取的形式简单的调用方法 : <em>repr(obj)</em></td></tr><tr><td>4</td><td><strong><strong>str</strong>( self )</strong>用于将值转化为适于人阅读的形式简单的调用方法 : <em>str(obj)</em></td></tr><tr><td>5</td><td><strong><strong>cmp</strong> ( self, x )</strong>对象比较简单的调用方法 : <em>cmp(obj, x)</em></td></tr></tbody></table></div><hr><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>Python同样支持运算符重载，实例如下：</p><h2 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Vector (%d, %d)'</span> % (self.a, self.b)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,<span class="number">-2</span>)</span><br><span class="line"><span class="keyword">print</span> v1 + v2</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector(<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h2><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</p><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 <strong>self.__private_methods</strong></p><h2 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JustCounter</span>:</span></span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>    <span class="comment"># 公开变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> self.__secretCount</span><br><span class="line"> </span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()</span><br><span class="line">counter.count()</span><br><span class="line"><span class="keyword">print</span> counter.publicCount</span><br><span class="line"><span class="keyword">print</span> counter.__secretCount  <span class="comment"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure><p>Python 通过改变名称来包含类名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> counter.__secretCount  <span class="comment"># 报错，实例不能访问私有变量</span></span><br><span class="line">AttributeError: JustCounter instance has no attribute <span class="string">'__secretCount'</span></span><br></pre></td></tr></table></figure><p>Python不允许实例化的类访问私有数据，但你可以使用 <strong>object._className__attrName</strong> 访问属性，将如下代码替换以上代码的最后一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.........................</span><br><span class="line"><span class="keyword">print</span> counter._JustCounter__secretCount</span><br></pre></td></tr></table></figure><p>执行以上代码，执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="单下划线、双下划线、头尾双下划线说明："><a href="#单下划线、双下划线、头尾双下划线说明：" class="headerlink" title="单下划线、双下划线、头尾双下划线说明："></a>单下划线、双下划线、头尾双下划线说明：</h3><ul><li><strong><strong>foo</strong></strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</li><li><strong>_foo</strong>: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</li><li><strong>__foo</strong>: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-面向对象&quot;&gt;&lt;a href=&quot;#Python-面向对象&quot; class=&quot;headerlink&quot; title=&quot;Python 面向对象&quot;&gt;&lt;/a&gt;Python 面向对象&lt;/h1&gt;&lt;p&gt;Python从设计之初就已经是一门面向对象的语言，正因为如此，在Py
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>1向量、矩阵、向量范数、矩阵范数</title>
    <link href="http://yoursite.com/2018/04/19/math/linear_algebra/1%E5%90%91%E9%87%8F%E3%80%81%E7%9F%A9%E9%98%B5%E3%80%81%E5%90%91%E9%87%8F%E8%8C%83%E6%95%B0%E3%80%81%E7%9F%A9%E9%98%B5%E8%8C%83%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-05-03T03:59:21.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="向量内积-和-投影"><a href="#向量内积-和-投影" class="headerlink" title="向量内积 和 投影"></a>向量内积 和 投影</h3><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-19-52-26.png" alt=""><br>内积：<br>1用点乘：a•b<br>2用转置乘：a^T b<br>3向量的模是范数的一种<br>4 wT w《=》向量自己做内积 = 自身长度（模）²，因为投影结果还是w向量本身</p><p>投影：<br>1 b在a上的投影 = |b|cosθ<br>2 内积 = 向量1在向量2上的投影 * 他的长度（模，绝对值符号）；<br>3 由2又有：b在a上的投影 = $\frac {a^T b} {||a||}$ ★</p><h3 id="向量外积"><a href="#向量外积" class="headerlink" title="向量外积"></a>向量外积</h3><h3 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h3><ol><li>向量范数的定义和性质：</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-19-56-23.png" alt=""><br>齐次性：数乘以后会放大相应的倍数</p><ol><li>1-范数、2-范数、无穷范数：</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-19-56-55.png" alt=""></p><ol><li>稀疏性 和 0-范数：</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-19-57-09.png" alt=""><br>稀疏性用到的范数：<br>特殊的0-范数，他不满足齐次性；<br>所以需要1-范数来辅助解决；</p><ol><li>范数的几何意义：</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-20-32-56.png" alt=""><br><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-22-29-03.png" alt=""></p><h3 id="向量组"><a href="#向量组" class="headerlink" title="向量组"></a>向量组</h3><ol><li>初始单位向两组</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-22-30-44.png" alt=""></p><ol><li>向量组等价</li></ol><p><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-23-10-16.png" alt=""></p><ol><li>线性相关 和 线性无关<br><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-23-10-28.png" alt=""></li><li>施密特正交化<br><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-20-23-10-41.png" alt=""><br>由施密特正交化生成的 正交向量组 和 之前的线性无关向量组 可以互相线性表示</li></ol><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><ul><li>O矩阵<br>所有元素都为0的矩阵<br><br></li><li>一阶矩阵(a)<br>等同于数a<br><br></li><li>矩阵的内积<br>内积 A·B  &lt;=&gt;  ${A^T}B$<h2 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h2><img src="/2018/04/19/math/linear_algebra/1向量、矩阵、向量范数、矩阵范数/2018-04-22-17-47-24.png" alt=""><br>矩阵的范数比向量的范数多一条相容性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;向量&quot;&gt;&lt;a href=&quot;#向量&quot; class=&quot;headerlink&quot; title=&quot;向量&quot;&gt;&lt;/a&gt;向量&lt;/h2&gt;&lt;h3 id=&quot;向量内积-和-投影&quot;&gt;&lt;a href=&quot;#向量内积-和-投影&quot; class=&quot;headerlink&quot; title=&quot;向量内积 和 
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="linear_algebra" scheme="http://yoursite.com/categories/math/linear-algebra/"/>
    
    
      <category term="范数" scheme="http://yoursite.com/tags/%E8%8C%83%E6%95%B0/"/>
    
      <category term="外积" scheme="http://yoursite.com/tags/%E5%A4%96%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow整理</title>
    <link href="http://yoursite.com/2018/04/19/tensorflow/0_Tensorflow%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/19/tensorflow/0_Tensorflow整理/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-05-03T13:56:03.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h1><h2 id="特色语法类"><a href="#特色语法类" class="headerlink" title="特色语法类"></a>特色语法类</h2><ul><li>输出数值要加 .eval()</li></ul><h2 id="计算类"><a href="#计算类" class="headerlink" title="计算类"></a>计算类</h2><ul><li>tf.nn.sigmoid() </li><li>tf.nn.softmax</li><li>tf.nn.softmax_cross_entropy_with_logits(y_hat, y)：交叉熵函数。</li><li>tf.add()</li><li>tf.matmul()</li><li>tf.reduce_mean()</li><li>tf.square()平方<h2 id="算法类-优化器"><a href="#算法类-优化器" class="headerlink" title="算法类 优化器"></a>算法类 优化器</h2>tf.train.GradientDescentOptimizer()：梯度下降</li></ul><h2 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h2><ul><li>tf.equal(a, b)  ：比较是否相等</li><li>tf.cast(a, “float”)  :类型转换</li><li>tf.placeholder(“float”, [None, 10]) ：None is for infinite 这是一个n行10列的动态矩阵</li><li>tf.InteractiveSession(): 它能让你在运行图的时候，插入一些计算图</li><li>tf.Session(): 需要在启动session之前构建整个计算图，然后启动该计算图。</li><li>tf.random_normal([2, 3], mean=-1, stddev=4) ：高斯初始化生成一个 均值为-1，方差为4的矩阵</li></ul><h2 id="经验总结类"><a href="#经验总结类" class="headerlink" title="经验总结类"></a>经验总结类</h2><ul><li>Tensorflow 定义的任何数据类型都推荐用 float32</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整理&quot;&gt;&lt;a href=&quot;#整理&quot; class=&quot;headerlink&quot; title=&quot;整理&quot;&gt;&lt;/a&gt;整理&lt;/h1&gt;&lt;h2 id=&quot;特色语法类&quot;&gt;&lt;a href=&quot;#特色语法类&quot; class=&quot;headerlink&quot; title=&quot;特色语法类&quot;&gt;&lt;/a&gt;特色语法
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow基本语法</title>
    <link href="http://yoursite.com/2018/04/19/tensorflow/1_Tensorflow%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/19/tensorflow/1_Tensorflow基本用法/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-04-27T06:34:13.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量-和-Session-定义"><a href="#变量-和-Session-定义" class="headerlink" title="变量 和 Session()定义"></a>变量 和 Session()定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="comment"># Create a variable.</span></span><br><span class="line">w = tf.Variable([[<span class="number">0.5</span>,<span class="number">1.0</span>]])</span><br><span class="line">x = tf.Variable([[<span class="number">2.0</span>],[<span class="number">1.0</span>]]) </span><br><span class="line"></span><br><span class="line">y = tf.matmul(w, x)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#variables have to be explicitly initialized before you can run Ops</span></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  <span class="comment">#第一种 session()定义方式</span></span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="keyword">print</span> (y.eval())</span><br></pre></td></tr></table></figure><pre><code>Tensor(&quot;Variable_11/read:0&quot;, shape=(1, 2), dtype=float32)[[ 2.]]</code></pre><p>计算操作需要在 Session()——会话（计算图的区域） 中进行；<br>而且在使用 variable 时还需要 初始化全局变量操作</p><h2 id="矩阵-和-常量"><a href="#矩阵-和-常量" class="headerlink" title="矩阵 和 常量"></a>矩阵 和 常量</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># float32</span></span><br><span class="line">tf.zeros([3, 4], int32) ==&gt; [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'tensor' is [[1, 2, 3], [4, 5, 6]]</span></span><br><span class="line">tf.zeros_like(tensor) ==&gt; [[0, 0, 0], [0, 0, 0]]</span><br><span class="line">tf.ones([2, 3], int32) ==&gt; [[1, 1, 1], [1, 1, 1]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'tensor' is [[1, 2, 3], [4, 5, 6]]</span></span><br><span class="line">tf.ones_like(tensor) ==&gt; [[1, 1, 1], [1, 1, 1]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Constant 1-D Tensor populated with value list.</span></span><br><span class="line">tensor = tf.constant([1, 2, 3, 4, 5, 6, 7]) =&gt; [1 2 3 4 5 6 7]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Constant 2-D tensor populated with scalar value -1.</span></span><br><span class="line">tensor = tf.constant(-1.0, shape=[2, 3]) =&gt; [[-1. -1. -1.]</span><br><span class="line">                                              [<span class="number">-1.</span> <span class="number">-1.</span> <span class="number">-1.</span>]]</span><br><span class="line"></span><br><span class="line">tf.linspace(10.0, 12.0, 3, name="linspace") =&gt; [ 10.0  11.0  12.0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 令'start' is 3</span></span><br><span class="line"><span class="comment"># 'limit' is 18</span></span><br><span class="line"><span class="comment"># 'delta' is 3</span></span><br><span class="line">tf.range(start, limit, delta) ==&gt; [3, 6, 9, 12, 15]</span><br></pre></td></tr></table></figure><p>对比 Numpy 操作，发现区别并不大</p><h2 id="另一种-Session-定义"><a href="#另一种-Session-定义" class="headerlink" title="另一种 Session() 定义"></a>另一种 Session() 定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 初始化生成一个 均值为-1，方差为4的矩阵</span></span><br><span class="line">norm = tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], mean=<span class="number">-1</span>, stddev=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shuffle the first dimension of a tensor</span></span><br><span class="line">c = tf.constant([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">shuff = tf.random_shuffle(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Each time we run these ops, different results are generated</span></span><br><span class="line">sess = tf.Session()  <span class="comment">#第二种 session()定义方式</span></span><br><span class="line"><span class="keyword">print</span> (sess.run(norm))</span><br><span class="line"><span class="keyword">print</span> (sess.run(shuff))</span><br></pre></td></tr></table></figure><pre><code>[[ 3.78657341 -3.94182277 -3.65419507] [-7.0396409  -5.51102114  3.56082773]][[5 6] [1 2] [3 4]]</code></pre><h2 id="累加-演示"><a href="#累加-演示" class="headerlink" title="累加 演示"></a>累加 演示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state = tf.Variable(<span class="number">0</span>)</span><br><span class="line">new_value = tf.add(state, tf.constant(<span class="number">1</span>))</span><br><span class="line">update = tf.assign(state, new_value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    print(sess.run(state))    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)</span><br><span class="line">        print(sess.run(state))</span><br></pre></td></tr></table></figure><pre><code>0123</code></pre><h2 id="train-Saver-保存-Session-操作"><a href="#train-Saver-保存-Session-操作" class="headerlink" title="train.Saver() 保存 Session() 操作"></a>train.Saver() 保存 Session() 操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tf.train.Saver</span></span><br><span class="line">w = tf.Variable([[<span class="number">0.5</span>,<span class="number">1.0</span>]])</span><br><span class="line">x = tf.Variable([[<span class="number">2.0</span>],[<span class="number">1.0</span>]])</span><br><span class="line">y = tf.matmul(w, x)</span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init_op)</span><br><span class="line"><span class="comment"># Do some work with the model.</span></span><br><span class="line"><span class="comment"># Save the variables to disk.</span></span><br><span class="line">    save_path = saver.save(sess, <span class="string">"C://tensorflow//model//test"</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Model saved in file: "</span>, save_path)</span><br></pre></td></tr></table></figure><pre><code>Model saved in file:  C://tensorflow//model//test</code></pre><h2 id="convert-to-tensor-转换-numpy-的语法为-tensorflow-类型"><a href="#convert-to-tensor-转换-numpy-的语法为-tensorflow-类型" class="headerlink" title="convert_to_tensor() 转换 numpy 的语法为 tensorflow 类型"></a>convert_to_tensor() 转换 numpy 的语法为 tensorflow 类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">ta = tf.convert_to_tensor(a)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">     print(sess.run(ta))</span><br></pre></td></tr></table></figure><pre><code>[[ 0.  0.  0.] [ 0.  0.  0.] [ 0.  0.  0.]]</code></pre><p>不推荐使用，还是建议使用 tensorflow 语法</p><h2 id="placeholder-定义-待输入占位变量"><a href="#placeholder-定义-待输入占位变量" class="headerlink" title="placeholder() 定义 待输入占位变量"></a>placeholder() 定义 待输入占位变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line">output = tf.mul(input1, input2)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run([output], feed_dict=&#123;input1:[<span class="number">7.</span>], input2:[<span class="number">2.</span>]&#125;))</span><br></pre></td></tr></table></figure><pre><code>[array([ 14.], dtype=float32)]</code></pre><p>这些变量可以在使用时再临时 用 feed_dict字典格式 赋值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量-和-Session-定义&quot;&gt;&lt;a href=&quot;#变量-和-Session-定义&quot; class=&quot;headerlink&quot; title=&quot;变量 和 Session()定义&quot;&gt;&lt;/a&gt;变量 和 Session()定义&lt;/h2&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘——信用卡欺诈检测</title>
    <link href="http://yoursite.com/2018/04/19/machine_learning_in_action/CreditCard/"/>
    <id>http://yoursite.com/2018/04/19/machine_learning_in_action/CreditCard/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-04-23T08:45:47.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="案例：用-逻辑回归-预测-信用卡欺诈"><a href="#案例：用-逻辑回归-预测-信用卡欺诈" class="headerlink" title="案例：用 逻辑回归 预测 信用卡欺诈"></a>案例：用 逻辑回归 预测 信用卡欺诈</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">"creditcard.csv"</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Time</th>      <th>V1</th>      <th>V2</th>      <th>V3</th>      <th>V4</th>      <th>V5</th>      <th>V6</th>      <th>V7</th>      <th>V8</th>      <th>V9</th>      <th>...</th>      <th>V21</th>      <th>V22</th>      <th>V23</th>      <th>V24</th>      <th>V25</th>      <th>V26</th>      <th>V27</th>      <th>V28</th>      <th>Amount</th>      <th>Class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.0</td>      <td>-1.359807</td>      <td>-0.072781</td>      <td>2.536347</td>      <td>1.378155</td>      <td>-0.338321</td>      <td>0.462388</td>      <td>0.239599</td>      <td>0.098698</td>      <td>0.363787</td>      <td>...</td>      <td>-0.018307</td>      <td>0.277838</td>      <td>-0.110474</td>      <td>0.066928</td>      <td>0.128539</td>      <td>-0.189115</td>      <td>0.133558</td>      <td>-0.021053</td>      <td>149.62</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>0.0</td>      <td>1.191857</td>      <td>0.266151</td>      <td>0.166480</td>      <td>0.448154</td>      <td>0.060018</td>      <td>-0.082361</td>      <td>-0.078803</td>      <td>0.085102</td>      <td>-0.255425</td>      <td>...</td>      <td>-0.225775</td>      <td>-0.638672</td>      <td>0.101288</td>      <td>-0.339846</td>      <td>0.167170</td>      <td>0.125895</td>      <td>-0.008983</td>      <td>0.014724</td>      <td>2.69</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1.0</td>      <td>-1.358354</td>      <td>-1.340163</td>      <td>1.773209</td>      <td>0.379780</td>      <td>-0.503198</td>      <td>1.800499</td>      <td>0.791461</td>      <td>0.247676</td>      <td>-1.514654</td>      <td>...</td>      <td>0.247998</td>      <td>0.771679</td>      <td>0.909412</td>      <td>-0.689281</td>      <td>-0.327642</td>      <td>-0.139097</td>      <td>-0.055353</td>      <td>-0.059752</td>      <td>378.66</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>1.0</td>      <td>-0.966272</td>      <td>-0.185226</td>      <td>1.792993</td>      <td>-0.863291</td>      <td>-0.010309</td>      <td>1.247203</td>      <td>0.237609</td>      <td>0.377436</td>      <td>-1.387024</td>      <td>...</td>      <td>-0.108300</td>      <td>0.005274</td>      <td>-0.190321</td>      <td>-1.175575</td>      <td>0.647376</td>      <td>-0.221929</td>      <td>0.062723</td>      <td>0.061458</td>      <td>123.50</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>2.0</td>      <td>-1.158233</td>      <td>0.877737</td>      <td>1.548718</td>      <td>0.403034</td>      <td>-0.407193</td>      <td>0.095921</td>      <td>0.592941</td>      <td>-0.270533</td>      <td>0.817739</td>      <td>...</td>      <td>-0.009431</td>      <td>0.798278</td>      <td>-0.137458</td>      <td>0.141267</td>      <td>-0.206010</td>      <td>0.502292</td>      <td>0.219422</td>      <td>0.215153</td>      <td>69.99</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 31 columns</p></div><h1 id="1数据预处理——归一化、去掉不用的列"><a href="#1数据预处理——归一化、去掉不用的列" class="headerlink" title="1数据预处理——归一化、去掉不用的列"></a>1数据预处理——归一化、去掉不用的列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count_classes = pd.value_counts(data[<span class="string">'Class'</span>], sort = <span class="keyword">True</span>).sort_index()</span><br><span class="line">count_classes.plot(kind = <span class="string">'bar'</span>)</span><br><span class="line">plt.title(<span class="string">"Fraud class histogram"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Class"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line"><span class="comment">#发现样本分布十分不均衡</span></span><br><span class="line"><span class="comment">#策略：统一不同类别样本总数 </span></span><br><span class="line"><span class="comment">#1）oversample——过采样，把少的增多 </span></span><br><span class="line"><span class="comment">#2) undersample——欠采样，把多的减少</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.text.Text at 0x5d32f27ef0&gt;</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_4_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用sklearn 函数来进行归一化(自带合并到原dataframe功能)</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler  </span><br><span class="line"></span><br><span class="line">data[<span class="string">'normAmount'</span>] = StandardScaler().fit_transform(data[<span class="string">'Amount'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">data = data.drop([<span class="string">'Time'</span>,<span class="string">'Amount'</span>],axis=<span class="number">1</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style>    .dataframe thead tr:only-child th {        text-align: right;    }    .dataframe thead th {        text-align: left;    }    .dataframe tbody tr th {        vertical-align: top;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>V1</th>      <th>V2</th>      <th>V3</th>      <th>V4</th>      <th>V5</th>      <th>V6</th>      <th>V7</th>      <th>V8</th>      <th>V9</th>      <th>V10</th>      <th>...</th>      <th>V21</th>      <th>V22</th>      <th>V23</th>      <th>V24</th>      <th>V25</th>      <th>V26</th>      <th>V27</th>      <th>V28</th>      <th>Class</th>      <th>normAmount</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-1.359807</td>      <td>-0.072781</td>      <td>2.536347</td>      <td>1.378155</td>      <td>-0.338321</td>      <td>0.462388</td>      <td>0.239599</td>      <td>0.098698</td>      <td>0.363787</td>      <td>0.090794</td>      <td>...</td>      <td>-0.018307</td>      <td>0.277838</td>      <td>-0.110474</td>      <td>0.066928</td>      <td>0.128539</td>      <td>-0.189115</td>      <td>0.133558</td>      <td>-0.021053</td>      <td>0</td>      <td>0.244964</td>    </tr>    <tr>      <th>1</th>      <td>1.191857</td>      <td>0.266151</td>      <td>0.166480</td>      <td>0.448154</td>      <td>0.060018</td>      <td>-0.082361</td>      <td>-0.078803</td>      <td>0.085102</td>      <td>-0.255425</td>      <td>-0.166974</td>      <td>...</td>      <td>-0.225775</td>      <td>-0.638672</td>      <td>0.101288</td>      <td>-0.339846</td>      <td>0.167170</td>      <td>0.125895</td>      <td>-0.008983</td>      <td>0.014724</td>      <td>0</td>      <td>-0.342475</td>    </tr>    <tr>      <th>2</th>      <td>-1.358354</td>      <td>-1.340163</td>      <td>1.773209</td>      <td>0.379780</td>      <td>-0.503198</td>      <td>1.800499</td>      <td>0.791461</td>      <td>0.247676</td>      <td>-1.514654</td>      <td>0.207643</td>      <td>...</td>      <td>0.247998</td>      <td>0.771679</td>      <td>0.909412</td>      <td>-0.689281</td>      <td>-0.327642</td>      <td>-0.139097</td>      <td>-0.055353</td>      <td>-0.059752</td>      <td>0</td>      <td>1.160686</td>    </tr>    <tr>      <th>3</th>      <td>-0.966272</td>      <td>-0.185226</td>      <td>1.792993</td>      <td>-0.863291</td>      <td>-0.010309</td>      <td>1.247203</td>      <td>0.237609</td>      <td>0.377436</td>      <td>-1.387024</td>      <td>-0.054952</td>      <td>...</td>      <td>-0.108300</td>      <td>0.005274</td>      <td>-0.190321</td>      <td>-1.175575</td>      <td>0.647376</td>      <td>-0.221929</td>      <td>0.062723</td>      <td>0.061458</td>      <td>0</td>      <td>0.140534</td>    </tr>    <tr>      <th>4</th>      <td>-1.158233</td>      <td>0.877737</td>      <td>1.548718</td>      <td>0.403034</td>      <td>-0.407193</td>      <td>0.095921</td>      <td>0.592941</td>      <td>-0.270533</td>      <td>0.817739</td>      <td>0.753074</td>      <td>...</td>      <td>-0.009431</td>      <td>0.798278</td>      <td>-0.137458</td>      <td>0.141267</td>      <td>-0.206010</td>      <td>0.502292</td>      <td>0.219422</td>      <td>0.215153</td>      <td>0</td>      <td>-0.073403</td>    </tr>  </tbody></table><p>5 rows × 30 columns</p></div><h1 id="1数据预处理——解决样本分布不均衡问题之undersample"><a href="#1数据预处理——解决样本分布不均衡问题之undersample" class="headerlink" title="1数据预处理——解决样本分布不均衡问题之undersample"></a>1数据预处理——解决样本分布不均衡问题之undersample</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：采用“undersample”构建模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把数据集切分为 样本 和 标记 存变量</span></span><br><span class="line">X = data.loc[:, data.columns != <span class="string">'Class'</span>]</span><br><span class="line">y = data.loc[:, data.columns == <span class="string">'Class'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算欺诈样本总数</span></span><br><span class="line">number_records_fraud = len(data[data.Class == <span class="number">1</span>])  </span><br><span class="line"><span class="comment">#取得欺诈行为的样本index</span></span><br><span class="line">fraud_indices = np.array(data[data.Class == <span class="number">1</span>].index)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#取得正常的样本index</span></span><br><span class="line">normal_indices = data[data.Class == <span class="number">0</span>].index   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机选出 和 欺诈类数量相同的 正常Index</span></span><br><span class="line">random_normal_indices = np.random.choice(normal_indices, number_records_fraud, replace = <span class="keyword">False</span>)</span><br><span class="line">random_normal_indices = np.array(random_normal_indices)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并取得的两组index，作为欠采样index</span></span><br><span class="line">under_sample_indices = np.concatenate([fraud_indices,random_normal_indices])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得欠采样dataset</span></span><br><span class="line">under_sample_data = data.iloc[under_sample_indices,:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#把undersample数据集切分为 样本 和 标记 存变量</span></span><br><span class="line">X_undersample = under_sample_data.loc[:, under_sample_data.columns != <span class="string">'Class'</span>]</span><br><span class="line">y_undersample = under_sample_data.loc[:, under_sample_data.columns == <span class="string">'Class'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示处理结果</span></span><br><span class="line">print(<span class="string">"Percentage of normal transactions: "</span>, len(under_sample_data[under_sample_data.Class == <span class="number">0</span>])/len(under_sample_data))</span><br><span class="line">print(<span class="string">"Percentage of fraud transactions: "</span>, len(under_sample_data[under_sample_data.Class == <span class="number">1</span>])/len(under_sample_data))</span><br><span class="line">print(<span class="string">"Total number of transactions in resampled data: "</span>, len(under_sample_data))</span><br></pre></td></tr></table></figure><pre><code>Percentage of normal transactions:  0.5Percentage of fraud transactions:  0.5Total number of transactions in resampled data:  984</code></pre><h1 id="1数据预处理——划分训练和测试集"><a href="#1数据预处理——划分训练和测试集" class="headerlink" title="1数据预处理——划分训练和测试集"></a>1数据预处理——划分训练和测试集</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入数据集切分函数</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># Whole dataset 划分全部数据</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = <span class="number">0.3</span>, random_state = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Number transactions train dataset: "</span>, len(X_train))</span><br><span class="line">print(<span class="string">"Number transactions test dataset: "</span>, len(X_test))</span><br><span class="line">print(<span class="string">"Total number of transactions: "</span>, len(X_train)+len(X_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Undersampled dataset 划分欠采样数据</span></span><br><span class="line">X_train_undersample, X_test_undersample, y_train_undersample, y_test_undersample = train_test_split(X_undersample</span><br><span class="line">                                                                                                   ,y_undersample</span><br><span class="line">                                                                                                   ,test_size = <span class="number">0.3</span></span><br><span class="line">                                                                                                   ,random_state = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"Number transactions train dataset: "</span>, len(X_train_undersample))</span><br><span class="line">print(<span class="string">"Number transactions test dataset: "</span>, len(X_test_undersample))</span><br><span class="line">print(<span class="string">"Total number of transactions: "</span>, len(X_train_undersample)+len(X_test_undersample))</span><br></pre></td></tr></table></figure><pre><code>Number transactions train dataset:  199364Number transactions test dataset:  85443Total number of transactions:  284807Number transactions train dataset:  688Number transactions test dataset:  296Total number of transactions:  984</code></pre><h1 id="2-交叉验证——在训练集上做，找最好的逻辑回归正则惩罚系数C"><a href="#2-交叉验证——在训练集上做，找最好的逻辑回归正则惩罚系数C" class="headerlink" title="2 交叉验证——在训练集上做，找最好的逻辑回归正则惩罚系数C"></a>2 交叉验证——在训练集上做，找最好的逻辑回归正则惩罚系数C</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Recall = TP/(TP+FN)  这里适用召回率来检测</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix,recall_score,classification_report</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自己实现召回率的 K=5的交叉验证函数（注意：此处是在训练集上的交叉验证）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printing_Kfold_scores</span><span class="params">(x_train_data,y_train_data)</span>:</span></span><br><span class="line">    fold = KFold(len(y_train_data),<span class="number">5</span>,shuffle=<span class="keyword">False</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Different C parameters   </span></span><br><span class="line">    <span class="comment">#在sklearn里面，惩罚系数是倒数，比如100其实是0.01</span></span><br><span class="line">    <span class="comment">#每个都试一遍，看哪个模型最好</span></span><br><span class="line">    c_param_range = [<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">    results_table = pd.DataFrame(index = range(len(c_param_range),<span class="number">2</span>), columns = [<span class="string">'C_parameter'</span>,<span class="string">'Mean recall score'</span>])</span><br><span class="line">    results_table[<span class="string">'C_parameter'</span>] = c_param_range</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the k-fold will give 2 lists: train_indices = indices[0], test_indices = indices[1]</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c_param <span class="keyword">in</span> c_param_range:</span><br><span class="line">        print(<span class="string">'-------------------------------------------'</span>)</span><br><span class="line">        print(<span class="string">'C parameter: '</span>, c_param)</span><br><span class="line">        print(<span class="string">'-------------------------------------------'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        recall_accs = []</span><br><span class="line">        <span class="comment"># iteration：迭代轮数1-5</span></span><br><span class="line">        <span class="comment"># indices：[0]表示训练集索引集合，[1]表示测试集索引集合</span></span><br><span class="line">        <span class="keyword">for</span> iteration, indices <span class="keyword">in</span> enumerate(fold,start=<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Call the logistic regression model with a certain C parameter</span></span><br><span class="line">            <span class="comment"># C：指定惩罚项的参数</span></span><br><span class="line">            <span class="comment"># penalty：指定惩罚项的算法</span></span><br><span class="line">            lr = LogisticRegression(C = c_param, penalty = <span class="string">'l1'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Use the training data to fit the model. In this case, we use the portion of the fold to train the model</span></span><br><span class="line">            <span class="comment"># with indices[0]. We then predict on the portion assigned as the 'test cross validation' with indices[1]</span></span><br><span class="line">            lr.fit(x_train_data.iloc[indices[<span class="number">0</span>],:],y_train_data.iloc[indices[<span class="number">0</span>],:].values.ravel())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Predict values using the test indices in the training data</span></span><br><span class="line">            y_pred_undersample = lr.predict(x_train_data.iloc[indices[<span class="number">1</span>],:].values)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Calculate the recall score and append it to a list for recall scores representing the current c_parameter</span></span><br><span class="line">            recall_acc = recall_score(y_train_data.iloc[indices[<span class="number">1</span>],:].values,y_pred_undersample)</span><br><span class="line">            recall_accs.append(recall_acc)</span><br><span class="line">            print(<span class="string">'Iteration '</span>, iteration,<span class="string">': recall score = '</span>, recall_acc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The mean value of those recall scores is the metric we want to save and get hold of.</span></span><br><span class="line">        results_table.loc[j,<span class="string">'Mean recall score'</span>] = np.mean(recall_accs)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'Mean recall score '</span>, np.mean(recall_accs))</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    best_c = results_table.loc[results_table[<span class="string">'Mean recall score'</span>].idxmax()][<span class="string">'C_parameter'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Finally, we can check which C parameter is the best amongst the chosen.</span></span><br><span class="line">    print(<span class="string">'*********************************************************************************'</span>)</span><br><span class="line">    print(<span class="string">'Best model to choose from cross validation is with C parameter = '</span>, best_c)</span><br><span class="line">    print(<span class="string">'*********************************************************************************'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> best_c</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best_c = printing_Kfold_scores(X_train_undersample,y_train_undersample)</span><br></pre></td></tr></table></figure><pre><code>-------------------------------------------C parameter:  0.01-------------------------------------------Iteration  1 : recall score =  0.931506849315Iteration  2 : recall score =  0.931506849315Iteration  3 : recall score =  1.0Iteration  4 : recall score =  0.972972972973Iteration  5 : recall score =  0.969696969697Mean recall score  0.96113672826-------------------------------------------C parameter:  0.1-------------------------------------------Iteration  1 : recall score =  0.849315068493Iteration  2 : recall score =  0.86301369863Iteration  3 : recall score =  0.932203389831Iteration  4 : recall score =  0.945945945946Iteration  5 : recall score =  0.893939393939Mean recall score  0.896883499368-------------------------------------------C parameter:  1-------------------------------------------Iteration  1 : recall score =  0.86301369863Iteration  2 : recall score =  0.890410958904Iteration  3 : recall score =  0.983050847458Iteration  4 : recall score =  0.945945945946Iteration  5 : recall score =  0.909090909091Mean recall score  0.918302472006-------------------------------------------C parameter:  10-------------------------------------------Iteration  1 : recall score =  0.86301369863Iteration  2 : recall score =  0.904109589041Iteration  3 : recall score =  0.983050847458Iteration  4 : recall score =  0.945945945946Iteration  5 : recall score =  0.909090909091Mean recall score  0.921042198033-------------------------------------------C parameter:  100-------------------------------------------Iteration  1 : recall score =  0.876712328767Iteration  2 : recall score =  0.890410958904Iteration  3 : recall score =  0.983050847458Iteration  4 : recall score =  0.945945945946Iteration  5 : recall score =  0.909090909091Mean recall score  0.921042198033*********************************************************************************Best model to choose from cross validation is with C parameter =  0.01*********************************************************************************</code></pre><h1 id="3训练-测试——用best-C在训练集上重新训练一遍，再在undersample测试集上预测用-混淆矩阵-计算recall值"><a href="#3训练-测试——用best-C在训练集上重新训练一遍，再在undersample测试集上预测用-混淆矩阵-计算recall值" class="headerlink" title="3训练 + 测试——用best_C在训练集上重新训练一遍，再在undersample测试集上预测用 混淆矩阵 计算recall值"></a>3训练 + 测试——用best_C在训练集上重新训练一遍，再在undersample测试集上预测用 混淆矩阵 计算recall值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_confusion_matrix</span><span class="params">(cm, classes,</span></span></span><br><span class="line"><span class="function"><span class="params">                          title=<span class="string">'Confusion matrix'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          cmap=plt.cm.Blues)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This function prints and plots the confusion matrix.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    plt.imshow(cm, interpolation=<span class="string">'nearest'</span>, cmap=cmap)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    tick_marks = np.arange(len(classes))</span><br><span class="line">    plt.xticks(tick_marks, classes, rotation=<span class="number">0</span>)</span><br><span class="line">    plt.yticks(tick_marks, classes)</span><br><span class="line"></span><br><span class="line">    thresh = cm.max() / <span class="number">2.</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(range(cm.shape[<span class="number">0</span>]), range(cm.shape[<span class="number">1</span>])):</span><br><span class="line">        plt.text(j, i, cm[i, j],</span><br><span class="line">                 horizontalalignment=<span class="string">"center"</span>,</span><br><span class="line">                 color=<span class="string">"white"</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">"black"</span>)</span><br><span class="line"></span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.ylabel(<span class="string">'True label'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Predicted label'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = best_c, penalty = <span class="string">'l1'</span>)</span><br><span class="line">lr.fit(X_train_undersample,y_train_undersample.values.ravel())</span><br><span class="line">y_pred_undersample = lr.predict(X_test_undersample.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute confusion matrix</span></span><br><span class="line">cnf_matrix = confusion_matrix(y_test_undersample,y_pred_undersample)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>,<span class="number">0</span>]+cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot non-normalized confusion matrix</span></span><br><span class="line">class_names = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix</span><br><span class="line">                      , classes=class_names</span><br><span class="line">                      , title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#混淆矩阵 显示模型分类效果</span></span><br></pre></td></tr></table></figure><pre><code>Recall metric in the testing dataset:  0.931972789116</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_16_1.png" alt="png"></p><h1 id="3训练-测试——用best-C在训练集上重新训练一遍，再在-完整-测试集上预测用-混淆矩阵-计算recall值"><a href="#3训练-测试——用best-C在训练集上重新训练一遍，再在-完整-测试集上预测用-混淆矩阵-计算recall值" class="headerlink" title="3训练 + 测试——用best_C在训练集上重新训练一遍，再在 完整 测试集上预测用 混淆矩阵 计算recall值"></a>3训练 + 测试——用best_C在训练集上重新训练一遍，再在 完整 测试集上预测用 混淆矩阵 计算recall值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = best_c, penalty = <span class="string">'l1'</span>)</span><br><span class="line">lr.fit(X_train_undersample,y_train_undersample.values.ravel())</span><br><span class="line">y_pred = lr.predict(X_test.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute confusion matrix</span></span><br><span class="line">cnf_matrix = confusion_matrix(y_test,y_pred)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>,<span class="number">0</span>]+cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot non-normalized confusion matrix</span></span><br><span class="line">class_names = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix</span><br><span class="line">                      , classes=class_names</span><br><span class="line">                      , title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>Recall metric in the testing dataset:  0.918367346939</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_18_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里发现虽然recall值还可以，但是误伤了<span class="number">8581</span>个（被检测成欺诈了），也就是精度accuracy有点低。</span><br><span class="line">故要权衡两者，都要较高才行</span><br></pre></td></tr></table></figure><h1 id="这里展示的是：不做样本平衡处理，直接把所有样本做交叉验证，发现效果很差"><a href="#这里展示的是：不做样本平衡处理，直接把所有样本做交叉验证，发现效果很差" class="headerlink" title="这里展示的是：不做样本平衡处理，直接把所有样本做交叉验证，发现效果很差"></a>这里展示的是：不做样本平衡处理，直接把所有样本做交叉验证，发现效果很差</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best_c = printing_Kfold_scores(X_train,y_train)</span><br></pre></td></tr></table></figure><pre><code>-------------------------------------------C parameter:  0.01-------------------------------------------Iteration  1 : recall score =  0.492537313433Iteration  2 : recall score =  0.602739726027Iteration  3 : recall score =  0.683333333333Iteration  4 : recall score =  0.569230769231Iteration  5 : recall score =  0.45Mean recall score  0.559568228405-------------------------------------------C parameter:  0.1-------------------------------------------Iteration  1 : recall score =  0.567164179104Iteration  2 : recall score =  0.616438356164Iteration  3 : recall score =  0.683333333333Iteration  4 : recall score =  0.584615384615Iteration  5 : recall score =  0.525Mean recall score  0.595310250644-------------------------------------------C parameter:  1-------------------------------------------Iteration  1 : recall score =  0.55223880597Iteration  2 : recall score =  0.616438356164Iteration  3 : recall score =  0.716666666667Iteration  4 : recall score =  0.615384615385Iteration  5 : recall score =  0.5625Mean recall score  0.612645688837-------------------------------------------C parameter:  10-------------------------------------------Iteration  1 : recall score =  0.55223880597Iteration  2 : recall score =  0.616438356164Iteration  3 : recall score =  0.733333333333Iteration  4 : recall score =  0.615384615385Iteration  5 : recall score =  0.575Mean recall score  0.61847902217-------------------------------------------C parameter:  100-------------------------------------------Iteration  1 : recall score =  0.55223880597Iteration  2 : recall score =  0.616438356164Iteration  3 : recall score =  0.733333333333Iteration  4 : recall score =  0.615384615385Iteration  5 : recall score =  0.575Mean recall score  0.61847902217*********************************************************************************Best model to choose from cross validation is with C parameter =  10.0*********************************************************************************</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = best_c, penalty = <span class="string">'l1'</span>)</span><br><span class="line">lr.fit(X_train,y_train.values.ravel())</span><br><span class="line">y_pred_undersample = lr.predict(X_test.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute confusion matrix</span></span><br><span class="line">cnf_matrix = confusion_matrix(y_test,y_pred_undersample)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>,<span class="number">0</span>]+cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot non-normalized confusion matrix</span></span><br><span class="line">class_names = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix</span><br><span class="line">                      , classes=class_names</span><br><span class="line">                      , title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>Recall metric in the testing dataset:  0.619047619048</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_22_1.png" alt="png"></p><h1 id="4-用predict-proba来测试-最好的逻辑回归-阈值"><a href="#4-用predict-proba来测试-最好的逻辑回归-阈值" class="headerlink" title="4 用predict_proba来测试 最好的逻辑回归 阈值"></a>4 用predict_proba来测试 最好的逻辑回归 阈值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = <span class="number">0.01</span>, penalty = <span class="string">'l1'</span>)</span><br><span class="line">lr.fit(X_train_undersample,y_train_undersample.values.ravel())</span><br><span class="line">y_pred_undersample_proba = lr.predict_proba(X_test_undersample.values)</span><br><span class="line"></span><br><span class="line">thresholds = [<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.6</span>,<span class="number">0.7</span>,<span class="number">0.8</span>,<span class="number">0.9</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> threshold <span class="keyword">in</span> thresholds:</span><br><span class="line">    y_test_predictions_high_recall = y_pred_undersample_proba[:,<span class="number">1</span>] &gt; threshold</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,j)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute confusion matrix</span></span><br><span class="line">    cnf_matrix = confusion_matrix(y_test_undersample,y_test_predictions_high_recall)</span><br><span class="line">    np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>,<span class="number">0</span>]+cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot non-normalized confusion matrix</span></span><br><span class="line">    class_names = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    plot_confusion_matrix(cnf_matrix</span><br><span class="line">                          , classes=class_names</span><br><span class="line">                          , title=<span class="string">'Threshold &gt;= %s'</span>%threshold)</span><br></pre></td></tr></table></figure><pre><code>Recall metric in the testing dataset:  1.0Recall metric in the testing dataset:  1.0Recall metric in the testing dataset:  1.0Recall metric in the testing dataset:  0.993197278912Recall metric in the testing dataset:  0.931972789116Recall metric in the testing dataset:  0.884353741497Recall metric in the testing dataset:  0.843537414966Recall metric in the testing dataset:  0.748299319728Recall metric in the testing dataset:  0.578231292517</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_24_1.png" alt="png"></p><h1 id="1数据预处理——解决样本分布不均衡问题之oversample"><a href="#1数据预处理——解决样本分布不均衡问题之oversample" class="headerlink" title="1数据预处理——解决样本分布不均衡问题之oversample"></a>1数据预处理——解决样本分布不均衡问题之oversample</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 安装命令：pip install imblearn</span></span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">credit_cards=pd.read_csv(<span class="string">'creditcard.csv'</span>)</span><br><span class="line"></span><br><span class="line">columns=credit_cards.columns</span><br><span class="line"><span class="comment"># The labels are in the last column ('Class'). Simply remove it to obtain features columns</span></span><br><span class="line">features_columns=columns.delete(len(columns)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">features=credit_cards[features_columns]</span><br><span class="line">labels=credit_cards[<span class="string">'Class'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#划分数据集</span></span><br><span class="line">features_train, features_test, labels_train, labels_test = train_test_split(features, </span><br><span class="line">                                                                            labels, </span><br><span class="line">                                                                            test_size=<span class="number">0.2</span>, </span><br><span class="line">                                                                            random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#★SMOTE算法通过给定的训练集，生成新的随机扩充训练集</span></span><br><span class="line">oversampler=SMOTE(random_state=<span class="number">0</span>)</span><br><span class="line">os_features,os_labels=oversampler.fit_sample(features_train,labels_train)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成前，label=0</span></span><br><span class="line">print(len(labels_train[labels_train == <span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成以后，label=1的变成和=0的一样多</span></span><br><span class="line">print(len(os_labels[os_labels == <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>227454227454</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os_features = pd.DataFrame(os_features)</span><br><span class="line">os_labels = pd.DataFrame(os_labels)</span><br><span class="line">best_c = printing_Kfold_scores(os_features,os_labels)</span><br></pre></td></tr></table></figure><pre><code>-------------------------------------------C parameter:  0.01-------------------------------------------Iteration  1 : recall score =  0.890322580645Iteration  2 : recall score =  0.894736842105Iteration  3 : recall score =  0.968617904172Iteration  4 : recall score =  0.944471922709Iteration  5 : recall score =  0.958397907255Mean recall score  0.931309431377-------------------------------------------C parameter:  0.1-------------------------------------------Iteration  1 : recall score =  0.890322580645Iteration  2 : recall score =  0.894736842105Iteration  3 : recall score =  0.970255615802Iteration  4 : recall score =  0.959991646608Iteration  5 : recall score =  0.96051922929Mean recall score  0.93516518289-------------------------------------------C parameter:  1-------------------------------------------Iteration  1 : recall score =  0.890322580645Iteration  2 : recall score =  0.894736842105Iteration  3 : recall score =  0.970211353325Iteration  4 : recall score =  0.960134533584Iteration  5 : recall score =  0.960442290148Mean recall score  0.935169519962-------------------------------------------C parameter:  10-------------------------------------------Iteration  1 : recall score =  0.890322580645Iteration  2 : recall score =  0.894736842105Iteration  3 : recall score =  0.970322009516Iteration  4 : recall score =  0.95977182049Iteration  5 : recall score =  0.960783020631Mean recall score  0.935187254678-------------------------------------------C parameter:  100-------------------------------------------Iteration  1 : recall score =  0.890322580645Iteration  2 : recall score =  0.894736842105Iteration  3 : recall score =  0.969635941131Iteration  4 : recall score =  0.960255437949Iteration  5 : recall score =  0.960398324925Mean recall score  0.935069825351*********************************************************************************Best model to choose from cross validation is with C parameter =  10.0*********************************************************************************</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = best_c, penalty = <span class="string">'l1'</span>)</span><br><span class="line">lr.fit(os_features,os_labels.values.ravel())</span><br><span class="line">y_pred = lr.predict(features_test.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute confusion matrix</span></span><br><span class="line">cnf_matrix = confusion_matrix(labels_test,y_pred)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>,<span class="number">0</span>]+cnf_matrix[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot non-normalized confusion matrix</span></span><br><span class="line">class_names = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix</span><br><span class="line">                      , classes=class_names</span><br><span class="line">                      , title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>Recall metric in the testing dataset:  0.910891089109</code></pre><p><img src="/2018/04/19/machine_learning_in_action/CreditCard/output_32_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;案例：用-逻辑回归-预测-信用卡欺诈&quot;&gt;&lt;a href=&quot;#案例：用-逻辑回归-预测-信用卡欺诈&quot; class=&quot;headerlink&quot; title=&quot;案例：用 逻辑回归 预测 信用卡欺诈&quot;&gt;&lt;/a&gt;案例：用 逻辑回归 预测 信用卡欺诈&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="machine_learning_in_action" scheme="http://yoursite.com/categories/machine-learning-in-action/"/>
    
    
      <category term="usersample" scheme="http://yoursite.com/tags/usersample/"/>
    
      <category term="oversample" scheme="http://yoursite.com/tags/oversample/"/>
    
      <category term="K折交叉验证" scheme="http://yoursite.com/tags/K%E6%8A%98%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    
      <category term="混淆矩阵" scheme="http://yoursite.com/tags/%E6%B7%B7%E6%B7%86%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>备忘记录</title>
    <link href="http://yoursite.com/2018/04/19/OTHERS/%E5%A4%87%E5%BF%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/19/OTHERS/备忘记录/</id>
    <published>2018-04-18T16:51:27.000Z</published>
    <updated>2018-04-26T07:02:29.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量命名标准"><a href="#变量命名标准" class="headerlink" title="变量命名标准"></a>变量命名标准</h2><p>整型：语义名<br>数组：语义名+S 或 语义名+Arr<br>一般：语义名+数据结构名+其他特征</p><p>比如：classArrTry</p><h2 id="标题title设置标准"><a href="#标题title设置标准" class="headerlink" title="标题title设置标准"></a>标题title设置标准</h2><p>为了好看，把“库/框架名”放前面，把“算法名”放后面，如：<br>Tensorflow - LinearRegression</p><h2 id="标签tags设置标准"><a href="#标签tags设置标准" class="headerlink" title="标签tags设置标准"></a>标签tags设置标准</h2><p>文章内所包含的 技术点名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量命名标准&quot;&gt;&lt;a href=&quot;#变量命名标准&quot; class=&quot;headerlink&quot; title=&quot;变量命名标准&quot;&gt;&lt;/a&gt;变量命名标准&lt;/h2&gt;&lt;p&gt;整型：语义名&lt;br&gt;数组：语义名+S 或 语义名+Arr&lt;br&gt;一般：语义名+数据结构名+其他特征&lt;/p&gt;

      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
